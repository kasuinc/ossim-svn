# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyossimtest', [dirname(__file__)])
        except ImportError:
            import _pyossimtest
            return _pyossimtest
        if fp is not None:
            try:
                _mod = imp.load_module('_pyossimtest', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyossimtest = swig_import_helper()
    del swig_import_helper
else:
    import _pyossimtest
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


pyossimtestConstants_HEADER = _pyossimtest.pyossimtestConstants_HEADER
pyossimtestInfo_HEADER = _pyossimtest.pyossimtestInfo_HEADER
class Info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Info, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossimtest.new_Info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossimtest.delete_Info
    __del__ = lambda self : None;
    def initialize(self, *args): return _pyossimtest.Info_initialize(self, *args)
    def execute(self): return _pyossimtest.Info_execute(self)
    def getImageInfo(self, *args): return _pyossimtest.Info_getImageInfo(self, *args)
Info_swigregister = _pyossimtest.Info_swigregister
Info_swigregister(Info)

pyossimtestInit_HEADER = _pyossimtest.pyossimtestInit_HEADER
class Init(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Init, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Init, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossimtest.delete_Init
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossimtest.Init_instance
    if _newclass:instance = staticmethod(_pyossimtest.Init_instance)
    def initialize(self, *args): return _pyossimtest.Init_initialize(self, *args)
Init_swigregister = _pyossimtest.Init_swigregister
Init_swigregister(Init)

def Init_instance():
  return _pyossimtest.Init_instance()
Init_instance = _pyossimtest.Init_instance

pyossimtestSingleImageChain_HEADER = _pyossimtest.pyossimtestSingleImageChain_HEADER
class SingleImageChain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleImageChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleImageChain, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossimtest.new_SingleImageChain()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossimtest.delete_SingleImageChain
    __del__ = lambda self : None;
    def open(self, *args): return _pyossimtest.SingleImageChain_open(self, *args)
    def isOpen(self): return _pyossimtest.SingleImageChain_isOpen(self)
    def close(self): return _pyossimtest.SingleImageChain_close(self)
    def getEntryList(self): return _pyossimtest.SingleImageChain_getEntryList(self)
    def getFilename(self): return _pyossimtest.SingleImageChain_getFilename(self)
    def createRenderedChain(self): return _pyossimtest.SingleImageChain_createRenderedChain(self)
    def selectBands(self, *args): return _pyossimtest.SingleImageChain_selectBands(self, *args)
    def getBandSelection(self): return _pyossimtest.SingleImageChain_getBandSelection(self)
    def getNumberOfBands(self): return _pyossimtest.SingleImageChain_getNumberOfBands(self)
    def setHistogram(self, *args): return _pyossimtest.SingleImageChain_setHistogram(self, *args)
    def getHistogramFile(self): return _pyossimtest.SingleImageChain_getHistogramFile(self)
    def setOverview(self, *args): return _pyossimtest.SingleImageChain_setOverview(self, *args)
    def getOverviewFile(self): return _pyossimtest.SingleImageChain_getOverviewFile(self)
SingleImageChain_swigregister = _pyossimtest.SingleImageChain_swigregister
SingleImageChain_swigregister(SingleImageChain)

# This file is compatible with both classic and new-style classes.


