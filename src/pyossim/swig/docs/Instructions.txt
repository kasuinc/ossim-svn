Directory Structure:
--------------------

pyossim/
	|- swig	(Contains all Swig interface files)
	|	|-base/			Directory that contains all base swig-interface files
		|-elevation/		Directory that contains all elevation swig-interface files
		|-font/      		Directory that contains all font swig-interface files
		|-imaging/		Directory that contains all imaging swig-interface files
		|-init/     		Directory that contains init swig-interface files
		|-projection/  		Directory that contains all projection swig-interface files
		|-src/			Directory that contains source cpp files for the classes wrapped
		|-object/		Directory that contains compiled object files of classes wrapped and compiled
		|-docs/			Directory where all documents and scripts are placed

		|-README   		Readme file written earlier
		|-LEFTOUT  		File containing names of classes missed out
		|-master.i		The master swig-interface file
		|-Instructions.txt	This file  
	|   
	|
	|- python (Contains files specific to python distribution - eg. distutils setup.py file)
	|	  (to be filled and detailed later)	
	|
	|- backup (Contains files prior to the code restructuring for backup purposes)
	|	  (to be filled and detailed later)	



Steps to compile and generate wrapped library:
----------------------------------------------
1. Go to the pyossim/swig directory, where the master.i file is present.

2. In the terminal, type the following command:
   $ swig -c++ -python -Wall -I/home/vipul/ossim-svn/src/ossim/include/ master.i

   here, the "-I/home/vipul/ossim-svn/src/ossim/include" argument is to add a search path 
   for the ossim source header files, i.e. the directory under which all header(.h) files of
   ossim classes are present. Modify it according to your local path, keeping '-I' intact. 

3. The above command will generate 2 new files:
   - master_wrap.cxx
   - pyossim.py

4. Now, type the following command to generate the object(.o) files of the wrapped classes.

   $ g++ -fPIC -c /home/vipul/ossim-svn/src/pyossim/swig/src/* master_wrap.cxx -I/usr/include/python2.6

   here, the argument "/home/vipul/ossim-svn/src/pyossim/swig/src/*" is to include all files present 
   in the src/ directory (These are the files that have been exactly copied from the original location), 
   these are the same cpp source files of the classes whose wrapping we want to create. 
   They were copied to this folder since we wanted to compile only those source cpp class files whose 
   swig-wrapper files(.i files) have been coded. Also, this enables compilation in a single command.

   The argument "-I/usr/include/python2.6" is to add the Python source directory. Modify according to 
   local path, keeping '-I' intact.

5. If everything goes well, the above step will generate object files(.o files) of all the corresponding 
   class source files included from src/ directory and listed in master.i file.

   In order to keep the folder clean, you can move them to object/ directory by writing:
   $ mv ossim*.o object/

   This step will also generate master_wrap.o file 

6. Now, using these object files, we will create a Python shared library that can be accessed from python 
   console. For that, we execute the following command:
   
   $  g++ -shared object/* master_wrap.o -o _pyossim.so -L/home/vipul/ossim-svn/src/ossim_package_support/cmake/build -l ossim

   Now here, the argument "object/*" is to include all the object class files generated in the previous step
   
   Argument "_pyossim.so" is the name of the target shared library file.

   Argument "-L/home/vipul/ossim-svn/src/ossim_package_support/cmake/build" is to link the object files with your ossim build
   directory. So modify this according to your local settings, keeping the '-L' intact.

   Now, this will generate a "_pyossim.so" file

7. To access it from a Python console, simply invoke Python from the command line. Just run Python, import the library and 
   test the respective functions.
   
   $ python
   $ Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39)
      [GCC 4.4.5] on linux2
      Type "help", "copyright", "credits" or "license" for more information.
      >>> import pyossim               [module name, pyossim in our case]
      >>> a = pyssim.ossimImageModel()
   
      and so on...
   
 ----------------------------------------------------------------------------------
