# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyossim', [dirname(__file__)])
        except ImportError:
            import _pyossim
            return _pyossim
        if fp is not None:
            try:
                _mod = imp.load_module('_pyossim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyossim = swig_import_helper()
    del swig_import_helper
else:
    import _pyossim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ossimInit_HEADER = _pyossim.ossimInit_HEADER
class ossimInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimInit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimInit
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimInit_instance
    if _newclass:instance = staticmethod(_pyossim.ossimInit_instance)
    def addOptions(self, *args): return _pyossim.ossimInit_addOptions(self, *args)
    def initialize(self, *args): return _pyossim.ossimInit_initialize(self, *args)
    def finalize(self): return _pyossim.ossimInit_finalize(self)
    def usage(self): return _pyossim.ossimInit_usage(self)
    def getElevEnabledFlag(self): return _pyossim.ossimInit_getElevEnabledFlag(self)
    def setElevEnabledFlag(self, *args): return _pyossim.ossimInit_setElevEnabledFlag(self, *args)
    def setPluginLoaderEnabledFlag(self, *args): return _pyossim.ossimInit_setPluginLoaderEnabledFlag(self, *args)
    def loadPlugins(self, *args): return _pyossim.ossimInit_loadPlugins(self, *args)
    def initializePlugins(self): return _pyossim.ossimInit_initializePlugins(self)
    def initializeDefaultFactories(self): return _pyossim.ossimInit_initializeDefaultFactories(self)
    def initializeElevation(self): return _pyossim.ossimInit_initializeElevation(self)
    def initializeLogFile(self): return _pyossim.ossimInit_initializeLogFile(self)
    def version(self): return _pyossim.ossimInit_version(self)
    def appName(self): return _pyossim.ossimInit_appName(self)
ossimInit_swigregister = _pyossim.ossimInit_swigregister
ossimInit_swigregister(ossimInit)

def ossimInit_instance():
  return _pyossim.ossimInit_instance()
ossimInit_instance = _pyossim.ossimInit_instance

class ossimDtedElevationDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDtedElevationDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDtedElevationDatabase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDtedElevationDatabase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDtedElevationDatabase
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimDtedElevationDatabase_dup(self)
    def open(self, *args): return _pyossim.ossimDtedElevationDatabase_open(self, *args)
    def pointHasCoverage(self, *args): return _pyossim.ossimDtedElevationDatabase_pointHasCoverage(self, *args)
    def getAccuracyLE90(self, *args): return _pyossim.ossimDtedElevationDatabase_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimDtedElevationDatabase_getAccuracyCE90(self, *args)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimDtedElevationDatabase_getHeightAboveMSL(self, *args)
    def getHeightAboveEllipsoid(self, *args): return _pyossim.ossimDtedElevationDatabase_getHeightAboveEllipsoid(self, *args)
    def createId(self, *args): return _pyossim.ossimDtedElevationDatabase_createId(self, *args)
    def loadState(self, *args): return _pyossim.ossimDtedElevationDatabase_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimDtedElevationDatabase_saveState(self, *args)
ossimDtedElevationDatabase_swigregister = _pyossim.ossimDtedElevationDatabase_swigregister
ossimDtedElevationDatabase_swigregister(ossimDtedElevationDatabase)

class ossimElevationDatabaseFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationDatabaseFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevationDatabaseFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevationDatabaseFactory_instance)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseFactory_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseFactory_open(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimElevationDatabaseFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseFactory
    __del__ = lambda self : None;
ossimElevationDatabaseFactory_swigregister = _pyossim.ossimElevationDatabaseFactory_swigregister
ossimElevationDatabaseFactory_swigregister(ossimElevationDatabaseFactory)

def ossimElevationDatabaseFactory_instance():
  return _pyossim.ossimElevationDatabaseFactory_instance()
ossimElevationDatabaseFactory_instance = _pyossim.ossimElevationDatabaseFactory_instance

class ossimElevationDatabaseRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationDatabaseRegistry()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevationDatabaseRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevationDatabaseRegistry_instance)
    def getTypeNameList(self, *args): return _pyossim.ossimElevationDatabaseRegistry_getTypeNameList(self, *args)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseRegistry_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseRegistry_open(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseRegistry
    __del__ = lambda self : None;
ossimElevationDatabaseRegistry_swigregister = _pyossim.ossimElevationDatabaseRegistry_swigregister
ossimElevationDatabaseRegistry_swigregister(ossimElevationDatabaseRegistry)

def ossimElevationDatabaseRegistry_instance():
  return _pyossim.ossimElevationDatabaseRegistry_instance()
ossimElevationDatabaseRegistry_instance = _pyossim.ossimElevationDatabaseRegistry_instance

class ossimElevCellHandlerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevCellHandlerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevCellHandlerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevCellHandlerFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevCellHandlerFactory_instance)
    def create(self, *args): return _pyossim.ossimElevCellHandlerFactory_create(self, *args)
    def getList(self): return _pyossim.ossimElevCellHandlerFactory_getList(self)
    __swig_destroy__ = _pyossim.delete_ossimElevCellHandlerFactory
    __del__ = lambda self : None;
ossimElevCellHandlerFactory_swigregister = _pyossim.ossimElevCellHandlerFactory_swigregister
ossimElevCellHandlerFactory_swigregister(ossimElevCellHandlerFactory)

def ossimElevCellHandlerFactory_instance():
  return _pyossim.ossimElevCellHandlerFactory_instance()
ossimElevCellHandlerFactory_instance = _pyossim.ossimElevCellHandlerFactory_instance

class ossimElevManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimElevManager
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevManager_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevManager_instance)
    def getHeightAboveEllipsoid(self, *args): return _pyossim.ossimElevManager_getHeightAboveEllipsoid(self, *args)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimElevManager_getHeightAboveMSL(self, *args)
    def getAccuracyLE90(self, *args): return _pyossim.ossimElevManager_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimElevManager_getAccuracyCE90(self, *args)
    def pointHasCoverage(self, *args): return _pyossim.ossimElevManager_pointHasCoverage(self, *args)
    def getMeanSpacingMeters(self): return _pyossim.ossimElevManager_getMeanSpacingMeters(self)
    def getNumberOfElevationDatabases(self): return _pyossim.ossimElevManager_getNumberOfElevationDatabases(self)
    def getElevationDatabase(self, *args): return _pyossim.ossimElevManager_getElevationDatabase(self, *args)
    def getElevationDatabaseList(self, *args): return _pyossim.ossimElevManager_getElevationDatabaseList(self, *args)
    def addDatabase(self, *args): return _pyossim.ossimElevManager_addDatabase(self, *args)
    def loadElevationPath(self, *args): return _pyossim.ossimElevManager_loadElevationPath(self, *args)
    def setDefaultHeightAboveEllipsoid(self, *args): return _pyossim.ossimElevManager_setDefaultHeightAboveEllipsoid(self, *args)
    def setElevationOffset(self, *args): return _pyossim.ossimElevManager_setElevationOffset(self, *args)
    def getElevationOffset(self): return _pyossim.ossimElevManager_getElevationOffset(self)
    def getOpenCellList(self, *args): return _pyossim.ossimElevManager_getOpenCellList(self, *args)
    def setUseGeoidIfNullFlag(self, *args): return _pyossim.ossimElevManager_setUseGeoidIfNullFlag(self, *args)
    def getUseGeoidIfNullFlag(self): return _pyossim.ossimElevManager_getUseGeoidIfNullFlag(self)
    def clear(self): return _pyossim.ossimElevManager_clear(self)
    def saveState(self, *args): return _pyossim.ossimElevManager_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimElevManager_loadState(self, *args)
ossimElevManager_swigregister = _pyossim.ossimElevManager_swigregister
ossimElevManager_swigregister(ossimElevManager)

def ossimElevManager_instance():
  return _pyossim.ossimElevManager_instance()
ossimElevManager_instance = _pyossim.ossimElevManager_instance

class ossim2dLinearRegression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dLinearRegression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dLinearRegression, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossim2dLinearRegression()
        try: self.this.append(this)
        except: self.this = this
    def getEquation(self, *args): return _pyossim.ossim2dLinearRegression_getEquation(self, *args)
    def addPoint(self, *args): return _pyossim.ossim2dLinearRegression_addPoint(self, *args)
    def clear(self): return _pyossim.ossim2dLinearRegression_clear(self)
    def solve(self): return _pyossim.ossim2dLinearRegression_solve(self)
    def getNumberOfPoints(self): return _pyossim.ossim2dLinearRegression_getNumberOfPoints(self)
    __swig_destroy__ = _pyossim.delete_ossim2dLinearRegression
    __del__ = lambda self : None;
ossim2dLinearRegression_swigregister = _pyossim.ossim2dLinearRegression_swigregister
ossim2dLinearRegression_swigregister(ossim2dLinearRegression)

class ossim2dTo2dTransformFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dTransformFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dTransformFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossim2dTo2dTransformFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossim2dTo2dTransformFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossim2dTo2dTransformFactory_instance)
    def createTransform(self, *args): return _pyossim.ossim2dTo2dTransformFactory_createTransform(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossim2dTo2dTransformFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossim2dTo2dTransformFactory
    __del__ = lambda self : None;
ossim2dTo2dTransformFactory_swigregister = _pyossim.ossim2dTo2dTransformFactory_swigregister
ossim2dTo2dTransformFactory_swigregister(ossim2dTo2dTransformFactory)

def ossim2dTo2dTransformFactory_instance():
  return _pyossim.ossim2dTo2dTransformFactory_instance()
ossim2dTo2dTransformFactory_instance = _pyossim.ossim2dTo2dTransformFactory_instance

class ossimAdjustableParameterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAdjustableParameterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAdjustableParameterInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimAdjustableParameterInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getParameter(self): return _pyossim.ossimAdjustableParameterInfo_getParameter(self)
    def setParameter(self, *args): return _pyossim.ossimAdjustableParameterInfo_setParameter(self, *args)
    def getSigma(self): return _pyossim.ossimAdjustableParameterInfo_getSigma(self)
    def setSigma(self, *args): return _pyossim.ossimAdjustableParameterInfo_setSigma(self, *args)
    def getDescription(self): return _pyossim.ossimAdjustableParameterInfo_getDescription(self)
    def setDescription(self, *args): return _pyossim.ossimAdjustableParameterInfo_setDescription(self, *args)
    def getUnit(self): return _pyossim.ossimAdjustableParameterInfo_getUnit(self)
    def setUnit(self, *args): return _pyossim.ossimAdjustableParameterInfo_setUnit(self, *args)
    def getUnitAsString(self): return _pyossim.ossimAdjustableParameterInfo_getUnitAsString(self)
    def setCenter(self, *args): return _pyossim.ossimAdjustableParameterInfo_setCenter(self, *args)
    def getCenter(self): return _pyossim.ossimAdjustableParameterInfo_getCenter(self)
    def setOffset(self, *args): return _pyossim.ossimAdjustableParameterInfo_setOffset(self, *args)
    def computeOffset(self): return _pyossim.ossimAdjustableParameterInfo_computeOffset(self)
    def setLockFlag(self, *args): return _pyossim.ossimAdjustableParameterInfo_setLockFlag(self, *args)
    def getLockFlag(self): return _pyossim.ossimAdjustableParameterInfo_getLockFlag(self)
    def loadState(self, *args): return _pyossim.ossimAdjustableParameterInfo_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimAdjustableParameterInfo_saveState(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimAdjustableParameterInfo
    __del__ = lambda self : None;
ossimAdjustableParameterInfo_swigregister = _pyossim.ossimAdjustableParameterInfo_swigregister
ossimAdjustableParameterInfo_swigregister(ossimAdjustableParameterInfo)

class ossimCsvFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimCsvFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimCsvFile, name)
    __repr__ = _swig_repr
    def __init__(self, separatorList = ","): 
        this = _pyossim.new_ossimCsvFile(separatorList)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimCsvFile
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimCsvFile_open(self, *args)
    def close(self): return _pyossim.ossimCsvFile_close(self)
    def readHeader(self): return _pyossim.ossimCsvFile_readHeader(self)
    def nextRecord(self): return _pyossim.ossimCsvFile_nextRecord(self)
    def fieldHeaderList(self): return _pyossim.ossimCsvFile_fieldHeaderList(self)
    def indexOfField(self, *args): return _pyossim.ossimCsvFile_indexOfField(self, *args)
    __swig_setmethods__["INVALID_INDEX"] = _pyossim.ossimCsvFile_INVALID_INDEX_set
    __swig_getmethods__["INVALID_INDEX"] = _pyossim.ossimCsvFile_INVALID_INDEX_get
    if _newclass:INVALID_INDEX = _swig_property(_pyossim.ossimCsvFile_INVALID_INDEX_get, _pyossim.ossimCsvFile_INVALID_INDEX_set)
ossimCsvFile_swigregister = _pyossim.ossimCsvFile_swigregister
ossimCsvFile_swigregister(ossimCsvFile)
cvar = _pyossim.cvar

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyossim.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyossim.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyossim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyossim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyossim.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyossim.SwigPyIterator_copy(self)
    def next(self): return _pyossim.SwigPyIterator_next(self)
    def __next__(self): return _pyossim.SwigPyIterator___next__(self)
    def previous(self): return _pyossim.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyossim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyossim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyossim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyossim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyossim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyossim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorossimString, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorossimString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorossimString___nonzero__(self)
    def __bool__(self): return _pyossim.vectorossimString___bool__(self)
    def __len__(self): return _pyossim.vectorossimString___len__(self)
    def pop(self): return _pyossim.vectorossimString_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorossimString___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorossimString___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorossimString___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorossimString___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorossimString___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorossimString___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorossimString_append(self, *args)
    def empty(self): return _pyossim.vectorossimString_empty(self)
    def size(self): return _pyossim.vectorossimString_size(self)
    def clear(self): return _pyossim.vectorossimString_clear(self)
    def swap(self, *args): return _pyossim.vectorossimString_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorossimString_get_allocator(self)
    def begin(self): return _pyossim.vectorossimString_begin(self)
    def end(self): return _pyossim.vectorossimString_end(self)
    def rbegin(self): return _pyossim.vectorossimString_rbegin(self)
    def rend(self): return _pyossim.vectorossimString_rend(self)
    def pop_back(self): return _pyossim.vectorossimString_pop_back(self)
    def erase(self, *args): return _pyossim.vectorossimString_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorossimString_push_back(self, *args)
    def front(self): return _pyossim.vectorossimString_front(self)
    def back(self): return _pyossim.vectorossimString_back(self)
    def assign(self, *args): return _pyossim.vectorossimString_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorossimString_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorossimString_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorossimString_reserve(self, *args)
    def capacity(self): return _pyossim.vectorossimString_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorossimString
    __del__ = lambda self : None;
vectorossimString_swigregister = _pyossim.vectorossimString_swigregister
vectorossimString_swigregister(vectorossimString)

ossimDatumFactory_HEADER = _pyossim.ossimDatumFactory_HEADER
class ossimDatumFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimDatumFactory_create(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactory_instance)
    def wgs84(self): return _pyossim.ossimDatumFactory_wgs84(self)
    def wgs72(self): return _pyossim.ossimDatumFactory_wgs72(self)
    def getList(self, *args): return _pyossim.ossimDatumFactory_getList(self, *args)
    def writeCStructure(self, *args): return _pyossim.ossimDatumFactory_writeCStructure(self, *args)
ossimDatumFactory_swigregister = _pyossim.ossimDatumFactory_swigregister
ossimDatumFactory_swigregister(ossimDatumFactory)

def ossimDatumFactory_instance():
  return _pyossim.ossimDatumFactory_instance()
ossimDatumFactory_instance = _pyossim.ossimDatumFactory_instance

class ossimDatumFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactoryRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimDatumFactoryRegistry_registerFactory(self, *args)
    def create(self, *args): return _pyossim.ossimDatumFactoryRegistry_create(self, *args)
    def getList(self, *args): return _pyossim.ossimDatumFactoryRegistry_getList(self, *args)
ossimDatumFactoryRegistry_swigregister = _pyossim.ossimDatumFactoryRegistry_swigregister
ossimDatumFactoryRegistry_swigregister(ossimDatumFactoryRegistry)

def ossimDatumFactoryRegistry_instance():
  return _pyossim.ossimDatumFactoryRegistry_instance()
ossimDatumFactoryRegistry_instance = _pyossim.ossimDatumFactoryRegistry_instance

class ossimDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatum, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def shift(self, *args): return _pyossim.ossimDatum_shift(self, *args)
    def shiftToWgs84(self, *args): return _pyossim.ossimDatum_shiftToWgs84(self, *args)
    def shiftFromWgs84(self, *args): return _pyossim.ossimDatum_shiftFromWgs84(self, *args)
    def isTheSameAs(self, *args): return _pyossim.ossimDatum_isTheSameAs(self, *args)
    def code(self): return _pyossim.ossimDatum_code(self)
    def name(self): return _pyossim.ossimDatum_name(self)
    def epsgCode(self): return _pyossim.ossimDatum_epsgCode(self)
    def ellipsoid(self): return _pyossim.ossimDatum_ellipsoid(self)
    def sigmaX(self): return _pyossim.ossimDatum_sigmaX(self)
    def sigmaY(self): return _pyossim.ossimDatum_sigmaY(self)
    def sigmaZ(self): return _pyossim.ossimDatum_sigmaZ(self)
    def westLongitude(self): return _pyossim.ossimDatum_westLongitude(self)
    def eastLongitude(self): return _pyossim.ossimDatum_eastLongitude(self)
    def southLatitude(self): return _pyossim.ossimDatum_southLatitude(self)
    def northLatitude(self): return _pyossim.ossimDatum_northLatitude(self)
    def param1(self): return _pyossim.ossimDatum_param1(self)
    def param2(self): return _pyossim.ossimDatum_param2(self)
    def param3(self): return _pyossim.ossimDatum_param3(self)
    def param4(self): return _pyossim.ossimDatum_param4(self)
    def param5(self): return _pyossim.ossimDatum_param5(self)
    def param6(self): return _pyossim.ossimDatum_param6(self)
    def param7(self): return _pyossim.ossimDatum_param7(self)
    def isInside(self, *args): return _pyossim.ossimDatum_isInside(self, *args)
    def __eq__(self, *args): return _pyossim.ossimDatum___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDatum___ne__(self, *args)
ossimDatum_swigregister = _pyossim.ossimDatum_swigregister
ossimDatum_swigregister(ossimDatum)

class ossimDirectoryData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDirectoryData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDirectoryData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDirectoryData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDirectoryData
    __del__ = lambda self : None;
    def isOk(self): return _pyossim.ossimDirectoryData_isOk(self)
    def setFlags(self, *args): return _pyossim.ossimDirectoryData_setFlags(self, *args)
    def getFlags(self): return _pyossim.ossimDirectoryData_getFlags(self)
    def rewind(self): return _pyossim.ossimDirectoryData_rewind(self)
    def read(self, *args): return _pyossim.ossimDirectoryData_read(self, *args)
ossimDirectoryData_swigregister = _pyossim.ossimDirectoryData_swigregister
ossimDirectoryData_swigregister(ossimDirectoryData)

class ossimDirectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDirectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDirectory, name)
    __repr__ = _swig_repr
    OSSIM_DIR_FILES = _pyossim.ossimDirectory_OSSIM_DIR_FILES
    OSSIM_DIR_DIRS = _pyossim.ossimDirectory_OSSIM_DIR_DIRS
    OSSIM_DIR_HIDDEN = _pyossim.ossimDirectory_OSSIM_DIR_HIDDEN
    OSSIM_DIR_DOTDOT = _pyossim.ossimDirectory_OSSIM_DIR_DOTDOT
    OSSIM_DIR_DEFAULT = _pyossim.ossimDirectory_OSSIM_DIR_DEFAULT
    def __init__(self, *args): 
        this = _pyossim.new_ossimDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDirectory
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimDirectory_open(self, *args)
    def isOpened(self): return _pyossim.ossimDirectory_isOpened(self)
    def getFirst(self, *args): return _pyossim.ossimDirectory_getFirst(self, *args)
    def getNext(self, *args): return _pyossim.ossimDirectory_getNext(self, *args)
    def findAllFilesThatMatch(self, *args): return _pyossim.ossimDirectory_findAllFilesThatMatch(self, *args)
    def findCaseInsensitiveEquivalents(self, *args): return _pyossim.ossimDirectory_findCaseInsensitiveEquivalents(self, *args)
ossimDirectory_swigregister = _pyossim.ossimDirectory_swigregister
ossimDirectory_swigregister(ossimDirectory)

class ossimDpt3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __cmp__(self, *args): return _pyossim.ossimDpt3d___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt3d___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt3d_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt3d_hasNans(self)
    def length(self): return _pyossim.ossimDpt3d_length(self)
    def length2(self): return _pyossim.ossimDpt3d_length2(self)
    def __add__(self, *args): return _pyossim.ossimDpt3d___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt3d___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt3d___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt3d___isub__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt3d___div__(self, *args)
    def __idiv__(self, *args): return _pyossim.ossimDpt3d___idiv__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimDpt3d___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt3d___mul__(self, *args)
    def __xor__(self, *args): return _pyossim.ossimDpt3d___xor__(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt3d_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt3d_toPoint(self, *args)
    __swig_setmethods__["x"] = _pyossim.ossimDpt3d_x_set
    __swig_getmethods__["x"] = _pyossim.ossimDpt3d_x_get
    if _newclass:x = _swig_property(_pyossim.ossimDpt3d_x_get, _pyossim.ossimDpt3d_x_set)
    __swig_setmethods__["y"] = _pyossim.ossimDpt3d_y_set
    __swig_getmethods__["y"] = _pyossim.ossimDpt3d_y_get
    if _newclass:y = _swig_property(_pyossim.ossimDpt3d_y_get, _pyossim.ossimDpt3d_y_set)
    __swig_setmethods__["z"] = _pyossim.ossimDpt3d_z_set
    __swig_getmethods__["z"] = _pyossim.ossimDpt3d_z_get
    if _newclass:z = _swig_property(_pyossim.ossimDpt3d_z_get, _pyossim.ossimDpt3d_z_set)
    __swig_destroy__ = _pyossim.delete_ossimDpt3d
    __del__ = lambda self : None;
ossimDpt3d_swigregister = _pyossim.ossimDpt3d_swigregister
ossimDpt3d_swigregister(ossimDpt3d)

class ossimDpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimDpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimDpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt_hasNans(self)
    def isNan(self): return _pyossim.ossimDpt_isNan(self)
    def length(self): return _pyossim.ossimDpt_length(self)
    def __add__(self, *args): return _pyossim.ossimDpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt___div__(self, *args)
    def ossimDpt_print(self, *args): return _pyossim.ossimDpt_ossimDpt_print(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt_toPoint(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimDpt
    __del__ = lambda self : None;
ossimDpt_swigregister = _pyossim.ossimDpt_swigregister
ossimDpt_swigregister(ossimDpt)

class ossimEbcdicToAscii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEbcdicToAscii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEbcdicToAscii, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimEbcdicToAscii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimEbcdicToAscii
    __del__ = lambda self : None;
    def asciiToEbcdic(self, *args): return _pyossim.ossimEbcdicToAscii_asciiToEbcdic(self, *args)
    def ebcdicToAscii(self, *args): return _pyossim.ossimEbcdicToAscii_ebcdicToAscii(self, *args)
ossimEbcdicToAscii_swigregister = _pyossim.ossimEbcdicToAscii_swigregister
ossimEbcdicToAscii_swigregister(ossimEbcdicToAscii)

class ossimEcefPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEcefPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEcefPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEcefPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeNan(self): return _pyossim.ossimEcefPoint_makeNan(self)
    def hasNans(self): return _pyossim.ossimEcefPoint_hasNans(self)
    def isNan(self): return _pyossim.ossimEcefPoint_isNan(self)
    def __add__(self, *args): return _pyossim.ossimEcefPoint___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimEcefPoint___sub__(self, *args)
    def __set__(self, *args): return _pyossim.ossimEcefPoint___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEcefPoint___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEcefPoint___ne__(self, *args)
    def x(self, *args): return _pyossim.ossimEcefPoint_x(self, *args)
    def y(self, *args): return _pyossim.ossimEcefPoint_y(self, *args)
    def z(self, *args): return _pyossim.ossimEcefPoint_z(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimEcefPoint___getitem__(self, *args)
    def data(self, *args): return _pyossim.ossimEcefPoint_data(self, *args)
    def getMagnitude(self): return _pyossim.ossimEcefPoint_getMagnitude(self)
    def magnitude(self): return _pyossim.ossimEcefPoint_magnitude(self)
    def length(self): return _pyossim.ossimEcefPoint_length(self)
    def normalize(self): return _pyossim.ossimEcefPoint_normalize(self)
    def toString(self, precision = 15): return _pyossim.ossimEcefPoint_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimEcefPoint_toPoint(self, *args)
    def ossimEcefPoint_print(self, *args): return _pyossim.ossimEcefPoint_ossimEcefPoint_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEcefPoint
    __del__ = lambda self : None;
ossimEcefPoint_swigregister = _pyossim.ossimEcefPoint_swigregister
ossimEcefPoint_swigregister(ossimEcefPoint)

class ossimEcefVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEcefVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEcefVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEcefVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeNan(self): return _pyossim.ossimEcefVector_makeNan(self)
    def hasNans(self): return _pyossim.ossimEcefVector_hasNans(self)
    def isNan(self): return _pyossim.ossimEcefVector_isNan(self)
    def __sub__(self, *args): return _pyossim.ossimEcefVector___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimEcefVector___add__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimEcefVector___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimEcefVector___div__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEcefVector___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEcefVector___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimEcefVector___set__(self, *args)
    def dot(self, *args): return _pyossim.ossimEcefVector_dot(self, *args)
    def angleTo(self, *args): return _pyossim.ossimEcefVector_angleTo(self, *args)
    def cross(self, *args): return _pyossim.ossimEcefVector_cross(self, *args)
    def unitVector(self): return _pyossim.ossimEcefVector_unitVector(self)
    def magnitude(self): return _pyossim.ossimEcefVector_magnitude(self)
    def norm2(self): return _pyossim.ossimEcefVector_norm2(self)
    def length(self): return _pyossim.ossimEcefVector_length(self)
    def normalize(self): return _pyossim.ossimEcefVector_normalize(self)
    def x(self, *args): return _pyossim.ossimEcefVector_x(self, *args)
    def y(self, *args): return _pyossim.ossimEcefVector_y(self, *args)
    def z(self, *args): return _pyossim.ossimEcefVector_z(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimEcefVector___getitem__(self, *args)
    def data(self, *args): return _pyossim.ossimEcefVector_data(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimEcefVector_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimEcefVector_toPoint(self, *args)
    def ossimEcefVector_print(self, *args): return _pyossim.ossimEcefVector_ossimEcefVector_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEcefVector
    __del__ = lambda self : None;
ossimEcefVector_swigregister = _pyossim.ossimEcefVector_swigregister
ossimEcefVector_swigregister(ossimEcefVector)

class ossimEllipsoidFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEllipsoidFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEllipsoidFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimEllipsoidFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimEllipsoidFactory_create(self, *args)
    def wgs84(self): return _pyossim.ossimEllipsoidFactory_wgs84(self)
    def wgs72(self): return _pyossim.ossimEllipsoidFactory_wgs72(self)
    def findEpsgCode(self, *args): return _pyossim.ossimEllipsoidFactory_findEpsgCode(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEllipsoidFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEllipsoidFactory_instance)
ossimEllipsoidFactory_swigregister = _pyossim.ossimEllipsoidFactory_swigregister
ossimEllipsoidFactory_swigregister(ossimEllipsoidFactory)

def ossimEllipsoidFactory_instance():
  return _pyossim.ossimEllipsoidFactory_instance()
ossimEllipsoidFactory_instance = _pyossim.ossimEllipsoidFactory_instance

class ossimEllipsoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEllipsoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEllipsoid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimEllipsoid
    __del__ = lambda self : None;
    def name(self): return _pyossim.ossimEllipsoid_name(self)
    def code(self): return _pyossim.ossimEllipsoid_code(self)
    def a(self): return _pyossim.ossimEllipsoid_a(self)
    def b(self): return _pyossim.ossimEllipsoid_b(self)
    def getA(self): return _pyossim.ossimEllipsoid_getA(self)
    def getB(self): return _pyossim.ossimEllipsoid_getB(self)
    def getFlattening(self): return _pyossim.ossimEllipsoid_getFlattening(self)
    def setA(self, *args): return _pyossim.ossimEllipsoid_setA(self, *args)
    def setB(self, *args): return _pyossim.ossimEllipsoid_setB(self, *args)
    def setAB(self, *args): return _pyossim.ossimEllipsoid_setAB(self, *args)
    def setEpsgCode(self, *args): return _pyossim.ossimEllipsoid_setEpsgCode(self, *args)
    def eccentricitySquared(self): return _pyossim.ossimEllipsoid_eccentricitySquared(self)
    def flattening(self): return _pyossim.ossimEllipsoid_flattening(self)
    def eccentricity(self): return _pyossim.ossimEllipsoid_eccentricity(self)
    def getEpsgCode(self): return _pyossim.ossimEllipsoid_getEpsgCode(self)
    def nearestIntersection(self, *args): return _pyossim.ossimEllipsoid_nearestIntersection(self, *args)
    def evaluate(self, *args): return _pyossim.ossimEllipsoid_evaluate(self, *args)
    def gradient(self, *args): return _pyossim.ossimEllipsoid_gradient(self, *args)
    def prinRadiiOfCurv(self, *args): return _pyossim.ossimEllipsoid_prinRadiiOfCurv(self, *args)
    def jacobianWrtEcef(self, *args): return _pyossim.ossimEllipsoid_jacobianWrtEcef(self, *args)
    def jacobianWrtGeo(self, *args): return _pyossim.ossimEllipsoid_jacobianWrtGeo(self, *args)
    def geodeticRadius(self, *args): return _pyossim.ossimEllipsoid_geodeticRadius(self, *args)
    def geodeticRadii(self, *args): return _pyossim.ossimEllipsoid_geodeticRadii(self, *args)
    def latLonHeightToXYZ(self, *args): return _pyossim.ossimEllipsoid_latLonHeightToXYZ(self, *args)
    def XYZToLatLonHeight(self, *args): return _pyossim.ossimEllipsoid_XYZToLatLonHeight(self, *args)
    def computeLocalToWorldTransformFromXYZ(self, *args): return _pyossim.ossimEllipsoid_computeLocalToWorldTransformFromXYZ(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEllipsoid___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEllipsoid___ne__(self, *args)
    def loadState(self, *args): return _pyossim.ossimEllipsoid_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimEllipsoid_saveState(self, *args)
    def __set__(self, *args): return _pyossim.ossimEllipsoid___set__(self, *args)
ossimEllipsoid_swigregister = _pyossim.ossimEllipsoid_swigregister
ossimEllipsoid_swigregister(ossimEllipsoid)

class ossimEnvironmentUtility(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEnvironmentUtility, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEnvironmentUtility, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEnvironmentUtility_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEnvironmentUtility_instance)
    def getEnvironmentVariable(self, *args): return _pyossim.ossimEnvironmentUtility_getEnvironmentVariable(self, *args)
    def getUserDir(self): return _pyossim.ossimEnvironmentUtility_getUserDir(self)
    def getUserName(self): return _pyossim.ossimEnvironmentUtility_getUserName(self)
    def getUserOssimSupportDir(self): return _pyossim.ossimEnvironmentUtility_getUserOssimSupportDir(self)
    def getUserOssimPreferences(self): return _pyossim.ossimEnvironmentUtility_getUserOssimPreferences(self)
    def getUserOssimPluginDir(self): return _pyossim.ossimEnvironmentUtility_getUserOssimPluginDir(self)
    def getInstalledOssimSupportDir(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimSupportDir(self)
    def getInstalledOssimPluginDir(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimPluginDir(self)
    def getInstalledOssimPreferences(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimPreferences(self)
    def getCurrentWorkingDir(self): return _pyossim.ossimEnvironmentUtility_getCurrentWorkingDir(self)
    def searchAllPaths(self, *args): return _pyossim.ossimEnvironmentUtility_searchAllPaths(self, *args)
    def findPlugin(self, *args): return _pyossim.ossimEnvironmentUtility_findPlugin(self, *args)
    def findData(self, *args): return _pyossim.ossimEnvironmentUtility_findData(self, *args)
    def addDataSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_addDataSearchPath(self, *args)
    def addDataSearchPathToFront(self, *args): return _pyossim.ossimEnvironmentUtility_addDataSearchPathToFront(self, *args)
    def addPluginSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_addPluginSearchPath(self, *args)
    def addPluginSearchPathToFront(self, *args): return _pyossim.ossimEnvironmentUtility_addPluginSearchPathToFront(self, *args)
    def getPluginSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_getPluginSearchPath(self, *args)
    def getDataSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_getDataSearchPath(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEnvironmentUtility
    __del__ = lambda self : None;
ossimEnvironmentUtility_swigregister = _pyossim.ossimEnvironmentUtility_swigregister
ossimEnvironmentUtility_swigregister(ossimEnvironmentUtility)

def ossimEnvironmentUtility_instance():
  return _pyossim.ossimEnvironmentUtility_instance()
ossimEnvironmentUtility_instance = _pyossim.ossimEnvironmentUtility_instance

ossimEpsgDatumFactory_HEADER = _pyossim.ossimEpsgDatumFactory_HEADER
class ossimEpsgDatumFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEpsgDatumFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEpsgDatumFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEpsgDatumFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEpsgDatumFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimEpsgDatumFactory
    __del__ = lambda self : None;
    def getList(self, *args): return _pyossim.ossimEpsgDatumFactory_getList(self, *args)
    def create(self, *args): return _pyossim.ossimEpsgDatumFactory_create(self, *args)
    def findEpsgCode(self, *args): return _pyossim.ossimEpsgDatumFactory_findEpsgCode(self, *args)
    def findAlphaCode(self, *args): return _pyossim.ossimEpsgDatumFactory_findAlphaCode(self, *args)
ossimEpsgDatumFactory_swigregister = _pyossim.ossimEpsgDatumFactory_swigregister
ossimEpsgDatumFactory_swigregister(ossimEpsgDatumFactory)

def ossimEpsgDatumFactory_instance():
  return _pyossim.ossimEpsgDatumFactory_instance()
ossimEpsgDatumFactory_instance = _pyossim.ossimEpsgDatumFactory_instance

class ossimErrorCodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimErrorCodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimErrorCodes, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimErrorCodes
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimErrorCodes_instance
    if _newclass:instance = staticmethod(_pyossim.ossimErrorCodes_instance)
    def getErrorCode(self, *args): return _pyossim.ossimErrorCodes_getErrorCode(self, *args)
    def getErrorString(self, *args): return _pyossim.ossimErrorCodes_getErrorString(self, *args)
ossimErrorCodes_swigregister = _pyossim.ossimErrorCodes_swigregister
ossimErrorCodes_swigregister(ossimErrorCodes)

def ossimErrorCodes_instance():
  return _pyossim.ossimErrorCodes_instance()
ossimErrorCodes_instance = _pyossim.ossimErrorCodes_instance
ossimErrorCodes.OSSIM_OK = _pyossim.cvar.ossimErrorCodes_OSSIM_OK
ossimErrorCodes.OSSIM_NO_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_NO_ERROR
ossimErrorCodes.OSSIM_WARNING = _pyossim.cvar.ossimErrorCodes_OSSIM_WARNING
ossimErrorCodes.OSSIM_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR
ossimErrorCodes.OSSIM_ERROR_STD_PARALLEL_1 = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1
ossimErrorCodes.OSSIM_LAT_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_LAT_ERROR
ossimErrorCodes.OSSIM_LON_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_LON_ERROR
ossimErrorCodes.OSSIM_NORTHING_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_NORTHING_ERROR
ossimErrorCodes.OSSIM_ORIGIN_LAT_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR
ossimErrorCodes.OSSIM_CENT_MER_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_CENT_MER_ERROR
ossimErrorCodes.OSSIM_A_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_A_ERROR
ossimErrorCodes.OSSIM_B_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_B_ERROR
ossimErrorCodes.OSSIM_A_LESS_B_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_A_LESS_B_ERROR
ossimErrorCodes.OSSIM_FIRST_STDP_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_FIRST_STDP_ERROR
ossimErrorCodes.OSSIM_SEC_STDP_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_SEC_STDP_ERROR
ossimErrorCodes.OSSIM_FIRST_SECOND_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR
ossimErrorCodes.OSSIM_HEMISPHERE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_HEMISPHERE_ERROR
ossimErrorCodes.OSSIM_EASTING_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_EASTING_ERROR
ossimErrorCodes.OSSIM_RADIUS_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_RADIUS_ERROR
ossimErrorCodes.OSSIM_ORIGIN_LON_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR
ossimErrorCodes.OSSIM_ORIENTATION_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIENTATION_ERROR
ossimErrorCodes.OSSIM_SCALE_FACTOR_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR
ossimErrorCodes.OSSIM_ZONE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ZONE_ERROR
ossimErrorCodes.OSSIM_ZONE_OVERRIDE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR
ossimErrorCodes.OSSIM_INVALID_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_INVALID_FILE_ERROR
ossimErrorCodes.OSSIM_OPEN_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_OPEN_FILE_ERROR
ossimErrorCodes.OSSIM_WRITE_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_WRITE_FILE_ERROR
ossimErrorCodes.OSSIM_ERROR_UNKNOWN = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR_UNKNOWN

class ossimException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimException
    __del__ = lambda self : None;
    def what(self): return _pyossim.ossimException_what(self)
ossimException_swigregister = _pyossim.ossimException_swigregister
ossimException_swigregister(ossimException)

class ossimFilename(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilename, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilename, name)
    __repr__ = _swig_repr
    OSSIM_READ_WRITE = _pyossim.ossimFilename_OSSIM_READ_WRITE
    OSSIM_READ = _pyossim.ossimFilename_OSSIM_READ
    OSSIM_WRITE = _pyossim.ossimFilename_OSSIM_WRITE
    OSSIM_EXE = _pyossim.ossimFilename_OSSIM_EXE
    OSSIM_EXIST = _pyossim.ossimFilename_OSSIM_EXIST
    def __init__(self, *args): 
        this = _pyossim.new_ossimFilename(*args)
        try: self.this.append(this)
        except: self.this = this
    def __cmp__(self, *args): return _pyossim.ossimFilename___cmp__(self, *args)
    def convertBackToForwardSlashes(self): return _pyossim.ossimFilename_convertBackToForwardSlashes(self)
    def convertForwardToBackSlashes(self): return _pyossim.ossimFilename_convertForwardToBackSlashes(self)
    def setTimes(self, *args): return _pyossim.ossimFilename_setTimes(self, *args)
    def getTimes(self, *args): return _pyossim.ossimFilename_getTimes(self, *args)
    def touch(self): return _pyossim.ossimFilename_touch(self)
    def expand(self): return _pyossim.ossimFilename_expand(self)
    def exists(self): return _pyossim.ossimFilename_exists(self)
    def isFile(self): return _pyossim.ossimFilename_isFile(self)
    def isDir(self): return _pyossim.ossimFilename_isDir(self)
    def isReadable(self): return _pyossim.ossimFilename_isReadable(self)
    def isWriteable(self): return _pyossim.ossimFilename_isWriteable(self)
    def isExecutable(self): return _pyossim.ossimFilename_isExecutable(self)
    def fileSize(self): return _pyossim.ossimFilename_fileSize(self)
    def ext(self): return _pyossim.ossimFilename_ext(self)
    def path(self): return _pyossim.ossimFilename_path(self)
    def drive(self): return _pyossim.ossimFilename_drive(self)
    def file(self): return _pyossim.ossimFilename_file(self)
    def fileNoExtension(self): return _pyossim.ossimFilename_fileNoExtension(self)
    def noExtension(self): return _pyossim.ossimFilename_noExtension(self)
    def setExtension(self, *args): return _pyossim.ossimFilename_setExtension(self, *args)
    def setDrive(self, *args): return _pyossim.ossimFilename_setDrive(self, *args)
    def setPath(self, *args): return _pyossim.ossimFilename_setPath(self, *args)
    def setFile(self, *args): return _pyossim.ossimFilename_setFile(self, *args)
    def split(self, *args): return _pyossim.ossimFilename_split(self, *args)
    def merge(self, *args): return _pyossim.ossimFilename_merge(self, *args)
    def dirCat(self, *args): return _pyossim.ossimFilename_dirCat(self, *args)
    def createDirectory(self, recurseFlag = True, perm = 0775): return _pyossim.ossimFilename_createDirectory(self, recurseFlag, perm)
    def rename(self, *args): return _pyossim.ossimFilename_rename(self, *args)
    def remove(self, *args): return _pyossim.ossimFilename_remove(self, *args)
    def wildcardRemove(self, *args): return _pyossim.ossimFilename_wildcardRemove(self, *args)
    def copyFileTo(self, *args): return _pyossim.ossimFilename_copyFileTo(self, *args)
    def isRelative(self): return _pyossim.ossimFilename_isRelative(self)
    def needsExpansion(self): return _pyossim.ossimFilename_needsExpansion(self)
    def getPathSeparator(self): return _pyossim.ossimFilename_getPathSeparator(self)
    __swig_destroy__ = _pyossim.delete_ossimFilename
    __del__ = lambda self : None;
ossimFilename_swigregister = _pyossim.ossimFilename_swigregister
ossimFilename_swigregister(ossimFilename)
ossimFilename.NIL = _pyossim.cvar.ossimFilename_NIL

class ossimFontInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFontInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFontInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimFontInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def isFixed(self): return _pyossim.ossimFontInformation_isFixed(self)
    def saveState(self, *args): return _pyossim.ossimFontInformation_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimFontInformation_loadState(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimFontInformation___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimFontInformation___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimFontInformation___set__(self, *args)
    __swig_setmethods__["FAMILY_NAME_KW"] = _pyossim.ossimFontInformation_FAMILY_NAME_KW_set
    __swig_getmethods__["FAMILY_NAME_KW"] = _pyossim.ossimFontInformation_FAMILY_NAME_KW_get
    if _newclass:FAMILY_NAME_KW = _swig_property(_pyossim.ossimFontInformation_FAMILY_NAME_KW_get, _pyossim.ossimFontInformation_FAMILY_NAME_KW_set)
    __swig_setmethods__["STYLE_NAME_KW"] = _pyossim.ossimFontInformation_STYLE_NAME_KW_set
    __swig_getmethods__["STYLE_NAME_KW"] = _pyossim.ossimFontInformation_STYLE_NAME_KW_get
    if _newclass:STYLE_NAME_KW = _swig_property(_pyossim.ossimFontInformation_STYLE_NAME_KW_get, _pyossim.ossimFontInformation_STYLE_NAME_KW_set)
    __swig_setmethods__["POINT_SIZE_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_KW_set
    __swig_getmethods__["POINT_SIZE_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_KW_get
    if _newclass:POINT_SIZE_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_KW_set)
    __swig_setmethods__["POINT_SIZE_X_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_X_KW_set
    __swig_getmethods__["POINT_SIZE_X_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_X_KW_get
    if _newclass:POINT_SIZE_X_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_X_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_X_KW_set)
    __swig_setmethods__["POINT_SIZE_Y_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_set
    __swig_getmethods__["POINT_SIZE_Y_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_get
    if _newclass:POINT_SIZE_Y_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_Y_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_set)
    __swig_setmethods__["FIXED_FLAG_KW"] = _pyossim.ossimFontInformation_FIXED_FLAG_KW_set
    __swig_getmethods__["FIXED_FLAG_KW"] = _pyossim.ossimFontInformation_FIXED_FLAG_KW_get
    if _newclass:FIXED_FLAG_KW = _swig_property(_pyossim.ossimFontInformation_FIXED_FLAG_KW_get, _pyossim.ossimFontInformation_FIXED_FLAG_KW_set)
    __swig_setmethods__["SHEAR_KW"] = _pyossim.ossimFontInformation_SHEAR_KW_set
    __swig_getmethods__["SHEAR_KW"] = _pyossim.ossimFontInformation_SHEAR_KW_get
    if _newclass:SHEAR_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_KW_get, _pyossim.ossimFontInformation_SHEAR_KW_set)
    __swig_setmethods__["SHEAR_X_KW"] = _pyossim.ossimFontInformation_SHEAR_X_KW_set
    __swig_getmethods__["SHEAR_X_KW"] = _pyossim.ossimFontInformation_SHEAR_X_KW_get
    if _newclass:SHEAR_X_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_X_KW_get, _pyossim.ossimFontInformation_SHEAR_X_KW_set)
    __swig_setmethods__["SHEAR_Y_KW"] = _pyossim.ossimFontInformation_SHEAR_Y_KW_set
    __swig_getmethods__["SHEAR_Y_KW"] = _pyossim.ossimFontInformation_SHEAR_Y_KW_get
    if _newclass:SHEAR_Y_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_Y_KW_get, _pyossim.ossimFontInformation_SHEAR_Y_KW_set)
    __swig_setmethods__["SCALE_KW"] = _pyossim.ossimFontInformation_SCALE_KW_set
    __swig_getmethods__["SCALE_KW"] = _pyossim.ossimFontInformation_SCALE_KW_get
    if _newclass:SCALE_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_KW_get, _pyossim.ossimFontInformation_SCALE_KW_set)
    __swig_setmethods__["SCALE_X_KW"] = _pyossim.ossimFontInformation_SCALE_X_KW_set
    __swig_getmethods__["SCALE_X_KW"] = _pyossim.ossimFontInformation_SCALE_X_KW_get
    if _newclass:SCALE_X_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_X_KW_get, _pyossim.ossimFontInformation_SCALE_X_KW_set)
    __swig_setmethods__["SCALE_Y_KW"] = _pyossim.ossimFontInformation_SCALE_Y_KW_set
    __swig_getmethods__["SCALE_Y_KW"] = _pyossim.ossimFontInformation_SCALE_Y_KW_get
    if _newclass:SCALE_Y_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_Y_KW_get, _pyossim.ossimFontInformation_SCALE_Y_KW_set)
    __swig_setmethods__["ROTATION_KW"] = _pyossim.ossimFontInformation_ROTATION_KW_set
    __swig_getmethods__["ROTATION_KW"] = _pyossim.ossimFontInformation_ROTATION_KW_get
    if _newclass:ROTATION_KW = _swig_property(_pyossim.ossimFontInformation_ROTATION_KW_get, _pyossim.ossimFontInformation_ROTATION_KW_set)
    __swig_setmethods__["theFamilyName"] = _pyossim.ossimFontInformation_theFamilyName_set
    __swig_getmethods__["theFamilyName"] = _pyossim.ossimFontInformation_theFamilyName_get
    if _newclass:theFamilyName = _swig_property(_pyossim.ossimFontInformation_theFamilyName_get, _pyossim.ossimFontInformation_theFamilyName_set)
    __swig_setmethods__["theStyleName"] = _pyossim.ossimFontInformation_theStyleName_set
    __swig_getmethods__["theStyleName"] = _pyossim.ossimFontInformation_theStyleName_get
    if _newclass:theStyleName = _swig_property(_pyossim.ossimFontInformation_theStyleName_get, _pyossim.ossimFontInformation_theStyleName_set)
    __swig_setmethods__["thePointSize"] = _pyossim.ossimFontInformation_thePointSize_set
    __swig_getmethods__["thePointSize"] = _pyossim.ossimFontInformation_thePointSize_get
    if _newclass:thePointSize = _swig_property(_pyossim.ossimFontInformation_thePointSize_get, _pyossim.ossimFontInformation_thePointSize_set)
    __swig_setmethods__["theFixedFlag"] = _pyossim.ossimFontInformation_theFixedFlag_set
    __swig_getmethods__["theFixedFlag"] = _pyossim.ossimFontInformation_theFixedFlag_get
    if _newclass:theFixedFlag = _swig_property(_pyossim.ossimFontInformation_theFixedFlag_get, _pyossim.ossimFontInformation_theFixedFlag_set)
    __swig_setmethods__["theScale"] = _pyossim.ossimFontInformation_theScale_set
    __swig_getmethods__["theScale"] = _pyossim.ossimFontInformation_theScale_get
    if _newclass:theScale = _swig_property(_pyossim.ossimFontInformation_theScale_get, _pyossim.ossimFontInformation_theScale_set)
    __swig_setmethods__["theRotation"] = _pyossim.ossimFontInformation_theRotation_set
    __swig_getmethods__["theRotation"] = _pyossim.ossimFontInformation_theRotation_get
    if _newclass:theRotation = _swig_property(_pyossim.ossimFontInformation_theRotation_get, _pyossim.ossimFontInformation_theRotation_set)
    __swig_setmethods__["theShear"] = _pyossim.ossimFontInformation_theShear_set
    __swig_getmethods__["theShear"] = _pyossim.ossimFontInformation_theShear_get
    if _newclass:theShear = _swig_property(_pyossim.ossimFontInformation_theShear_get, _pyossim.ossimFontInformation_theShear_set)
    __swig_destroy__ = _pyossim.delete_ossimFontInformation
    __del__ = lambda self : None;
ossimFontInformation_swigregister = _pyossim.ossimFontInformation_swigregister
ossimFontInformation_swigregister(ossimFontInformation)

GEOCENT_NO_ERROR = _pyossim.GEOCENT_NO_ERROR
GEOCENT_LAT_ERROR = _pyossim.GEOCENT_LAT_ERROR
GEOCENT_LON_ERROR = _pyossim.GEOCENT_LON_ERROR
GEOCENT_A_ERROR = _pyossim.GEOCENT_A_ERROR
GEOCENT_INV_F_ERROR = _pyossim.GEOCENT_INV_F_ERROR

def Set_Geocentric_Parameters(*args):
  return _pyossim.Set_Geocentric_Parameters(*args)
Set_Geocentric_Parameters = _pyossim.Set_Geocentric_Parameters

def Get_Geocentric_Parameters(*args):
  return _pyossim.Get_Geocentric_Parameters(*args)
Get_Geocentric_Parameters = _pyossim.Get_Geocentric_Parameters

def Convert_Geodetic_To_Geocentric(*args):
  return _pyossim.Convert_Geodetic_To_Geocentric(*args)
Convert_Geodetic_To_Geocentric = _pyossim.Convert_Geodetic_To_Geocentric

def Convert_Geocentric_To_Geodetic(*args):
  return _pyossim.Convert_Geocentric_To_Geodetic(*args)
Convert_Geocentric_To_Geodetic = _pyossim.Convert_Geocentric_To_Geodetic
class ossimGeoidNgsHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoidNgsHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoidNgsHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoidNgsHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self, *args): return _pyossim.ossimGeoidNgsHeader_initialize(self, *args)
    def southernMostLat(self): return _pyossim.ossimGeoidNgsHeader_southernMostLat(self)
    def westernMostLon(self): return _pyossim.ossimGeoidNgsHeader_westernMostLon(self)
    def latDelta(self): return _pyossim.ossimGeoidNgsHeader_latDelta(self)
    def lonDelta(self): return _pyossim.ossimGeoidNgsHeader_lonDelta(self)
    def rows(self): return _pyossim.ossimGeoidNgsHeader_rows(self)
    def cols(self): return _pyossim.ossimGeoidNgsHeader_cols(self)
    def dataType(self): return _pyossim.ossimGeoidNgsHeader_dataType(self)
    def pointWithin(self, *args): return _pyossim.ossimGeoidNgsHeader_pointWithin(self, *args)
    def filename(self): return _pyossim.ossimGeoidNgsHeader_filename(self)
    def headerSize(self): return _pyossim.ossimGeoidNgsHeader_headerSize(self)
    def dataTypeSize(self): return _pyossim.ossimGeoidNgsHeader_dataTypeSize(self)
    def getHeightDelta(self, *args): return _pyossim.ossimGeoidNgsHeader_getHeightDelta(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoidNgsHeader
    __del__ = lambda self : None;
ossimGeoidNgsHeader_swigregister = _pyossim.ossimGeoidNgsHeader_swigregister
ossimGeoidNgsHeader_swigregister(ossimGeoidNgsHeader)

class ossimGeoPolygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoPolygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoPolygon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoPolygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPoint(self, *args): return _pyossim.ossimGeoPolygon_addPoint(self, *args)
    def addAttribute(self, *args): return _pyossim.ossimGeoPolygon_addAttribute(self, *args)
    def addHole(self, *args): return _pyossim.ossimGeoPolygon_addHole(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimGeoPolygon___getitem__(self, *args)
    def getVertexList(self): return _pyossim.ossimGeoPolygon_getVertexList(self)
    def getAttributeList(self): return _pyossim.ossimGeoPolygon_getAttributeList(self)
    def getHoleList(self): return _pyossim.ossimGeoPolygon_getHoleList(self)
    def clear(self): return _pyossim.ossimGeoPolygon_clear(self)
    def size(self): return _pyossim.ossimGeoPolygon_size(self)
    def resize(self, *args): return _pyossim.ossimGeoPolygon_resize(self, *args)
    def __set__(self, *args): return _pyossim.ossimGeoPolygon___set__(self, *args)
    def stretchOut(self, *args): return _pyossim.ossimGeoPolygon_stretchOut(self, *args)
    def area(self): return _pyossim.ossimGeoPolygon_area(self)
    def computeCentroid(self): return _pyossim.ossimGeoPolygon_computeCentroid(self)
    def vertex(self, *args): return _pyossim.ossimGeoPolygon_vertex(self, *args)
    def nextVertex(self, *args): return _pyossim.ossimGeoPolygon_nextVertex(self, *args)
    def hasNans(self): return _pyossim.ossimGeoPolygon_hasNans(self)
    def reverseOrder(self): return _pyossim.ossimGeoPolygon_reverseOrder(self)
    def saveState(self, *args): return _pyossim.ossimGeoPolygon_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeoPolygon_loadState(self, *args)
    def checkOrdering(self): return _pyossim.ossimGeoPolygon_checkOrdering(self)
    def getOrdering(self): return _pyossim.ossimGeoPolygon_getOrdering(self)
    def setOrdering(self, *args): return _pyossim.ossimGeoPolygon_setOrdering(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoPolygon
    __del__ = lambda self : None;
ossimGeoPolygon_swigregister = _pyossim.ossimGeoPolygon_swigregister
ossimGeoPolygon_swigregister(ossimGeoPolygon)

class ossimGeoref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoref(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self, *args): return _pyossim.ossimGeoref_toString(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoref
    __del__ = lambda self : None;
ossimGeoref_swigregister = _pyossim.ossimGeoref_swigregister
ossimGeoref_swigregister(ossimGeoref)

class ossimGeoTiffCoordTransformsLut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoTiffCoordTransformsLut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoTiffCoordTransformsLut, name)
    __repr__ = _swig_repr
    CT_TransverseMercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransverseMercator
    CT_TransvMercator_Modified_Alaska = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransvMercator_Modified_Alaska
    CT_ObliqueMercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator
    CT_ObliqueMercator_Laborde = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Laborde
    CT_ObliqueMercator_Rosenmund = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Rosenmund
    CT_ObliqueMercator_Spherical = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Spherical
    CT_Mercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Mercator
    CT_LambertConfConic_2SP = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_2SP
    CT_LambertConfConic_Helmert = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_Helmert
    CT_LambertAzimEqualArea = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertAzimEqualArea
    CT_AlbersEqualArea = _pyossim.ossimGeoTiffCoordTransformsLut_CT_AlbersEqualArea
    CT_AzimuthalEquidistant = _pyossim.ossimGeoTiffCoordTransformsLut_CT_AzimuthalEquidistant
    CT_EquidistantConic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_EquidistantConic
    CT_Stereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Stereographic
    CT_PolarStereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_PolarStereographic
    CT_ObliqueStereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueStereographic
    CT_Equirectangular = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Equirectangular
    CT_CassiniSoldner = _pyossim.ossimGeoTiffCoordTransformsLut_CT_CassiniSoldner
    CT_Gnomonic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Gnomonic
    CT_MillerCylindrical = _pyossim.ossimGeoTiffCoordTransformsLut_CT_MillerCylindrical
    CT_Orthographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Orthographic
    CT_Polyconic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Polyconic
    CT_Robinson = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Robinson
    CT_Sinusoidal = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Sinusoidal
    CT_VanDerGrinten = _pyossim.ossimGeoTiffCoordTransformsLut_CT_VanDerGrinten
    CT_NewZealandMapGrid = _pyossim.ossimGeoTiffCoordTransformsLut_CT_NewZealandMapGrid
    CT_TransvMercator_SouthOriented = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransvMercator_SouthOriented
    def __init__(self): 
        this = _pyossim.new_ossimGeoTiffCoordTransformsLut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoTiffCoordTransformsLut
    __del__ = lambda self : None;
    def getKeyword(self): return _pyossim.ossimGeoTiffCoordTransformsLut_getKeyword(self)
ossimGeoTiffCoordTransformsLut_swigregister = _pyossim.ossimGeoTiffCoordTransformsLut_swigregister
ossimGeoTiffCoordTransformsLut_swigregister(ossimGeoTiffCoordTransformsLut)

class ossimGeoTiffDatumLut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoTiffDatumLut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoTiffDatumLut, name)
    __repr__ = _swig_repr
    GCS_Adindan = _pyossim.ossimGeoTiffDatumLut_GCS_Adindan
    GCS_Arc_1950 = _pyossim.ossimGeoTiffDatumLut_GCS_Arc_1950
    GCS_Arc_1960 = _pyossim.ossimGeoTiffDatumLut_GCS_Arc_1960
    GCS_ED50 = _pyossim.ossimGeoTiffDatumLut_GCS_ED50
    GCS_NAD27 = _pyossim.ossimGeoTiffDatumLut_GCS_NAD27
    GCS_NAD83 = _pyossim.ossimGeoTiffDatumLut_GCS_NAD83
    GCS_OSGB_1936 = _pyossim.ossimGeoTiffDatumLut_GCS_OSGB_1936
    GCS_WGS_72 = _pyossim.ossimGeoTiffDatumLut_GCS_WGS_72
    GCS_WGS_84 = _pyossim.ossimGeoTiffDatumLut_GCS_WGS_84
    GCS_Tokyo = _pyossim.ossimGeoTiffDatumLut_GCS_Tokyo
    GCS_NAD83_HARN = _pyossim.ossimGeoTiffDatumLut_GCS_NAD83_HARN
    GCS_Clark_1866 = _pyossim.ossimGeoTiffDatumLut_GCS_Clark_1866
    DatumE_WGS84 = _pyossim.ossimGeoTiffDatumLut_DatumE_WGS84
    Datum_Adindan = _pyossim.ossimGeoTiffDatumLut_Datum_Adindan
    Datum_Arc_1950 = _pyossim.ossimGeoTiffDatumLut_Datum_Arc_1950
    Datum_Arc_1960 = _pyossim.ossimGeoTiffDatumLut_Datum_Arc_1960
    Datum_European_Datum_1950 = _pyossim.ossimGeoTiffDatumLut_Datum_European_Datum_1950
    Datum_North_American_Datum_1927 = _pyossim.ossimGeoTiffDatumLut_Datum_North_American_Datum_1927
    Datum_North_American_Datum_1983 = _pyossim.ossimGeoTiffDatumLut_Datum_North_American_Datum_1983
    Datum_OSGB_1936 = _pyossim.ossimGeoTiffDatumLut_Datum_OSGB_1936
    Datum_Tokyo = _pyossim.ossimGeoTiffDatumLut_Datum_Tokyo
    Datum_WGS72 = _pyossim.ossimGeoTiffDatumLut_Datum_WGS72
    Datum_WGS84 = _pyossim.ossimGeoTiffDatumLut_Datum_WGS84
    Datum_NAD83_HARN = _pyossim.ossimGeoTiffDatumLut_Datum_NAD83_HARN
    def __init__(self): 
        this = _pyossim.new_ossimGeoTiffDatumLut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoTiffDatumLut
    __del__ = lambda self : None;
    def getKeyword(self): return _pyossim.ossimGeoTiffDatumLut_getKeyword(self)
ossimGeoTiffDatumLut_swigregister = _pyossim.ossimGeoTiffDatumLut_swigregister
ossimGeoTiffDatumLut_swigregister(ossimGeoTiffDatumLut)

class ossimIpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimIpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimIpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimIpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimIpt_hasNans(self)
    def isNan(self): return _pyossim.ossimIpt_isNan(self)
    def ossimIpt_print(self, *args): return _pyossim.ossimIpt_ossimIpt_print(self, *args)
    def toString(self): return _pyossim.ossimIpt_toString(self)
    def toPoint(self, *args): return _pyossim.ossimIpt_toPoint(self, *args)
    def length(self): return _pyossim.ossimIpt_length(self)
    def __add__(self, *args): return _pyossim.ossimIpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimIpt___div__(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimIpt
    __del__ = lambda self : None;
ossimIpt_swigregister = _pyossim.ossimIpt_swigregister
ossimIpt_swigregister(ossimIpt)

ossimIrect_HEADER = _pyossim.ossimIrect_HEADER
class ossimIrect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIrect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIrect, name)
    __repr__ = _swig_repr
    UPPER_LEFT = _pyossim.ossimIrect_UPPER_LEFT
    LOWER_LEFT = _pyossim.ossimIrect_LOWER_LEFT
    LOWER_RIGHT = _pyossim.ossimIrect_LOWER_RIGHT
    UPPER_RIGHT = _pyossim.ossimIrect_UPPER_RIGHT
    def __init__(self, *args): 
        this = _pyossim.new_ossimIrect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIrect
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimIrect___set__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIrect___ne__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIrect___cmp__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimIrect___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIrect___mul__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIrect___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIrect___isub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimIrect___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIrect___sub__(self, *args)
    def ul(self): return _pyossim.ossimIrect_ul(self)
    def ur(self): return _pyossim.ossimIrect_ur(self)
    def lr(self): return _pyossim.ossimIrect_lr(self)
    def ll(self): return _pyossim.ossimIrect_ll(self)
    def changeOrientationMode(self, *args): return _pyossim.ossimIrect_changeOrientationMode(self, *args)
    def getBounds(self, *args): return _pyossim.ossimIrect_getBounds(self, *args)
    def getCenter(self, *args): return _pyossim.ossimIrect_getCenter(self, *args)
    def makeNan(self): return _pyossim.ossimIrect_makeNan(self)
    def hasNans(self): return _pyossim.ossimIrect_hasNans(self)
    def isNan(self): return _pyossim.ossimIrect_isNan(self)
    def orientMode(self): return _pyossim.ossimIrect_orientMode(self)
    def setOrientMode(self, *args): return _pyossim.ossimIrect_setOrientMode(self, *args)
    def stretchToTileBoundary(self, *args): return _pyossim.ossimIrect_stretchToTileBoundary(self, *args)
    def toString(self): return _pyossim.ossimIrect_toString(self)
    def toRect(self, *args): return _pyossim.ossimIrect_toRect(self, *args)
    def expand(self, *args): return _pyossim.ossimIrect_expand(self, *args)
    def insureMinimumSize(self, *args): return _pyossim.ossimIrect_insureMinimumSize(self, *args)
    def area(self): return _pyossim.ossimIrect_area(self)
    def set_ul(self, *args): return _pyossim.ossimIrect_set_ul(self, *args)
    def set_ur(self, *args): return _pyossim.ossimIrect_set_ur(self, *args)
    def set_lr(self, *args): return _pyossim.ossimIrect_set_lr(self, *args)
    def set_ll(self, *args): return _pyossim.ossimIrect_set_ll(self, *args)
    def set_ulx(self, *args): return _pyossim.ossimIrect_set_ulx(self, *args)
    def set_uly(self, *args): return _pyossim.ossimIrect_set_uly(self, *args)
    def set_urx(self, *args): return _pyossim.ossimIrect_set_urx(self, *args)
    def set_ury(self, *args): return _pyossim.ossimIrect_set_ury(self, *args)
    def set_lrx(self, *args): return _pyossim.ossimIrect_set_lrx(self, *args)
    def set_lry(self, *args): return _pyossim.ossimIrect_set_lry(self, *args)
    def set_llx(self, *args): return _pyossim.ossimIrect_set_llx(self, *args)
    def set_lly(self, *args): return _pyossim.ossimIrect_set_lly(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimIrect_pointWithin(self, *args)
    def intersects(self, *args): return _pyossim.ossimIrect_intersects(self, *args)
    def completely_within(self, *args): return _pyossim.ossimIrect_completely_within(self, *args)
    def orientationMode(self): return _pyossim.ossimIrect_orientationMode(self)
    def height(self): return _pyossim.ossimIrect_height(self)
    def width(self): return _pyossim.ossimIrect_width(self)
    def size(self): return _pyossim.ossimIrect_size(self)
    def clipToRect(self, *args): return _pyossim.ossimIrect_clipToRect(self, *args)
    def midPoint(self): return _pyossim.ossimIrect_midPoint(self)
    def ossimIrect_print(self, *args): return _pyossim.ossimIrect_ossimIrect_print(self, *args)
    def combine(self, *args): return _pyossim.ossimIrect_combine(self, *args)
    def saveState(self, *args): return _pyossim.ossimIrect_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimIrect_loadState(self, *args)
ossimIrect_swigregister = _pyossim.ossimIrect_swigregister
ossimIrect_swigregister(ossimIrect)

def __mul__(*args):
  return _pyossim.__mul__(*args)
__mul__ = _pyossim.__mul__

class ossimLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def getVector(self): return _pyossim.ossimLine_getVector(self)
    def intersectInfinite(self, *args): return _pyossim.ossimLine_intersectInfinite(self, *args)
    def intersectSegment(self, *args): return _pyossim.ossimLine_intersectSegment(self, *args)
    def midPoint(self): return _pyossim.ossimLine_midPoint(self)
    def length(self): return _pyossim.ossimLine_length(self)
    def normal(self): return _pyossim.ossimLine_normal(self)
    def isPointWithin(self, *args): return _pyossim.ossimLine_isPointWithin(self, *args)
    def isPointOnInfiniteLine(self, *args): return _pyossim.ossimLine_isPointOnInfiniteLine(self, *args)
    __swig_setmethods__["theP1"] = _pyossim.ossimLine_theP1_set
    __swig_getmethods__["theP1"] = _pyossim.ossimLine_theP1_get
    if _newclass:theP1 = _swig_property(_pyossim.ossimLine_theP1_get, _pyossim.ossimLine_theP1_set)
    __swig_setmethods__["theP2"] = _pyossim.ossimLine_theP2_set
    __swig_getmethods__["theP2"] = _pyossim.ossimLine_theP2_get
    if _newclass:theP2 = _swig_property(_pyossim.ossimLine_theP2_get, _pyossim.ossimLine_theP2_set)
    __swig_destroy__ = _pyossim.delete_ossimLine
    __del__ = lambda self : None;
ossimLine_swigregister = _pyossim.ossimLine_swigregister
ossimLine_swigregister(ossimLine)

class ossimLsrPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrPoint___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrPoint___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrPoint___add__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrPoint___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrPoint___ne__(self, *args)
    def ossimLsrPoint_ossimEcefPoint(self): return _pyossim.ossimLsrPoint_ossimLsrPoint_ossimEcefPoint(self)
    def x(self, *args): return _pyossim.ossimLsrPoint_x(self, *args)
    def y(self, *args): return _pyossim.ossimLsrPoint_y(self, *args)
    def z(self, *args): return _pyossim.ossimLsrPoint_z(self, *args)
    def data(self, *args): return _pyossim.ossimLsrPoint_data(self, *args)
    def lsrSpace(self, *args): return _pyossim.ossimLsrPoint_lsrSpace(self, *args)
    def hasNans(self): return _pyossim.ossimLsrPoint_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrPoint_makeNan(self)
    def ossimLsrPoint_print(self, *args): return _pyossim.ossimLsrPoint_ossimLsrPoint_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrPoint
    __del__ = lambda self : None;
ossimLsrPoint_swigregister = _pyossim.ossimLsrPoint_swigregister
ossimLsrPoint_swigregister(ossimLsrPoint)

class ossimLsrRay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrRay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrRay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrRay(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrRay___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrRay___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrRay___ne__(self, *args)
    def origin(self): return _pyossim.ossimLsrRay_origin(self)
    def direction(self): return _pyossim.ossimLsrRay_direction(self)
    def lsrSpace(self): return _pyossim.ossimLsrRay_lsrSpace(self)
    def ossimLsrRay_ossimEcefRay(self): return _pyossim.ossimLsrRay_ossimLsrRay_ossimEcefRay(self)
    def hasNans(self): return _pyossim.ossimLsrRay_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrRay_makeNan(self)
    def extend(self, *args): return _pyossim.ossimLsrRay_extend(self, *args)
    def ossimLsrRay_print(self, *args): return _pyossim.ossimLsrRay_ossimLsrRay_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrRay
    __del__ = lambda self : None;
ossimLsrRay_swigregister = _pyossim.ossimLsrRay_swigregister
ossimLsrRay_swigregister(ossimLsrRay)

class ossimLsrSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimLsrSpace
    __del__ = lambda self : None;
    def __cmp__(self, *args): return _pyossim.ossimLsrSpace___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrSpace___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimLsrSpace___set__(self, *args)
    def origin(self): return _pyossim.ossimLsrSpace_origin(self)
    def lsrToEcefRotMatrix(self): return _pyossim.ossimLsrSpace_lsrToEcefRotMatrix(self)
    def ecefToLsrRotMatrix(self): return _pyossim.ossimLsrSpace_ecefToLsrRotMatrix(self)
    __swig_getmethods__["lsrSpaceErrorMessage"] = lambda x: _pyossim.ossimLsrSpace_lsrSpaceErrorMessage
    if _newclass:lsrSpaceErrorMessage = staticmethod(_pyossim.ossimLsrSpace_lsrSpaceErrorMessage)
    def ossimLsrSpace_print(self, *args): return _pyossim.ossimLsrSpace_ossimLsrSpace_print(self, *args)
ossimLsrSpace_swigregister = _pyossim.ossimLsrSpace_swigregister
ossimLsrSpace_swigregister(ossimLsrSpace)

def ossimLsrSpace_lsrSpaceErrorMessage(*args):
  return _pyossim.ossimLsrSpace_lsrSpaceErrorMessage(*args)
ossimLsrSpace_lsrSpaceErrorMessage = _pyossim.ossimLsrSpace_lsrSpaceErrorMessage

class ossimLsrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrVector___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrVector___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrVector___add__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimLsrVector___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimLsrVector___div__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrVector___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrVector___ne__(self, *args)
    def ossimLsrVector_ossimEcefVector(self): return _pyossim.ossimLsrVector_ossimLsrVector_ossimEcefVector(self)
    def dot(self, *args): return _pyossim.ossimLsrVector_dot(self, *args)
    def angleTo(self, *args): return _pyossim.ossimLsrVector_angleTo(self, *args)
    def cross(self, *args): return _pyossim.ossimLsrVector_cross(self, *args)
    def unitVector(self): return _pyossim.ossimLsrVector_unitVector(self)
    def magnitude(self): return _pyossim.ossimLsrVector_magnitude(self)
    def normalize(self): return _pyossim.ossimLsrVector_normalize(self)
    def x(self, *args): return _pyossim.ossimLsrVector_x(self, *args)
    def y(self, *args): return _pyossim.ossimLsrVector_y(self, *args)
    def z(self, *args): return _pyossim.ossimLsrVector_z(self, *args)
    def hasNans(self): return _pyossim.ossimLsrVector_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrVector_makeNan(self)
    def data(self, *args): return _pyossim.ossimLsrVector_data(self, *args)
    def lsrSpace(self, *args): return _pyossim.ossimLsrVector_lsrSpace(self, *args)
    def ossimLsrVector_print(self, *args): return _pyossim.ossimLsrVector_ossimLsrVector_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrVector
    __del__ = lambda self : None;
ossimLsrVector_swigregister = _pyossim.ossimLsrVector_swigregister
ossimLsrVector_swigregister(ossimLsrVector)

class ossimNadconGridDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconGridDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridDatum
    __del__ = lambda self : None;
ossimNadconGridDatum_swigregister = _pyossim.ossimNadconGridDatum_swigregister
ossimNadconGridDatum_swigregister(ossimNadconGridDatum)

class ossimNadconGridFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridFile
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimNadconGridFile_open(self, *args)
    def close(self): return _pyossim.ossimNadconGridFile_close(self)
    def getShiftAtLatLon(self, *args): return _pyossim.ossimNadconGridFile_getShiftAtLatLon(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimNadconGridFile_pointWithin(self, *args)
    def getBoundingRect(self): return _pyossim.ossimNadconGridFile_getBoundingRect(self)
    def getFilename(self): return _pyossim.ossimNadconGridFile_getFilename(self)
    def getFileOkFlag(self): return _pyossim.ossimNadconGridFile_getFileOkFlag(self)
    def getSpacing(self): return _pyossim.ossimNadconGridFile_getSpacing(self)
ossimNadconGridFile_swigregister = _pyossim.ossimNadconGridFile_swigregister
ossimNadconGridFile_swigregister(ossimNadconGridFile)

class ossimNadconGridHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridHeader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridHeader()
        try: self.this.append(this)
        except: self.this = this
    def readHeader(self, *args): return _pyossim.ossimNadconGridHeader_readHeader(self, *args)
    def getStartOffset(self): return _pyossim.ossimNadconGridHeader_getStartOffset(self)
    def getBytesPerRow(self): return _pyossim.ossimNadconGridHeader_getBytesPerRow(self)
    def getNumberOfRows(self): return _pyossim.ossimNadconGridHeader_getNumberOfRows(self)
    def getNumberOfCols(self): return _pyossim.ossimNadconGridHeader_getNumberOfCols(self)
    def getDeltaX(self): return _pyossim.ossimNadconGridHeader_getDeltaX(self)
    def getDeltaY(self): return _pyossim.ossimNadconGridHeader_getDeltaY(self)
    def getBoundingRect(self): return _pyossim.ossimNadconGridHeader_getBoundingRect(self)
    def getMinX(self): return _pyossim.ossimNadconGridHeader_getMinX(self)
    def getMinY(self): return _pyossim.ossimNadconGridHeader_getMinY(self)
    def getSpacing(self): return _pyossim.ossimNadconGridHeader_getSpacing(self)
    __swig_destroy__ = _pyossim.delete_ossimNadconGridHeader
    __del__ = lambda self : None;
ossimNadconGridHeader_swigregister = _pyossim.ossimNadconGridHeader_swigregister
ossimNadconGridHeader_swigregister(ossimNadconGridHeader)

class ossimNadconNarDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNarDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNarDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNarDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNarDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNarDatum
    __del__ = lambda self : None;
ossimNadconNarDatum_swigregister = _pyossim.ossimNadconNarDatum_swigregister
ossimNadconNarDatum_swigregister(ossimNadconNarDatum)

class ossimNadconNasDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNasDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNasDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNasDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNasDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNasDatum
    __del__ = lambda self : None;
ossimNadconNasDatum_swigregister = _pyossim.ossimNadconNasDatum_swigregister
ossimNadconNasDatum_swigregister(ossimNadconNasDatum)

class ossimStreamBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimStreamBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimStreamBase
    __del__ = lambda self : None;
    def isCompressed(self): return _pyossim.ossimStreamBase_isCompressed(self)
ossimStreamBase_swigregister = _pyossim.ossimStreamBase_swigregister
ossimStreamBase_swigregister(ossimStreamBase)

class ossimStreamFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimStreamFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimStreamFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimStreamFactory
    __del__ = lambda self : None;
    def createNewIFStream(self, *args): return _pyossim.ossimStreamFactory_createNewIFStream(self, *args)
ossimStreamFactory_swigregister = _pyossim.ossimStreamFactory_swigregister
ossimStreamFactory_swigregister(ossimStreamFactory)

def ossimStreamFactory_instance():
  return _pyossim.ossimStreamFactory_instance()
ossimStreamFactory_instance = _pyossim.ossimStreamFactory_instance

class ossimStreamFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimStreamFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimStreamFactoryRegistry_instance)
    __swig_destroy__ = _pyossim.delete_ossimStreamFactoryRegistry
    __del__ = lambda self : None;
    def registerFactory(self, *args): return _pyossim.ossimStreamFactoryRegistry_registerFactory(self, *args)
    def createNewIFStream(self, *args): return _pyossim.ossimStreamFactoryRegistry_createNewIFStream(self, *args)
ossimStreamFactoryRegistry_swigregister = _pyossim.ossimStreamFactoryRegistry_swigregister
ossimStreamFactoryRegistry_swigregister(ossimStreamFactoryRegistry)

def ossimStreamFactoryRegistry_instance():
  return _pyossim.ossimStreamFactoryRegistry_instance()
ossimStreamFactoryRegistry_instance = _pyossim.ossimStreamFactoryRegistry_instance

ossimString_HEADER = _pyossim.ossimString_HEADER
class ossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _pyossim.ossimString_contains(self, *args)
    def chars(self): return _pyossim.ossimString_chars(self)
    def __set__(self, *args): return _pyossim.ossimString___set__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimString___iadd__(self, *args)
    def at(self, *args): return _pyossim.ossimString_at(self, *args)
    def append(self, *args): return _pyossim.ossimString_append(self, *args)
    def __add__(self, *args): return _pyossim.ossimString___add__(self, *args)
    def __eq__(self, *args): return _pyossim.ossimString___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimString___ne__(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimString___getitem__(self, *args)
    def insert(self, *args): return _pyossim.ossimString_insert(self, *args)
    def push_back(self, *args): return _pyossim.ossimString_push_back(self, *args)
    def substr(self, *args): return _pyossim.ossimString_substr(self, *args)
    def trim(self, *args): return _pyossim.ossimString_trim(self, *args)
    def beforePos(self, *args): return _pyossim.ossimString_beforePos(self, *args)
    def afterPos(self, *args): return _pyossim.ossimString_afterPos(self, *args)
    def substitute(self, *args): return _pyossim.ossimString_substitute(self, *args)
    def gsub(self, *args): return _pyossim.ossimString_gsub(self, *args)
    def explode(self, *args): return _pyossim.ossimString_explode(self, *args)
    def expandEnvironmentVariable(self): return _pyossim.ossimString_expandEnvironmentVariable(self)
    def upcase(self, *args): return _pyossim.ossimString_upcase(self, *args)
    def downcase(self, *args): return _pyossim.ossimString_downcase(self, *args)
    def c_str(self): return _pyossim.ossimString_c_str(self)
    def data(self): return _pyossim.ossimString_data(self)
    def size(self): return _pyossim.ossimString_size(self)
    def length(self): return _pyossim.ossimString_length(self)
    def empty(self): return _pyossim.ossimString_empty(self)
    def string(self, *args): return _pyossim.ossimString_string(self, *args)
    def begin(self, *args): return _pyossim.ossimString_begin(self, *args)
    def end(self, *args): return _pyossim.ossimString_end(self, *args)
    def clear(self): return _pyossim.ossimString_clear(self)
    def erase(self, *args): return _pyossim.ossimString_erase(self, *args)
    def find(self, *args): return _pyossim.ossimString_find(self, *args)
    def rfind(self, *args): return _pyossim.ossimString_rfind(self, *args)
    def find_first_of(self, *args): return _pyossim.ossimString_find_first_of(self, *args)
    def find_first_not_of(self, *args): return _pyossim.ossimString_find_first_not_of(self, *args)
    def find_last_of(self, *args): return _pyossim.ossimString_find_last_of(self, *args)
    def assign(self, *args): return _pyossim.ossimString_assign(self, *args)
    def replace(self, *args): return _pyossim.ossimString_replace(self, *args)
    def reserve(self, *args): return _pyossim.ossimString_reserve(self, *args)
    def before(self, *args): return _pyossim.ossimString_before(self, *args)
    def after(self, *args): return _pyossim.ossimString_after(self, *args)
    def stringDup(self): return _pyossim.ossimString_stringDup(self)
    __swig_getmethods__["toBool"] = lambda x: _pyossim.ossimString_toBool
    if _newclass:toBool = staticmethod(_pyossim.ossimString_toBool)
    __swig_getmethods__["toUInt8"] = lambda x: _pyossim.ossimString_toUInt8
    if _newclass:toUInt8 = staticmethod(_pyossim.ossimString_toUInt8)
    __swig_getmethods__["toInt"] = lambda x: _pyossim.ossimString_toInt
    if _newclass:toInt = staticmethod(_pyossim.ossimString_toInt)
    __swig_getmethods__["toInt16"] = lambda x: _pyossim.ossimString_toInt16
    if _newclass:toInt16 = staticmethod(_pyossim.ossimString_toInt16)
    __swig_getmethods__["toUInt16"] = lambda x: _pyossim.ossimString_toUInt16
    if _newclass:toUInt16 = staticmethod(_pyossim.ossimString_toUInt16)
    __swig_getmethods__["toInt32"] = lambda x: _pyossim.ossimString_toInt32
    if _newclass:toInt32 = staticmethod(_pyossim.ossimString_toInt32)
    __swig_getmethods__["toUInt32"] = lambda x: _pyossim.ossimString_toUInt32
    if _newclass:toUInt32 = staticmethod(_pyossim.ossimString_toUInt32)
    __swig_getmethods__["toInt64"] = lambda x: _pyossim.ossimString_toInt64
    if _newclass:toInt64 = staticmethod(_pyossim.ossimString_toInt64)
    __swig_getmethods__["toUInt64"] = lambda x: _pyossim.ossimString_toUInt64
    if _newclass:toUInt64 = staticmethod(_pyossim.ossimString_toUInt64)
    __swig_getmethods__["toLong"] = lambda x: _pyossim.ossimString_toLong
    if _newclass:toLong = staticmethod(_pyossim.ossimString_toLong)
    __swig_getmethods__["toULong"] = lambda x: _pyossim.ossimString_toULong
    if _newclass:toULong = staticmethod(_pyossim.ossimString_toULong)
    __swig_getmethods__["toFloat32"] = lambda x: _pyossim.ossimString_toFloat32
    if _newclass:toFloat32 = staticmethod(_pyossim.ossimString_toFloat32)
    __swig_getmethods__["toFloat64"] = lambda x: _pyossim.ossimString_toFloat64
    if _newclass:toFloat64 = staticmethod(_pyossim.ossimString_toFloat64)
    __swig_getmethods__["toDouble"] = lambda x: _pyossim.ossimString_toDouble
    if _newclass:toDouble = staticmethod(_pyossim.ossimString_toDouble)
    __swig_getmethods__["toString"] = lambda x: _pyossim.ossimString_toString
    if _newclass:toString = staticmethod(_pyossim.ossimString_toString)
    __swig_getmethods__["stripLeading"] = lambda x: _pyossim.ossimString_stripLeading
    if _newclass:stripLeading = staticmethod(_pyossim.ossimString_stripLeading)
    def split(self, *args): return _pyossim.ossimString_split(self, *args)
    def join(self, *args): return _pyossim.ossimString_join(self, *args)
    def beforeRegExp(self, *args): return _pyossim.ossimString_beforeRegExp(self, *args)
    def fromRegExp(self, *args): return _pyossim.ossimString_fromRegExp(self, *args)
    def afterRegExp(self, *args): return _pyossim.ossimString_afterRegExp(self, *args)
    def match(self, *args): return _pyossim.ossimString_match(self, *args)
    def replaceAllThatMatch(self, *args): return _pyossim.ossimString_replaceAllThatMatch(self, *args)
    def replaceStrThatMatch(self, *args): return _pyossim.ossimString_replaceStrThatMatch(self, *args)
    def urlEncode(self): return _pyossim.ossimString_urlEncode(self)
    def getOssimId(self): return _pyossim.ossimString_getOssimId(self)
    __swig_destroy__ = _pyossim.delete_ossimString
    __del__ = lambda self : None;
ossimString_swigregister = _pyossim.ossimString_swigregister
ossimString_swigregister(ossimString)

def getline(*args):
  return _pyossim.getline(*args)
getline = _pyossim.getline

def __add__(*args):
  return _pyossim.__add__(*args)
__add__ = _pyossim.__add__

def __eq__(*args):
  return _pyossim.__eq__(*args)
__eq__ = _pyossim.__eq__

def ossimString_toBool(*args):
  return _pyossim.ossimString_toBool(*args)
ossimString_toBool = _pyossim.ossimString_toBool

def ossimString_toUInt8(*args):
  return _pyossim.ossimString_toUInt8(*args)
ossimString_toUInt8 = _pyossim.ossimString_toUInt8

def ossimString_toInt(*args):
  return _pyossim.ossimString_toInt(*args)
ossimString_toInt = _pyossim.ossimString_toInt

def ossimString_toInt16(*args):
  return _pyossim.ossimString_toInt16(*args)
ossimString_toInt16 = _pyossim.ossimString_toInt16

def ossimString_toUInt16(*args):
  return _pyossim.ossimString_toUInt16(*args)
ossimString_toUInt16 = _pyossim.ossimString_toUInt16

def ossimString_toInt32(*args):
  return _pyossim.ossimString_toInt32(*args)
ossimString_toInt32 = _pyossim.ossimString_toInt32

def ossimString_toUInt32(*args):
  return _pyossim.ossimString_toUInt32(*args)
ossimString_toUInt32 = _pyossim.ossimString_toUInt32

def ossimString_toInt64(*args):
  return _pyossim.ossimString_toInt64(*args)
ossimString_toInt64 = _pyossim.ossimString_toInt64

def ossimString_toUInt64(*args):
  return _pyossim.ossimString_toUInt64(*args)
ossimString_toUInt64 = _pyossim.ossimString_toUInt64

def ossimString_toLong(*args):
  return _pyossim.ossimString_toLong(*args)
ossimString_toLong = _pyossim.ossimString_toLong

def ossimString_toULong(*args):
  return _pyossim.ossimString_toULong(*args)
ossimString_toULong = _pyossim.ossimString_toULong

def ossimString_toFloat32(*args):
  return _pyossim.ossimString_toFloat32(*args)
ossimString_toFloat32 = _pyossim.ossimString_toFloat32

def ossimString_toFloat64(*args):
  return _pyossim.ossimString_toFloat64(*args)
ossimString_toFloat64 = _pyossim.ossimString_toFloat64

def ossimString_toDouble(*args):
  return _pyossim.ossimString_toDouble(*args)
ossimString_toDouble = _pyossim.ossimString_toDouble

def ossimString_toString(*args):
  return _pyossim.ossimString_toString(*args)
ossimString_toString = _pyossim.ossimString_toString

def ossimString_stripLeading(*args):
  return _pyossim.ossimString_stripLeading(*args)
ossimString_stripLeading = _pyossim.ossimString_stripLeading

class ossimStringLtstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStringLtstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStringLtstr, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _pyossim.ossimStringLtstr___call__(self, *args)
    def __init__(self): 
        this = _pyossim.new_ossimStringLtstr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimStringLtstr
    __del__ = lambda self : None;
ossimStringLtstr_swigregister = _pyossim.ossimStringLtstr_swigregister
ossimStringLtstr_swigregister(ossimStringLtstr)

class ossimTDpt(ossimDpt):
    __swig_setmethods__ = {}
    for _s in [ossimDpt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTDpt, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDpt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTDpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTDpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimTDpt___set__(self, *args)
    def setMasterPoint(self, *args): return _pyossim.ossimTDpt_setMasterPoint(self, *args)
    def getMasterPoint(self): return _pyossim.ossimTDpt_getMasterPoint(self)
    def refMasterPoint(self): return _pyossim.ossimTDpt_refMasterPoint(self)
    def setSlavePoint(self, *args): return _pyossim.ossimTDpt_setSlavePoint(self, *args)
    def getSlavePoint(self): return _pyossim.ossimTDpt_getSlavePoint(self)
    def refSlavePoint(self): return _pyossim.ossimTDpt_refSlavePoint(self)
    def makeNan(self): return _pyossim.ossimTDpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimTDpt_hasNans(self)
    def isNan(self): return _pyossim.ossimTDpt_isNan(self)
    def ossimTDpt_print(self, *args): return _pyossim.ossimTDpt_ossimTDpt_print(self, *args)
    def ossimTDpt_printTab(self, *args): return _pyossim.ossimTDpt_ossimTDpt_printTab(self, *args)
    __swig_setmethods__["tie"] = _pyossim.ossimTDpt_tie_set
    __swig_getmethods__["tie"] = _pyossim.ossimTDpt_tie_get
    if _newclass:tie = _swig_property(_pyossim.ossimTDpt_tie_get, _pyossim.ossimTDpt_tie_set)
    __swig_setmethods__["score"] = _pyossim.ossimTDpt_score_set
    __swig_getmethods__["score"] = _pyossim.ossimTDpt_score_get
    if _newclass:score = _swig_property(_pyossim.ossimTDpt_score_get, _pyossim.ossimTDpt_score_set)
    __swig_destroy__ = _pyossim.delete_ossimTDpt
    __del__ = lambda self : None;
ossimTDpt_swigregister = _pyossim.ossimTDpt_swigregister
ossimTDpt_swigregister(ossimTDpt)

class ossimTempFilename(ossimFilename):
    __swig_setmethods__ = {}
    for _s in [ossimFilename]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTempFilename, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimFilename]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTempFilename, name)
    __repr__ = _swig_repr
    def __init__(self, tempDir = "", prefix = "", extension = "", autodelete = True, 
    useWildcardDelete = True): 
        this = _pyossim.new_ossimTempFilename(tempDir, prefix, extension, autodelete, useWildcardDelete)
        try: self.this.append(this)
        except: self.this = this
    def generateRandomFile(self): return _pyossim.ossimTempFilename_generateRandomFile(self)
    def generateRandomDir(self): return _pyossim.ossimTempFilename_generateRandomDir(self)
    __swig_destroy__ = _pyossim.delete_ossimTempFilename
    __del__ = lambda self : None;
ossimTempFilename_swigregister = _pyossim.ossimTempFilename_swigregister
ossimTempFilename_swigregister(ossimTempFilename)

class ossimThinPlateSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimThinPlateSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimThinPlateSpline, name)
    __repr__ = _swig_repr
    VIZ_GEOREF_SPLINE_ZERO_POINTS = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ZERO_POINTS
    VIZ_GEOREF_SPLINE_ONE_POINT = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_POINT
    VIZ_GEOREF_SPLINE_TWO_POINTS = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_TWO_POINTS
    VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL
    VIZ_GEOREF_SPLINE_FULL = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_FULL
    VIZ_GEOREF_SPLINE_POINT_WAS_ADDED = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_ADDED
    VIZ_GEOREF_SPLINE_POINT_WAS_DELETED = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_DELETED
    def __init__(self, nof_vars = 1): 
        this = _pyossim.new_ossimThinPlateSpline(nof_vars)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimThinPlateSpline
    __del__ = lambda self : None;
    def getNumberOfPoints(self): return _pyossim.ossimThinPlateSpline_getNumberOfPoints(self)
    def setToler(self, *args): return _pyossim.ossimThinPlateSpline_setToler(self, *args)
    def getToler(self, *args): return _pyossim.ossimThinPlateSpline_getToler(self, *args)
    def getInterpolationType(self): return _pyossim.ossimThinPlateSpline_getInterpolationType(self)
    def deleteList(self): return _pyossim.ossimThinPlateSpline_deleteList(self)
    def growPoints(self): return _pyossim.ossimThinPlateSpline_growPoints(self)
    def addPoint(self, *args): return _pyossim.ossimThinPlateSpline_addPoint(self, *args)
    def deletePoint(self, *args): return _pyossim.ossimThinPlateSpline_deletePoint(self, *args)
    def getPoint(self, *args): return _pyossim.ossimThinPlateSpline_getPoint(self, *args)
    def getXy(self, *args): return _pyossim.ossimThinPlateSpline_getXy(self, *args)
    def changePoint(self, *args): return _pyossim.ossimThinPlateSpline_changePoint(self, *args)
    def reset(self): return _pyossim.ossimThinPlateSpline_reset(self)
    def solve(self): return _pyossim.ossimThinPlateSpline_solve(self)
ossimThinPlateSpline_swigregister = _pyossim.ossimThinPlateSpline_swigregister
ossimThinPlateSpline_swigregister(ossimThinPlateSpline)

class ossimThreeParamDatum(ossimDatum):
    __swig_setmethods__ = {}
    for _s in [ossimDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimThreeParamDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimThreeParamDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimThreeParamDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimThreeParamDatum
    __del__ = lambda self : None;
    def shift(self, *args): return _pyossim.ossimThreeParamDatum_shift(self, *args)
    def shiftToWgs84(self, *args): return _pyossim.ossimThreeParamDatum_shiftToWgs84(self, *args)
    def shiftFromWgs84(self, *args): return _pyossim.ossimThreeParamDatum_shiftFromWgs84(self, *args)
    def param1(self): return _pyossim.ossimThreeParamDatum_param1(self)
    def param2(self): return _pyossim.ossimThreeParamDatum_param2(self)
    def param3(self): return _pyossim.ossimThreeParamDatum_param3(self)
    def param4(self): return _pyossim.ossimThreeParamDatum_param4(self)
    def param5(self): return _pyossim.ossimThreeParamDatum_param5(self)
    def param6(self): return _pyossim.ossimThreeParamDatum_param6(self)
    def param7(self): return _pyossim.ossimThreeParamDatum_param7(self)
ossimThreeParamDatum_swigregister = _pyossim.ossimThreeParamDatum_swigregister
ossimThreeParamDatum_swigregister(ossimThreeParamDatum)

class ossimTieGpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTieGpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTieGpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTieGpt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTieGpt
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimTieGpt___set__(self, *args)
    def setGroundPoint(self, *args): return _pyossim.ossimTieGpt_setGroundPoint(self, *args)
    def getGroundPoint(self): return _pyossim.ossimTieGpt_getGroundPoint(self)
    def refGroundPoint(self): return _pyossim.ossimTieGpt_refGroundPoint(self)
    def setImagePoint(self, *args): return _pyossim.ossimTieGpt_setImagePoint(self, *args)
    def getImagePoint(self): return _pyossim.ossimTieGpt_getImagePoint(self)
    def refImagePoint(self): return _pyossim.ossimTieGpt_refImagePoint(self)
    def setScore(self, *args): return _pyossim.ossimTieGpt_setScore(self, *args)
    def getScore(self): return _pyossim.ossimTieGpt_getScore(self)
    def refScore(self): return _pyossim.ossimTieGpt_refScore(self)
    def makeNan(self): return _pyossim.ossimTieGpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimTieGpt_hasNans(self)
    def isNan(self): return _pyossim.ossimTieGpt_isNan(self)
    def ossimTieGpt_print(self, *args): return _pyossim.ossimTieGpt_ossimTieGpt_print(self, *args)
    def ossimTieGpt_printTab(self, *args): return _pyossim.ossimTieGpt_ossimTieGpt_printTab(self, *args)
    def exportAsGmlNode(self, aGmlVersion = "2.1.2"): return _pyossim.ossimTieGpt_exportAsGmlNode(self, aGmlVersion)
    def importFromGmlNode(self, *args): return _pyossim.ossimTieGpt_importFromGmlNode(self, *args)
    __swig_setmethods__["tie"] = _pyossim.ossimTieGpt_tie_set
    __swig_getmethods__["tie"] = _pyossim.ossimTieGpt_tie_get
    if _newclass:tie = _swig_property(_pyossim.ossimTieGpt_tie_get, _pyossim.ossimTieGpt_tie_set)
    __swig_setmethods__["score"] = _pyossim.ossimTieGpt_score_set
    __swig_getmethods__["score"] = _pyossim.ossimTieGpt_score_get
    if _newclass:score = _swig_property(_pyossim.ossimTieGpt_score_get, _pyossim.ossimTieGpt_score_set)
ossimTieGpt_swigregister = _pyossim.ossimTieGpt_swigregister
ossimTieGpt_swigregister(ossimTieGpt)

def __rshift__(*args):
  return _pyossim.__rshift__(*args)
__rshift__ = _pyossim.__rshift__

class ossimTieGptSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTieGptSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTieGptSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTieGptSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTieGptSet
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimTieGptSet___set__(self, *args)
    def setTiePoints(self, *args): return _pyossim.ossimTieGptSet_setTiePoints(self, *args)
    def getTiePoints(self): return _pyossim.ossimTieGptSet_getTiePoints(self)
    def refTiePoints(self): return _pyossim.ossimTieGptSet_refTiePoints(self)
    def setMasterPath(self, *args): return _pyossim.ossimTieGptSet_setMasterPath(self, *args)
    def getMasterPath(self): return _pyossim.ossimTieGptSet_getMasterPath(self)
    def setSlavePath(self, *args): return _pyossim.ossimTieGptSet_setSlavePath(self, *args)
    def getSlavePath(self): return _pyossim.ossimTieGptSet_getSlavePath(self)
    def setImageCov(self, *args): return _pyossim.ossimTieGptSet_setImageCov(self, *args)
    def getImageCov(self): return _pyossim.ossimTieGptSet_getImageCov(self)
    def refImageCov(self): return _pyossim.ossimTieGptSet_refImageCov(self)
    def setGroundCov(self, *args): return _pyossim.ossimTieGptSet_setGroundCov(self, *args)
    def getGroundCov(self): return _pyossim.ossimTieGptSet_getGroundCov(self)
    def refGroundCov(self): return _pyossim.ossimTieGptSet_refGroundCov(self)
    def getSlaveMasterPoints(self, *args): return _pyossim.ossimTieGptSet_getSlaveMasterPoints(self, *args)
    def size(self): return _pyossim.ossimTieGptSet_size(self)
    def addTiePoint(self, *args): return _pyossim.ossimTieGptSet_addTiePoint(self, *args)
    def clearTiePoints(self): return _pyossim.ossimTieGptSet_clearTiePoints(self)
    def getGroundBoundaries(self, *args): return _pyossim.ossimTieGptSet_getGroundBoundaries(self, *args)
    def ossimTieGptSet_printTab(self, *args): return _pyossim.ossimTieGptSet_ossimTieGptSet_printTab(self, *args)
    def exportAsGmlNode(self, aGmlVersion = "2.1.2"): return _pyossim.ossimTieGptSet_exportAsGmlNode(self, aGmlVersion)
    def importFromGmlNode(self, *args): return _pyossim.ossimTieGptSet_importFromGmlNode(self, *args)
    __swig_setmethods__["TIEPTSET_TAG"] = _pyossim.ossimTieGptSet_TIEPTSET_TAG_set
    __swig_getmethods__["TIEPTSET_TAG"] = _pyossim.ossimTieGptSet_TIEPTSET_TAG_get
    if _newclass:TIEPTSET_TAG = _swig_property(_pyossim.ossimTieGptSet_TIEPTSET_TAG_get, _pyossim.ossimTieGptSet_TIEPTSET_TAG_set)
ossimTieGptSet_swigregister = _pyossim.ossimTieGptSet_swigregister
ossimTieGptSet_swigregister(ossimTieGptSet)

class ossimTiledImageHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTiledImageHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTiledImageHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTiledImageHash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTiledImageHash
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyossim.ossimTiledImageHash___call__(self, *args)
ossimTiledImageHash_swigregister = _pyossim.ossimTiledImageHash_swigregister
ossimTiledImageHash_swigregister(ossimTiledImageHash)

class ossimTileHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTileHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTileHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTileHash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTileHash
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyossim.ossimTileHash___call__(self, *args)
ossimTileHash_swigregister = _pyossim.ossimTileHash_swigregister
ossimTileHash_swigregister(ossimTileHash)

ossimTimer_HEADER = _pyossim.ossimTimer_HEADER
class ossimTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTimer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimTimer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTimer
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimTimer_instance
    if _newclass:instance = staticmethod(_pyossim.ossimTimer_instance)
    def tick(self): return _pyossim.ossimTimer_tick(self)
    def setStartTick(self, *args): return _pyossim.ossimTimer_setStartTick(self, *args)
    def getStartTick(self): return _pyossim.ossimTimer_getStartTick(self)
    def time_s(self): return _pyossim.ossimTimer_time_s(self)
    def time_m(self): return _pyossim.ossimTimer_time_m(self)
    def time_u(self): return _pyossim.ossimTimer_time_u(self)
    def time_n(self): return _pyossim.ossimTimer_time_n(self)
    def delta_s(self, *args): return _pyossim.ossimTimer_delta_s(self, *args)
    def delta_m(self, *args): return _pyossim.ossimTimer_delta_m(self, *args)
    def delta_u(self, *args): return _pyossim.ossimTimer_delta_u(self, *args)
    def delta_n(self, *args): return _pyossim.ossimTimer_delta_n(self, *args)
    def getSecondsPerTick(self): return _pyossim.ossimTimer_getSecondsPerTick(self)
ossimTimer_swigregister = _pyossim.ossimTimer_swigregister
ossimTimer_swigregister(ossimTimer)

def ossimTimer_instance():
  return _pyossim.ossimTimer_instance()
ossimTimer_instance = _pyossim.ossimTimer_instance

class ossimTrace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTrace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTrace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTrace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTrace
    __del__ = lambda self : None;
    def isEnabled(self): return _pyossim.ossimTrace_isEnabled(self)
    def getTraceName(self): return _pyossim.ossimTrace_getTraceName(self)
    def setTraceFlag(self, *args): return _pyossim.ossimTrace_setTraceFlag(self, *args)
    def __call__(self): return _pyossim.ossimTrace___call__(self)
ossimTrace_swigregister = _pyossim.ossimTrace_swigregister
ossimTrace_swigregister(ossimTrace)

class ossimTraceManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTraceManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTraceManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimTraceManager_instance
    if _newclass:instance = staticmethod(_pyossim.ossimTraceManager_instance)
    def setTracePattern(self, *args): return _pyossim.ossimTraceManager_setTracePattern(self, *args)
    def addTrace(self, *args): return _pyossim.ossimTraceManager_addTrace(self, *args)
    def removeTrace(self, *args): return _pyossim.ossimTraceManager_removeTrace(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimTraceManager
    __del__ = lambda self : None;
ossimTraceManager_swigregister = _pyossim.ossimTraceManager_swigregister
ossimTraceManager_swigregister(ossimTraceManager)

def ossimTraceManager_instance():
  return _pyossim.ossimTraceManager_instance()
ossimTraceManager_instance = _pyossim.ossimTraceManager_instance

class ossimAnnotationMultiEllipseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAnnotationMultiEllipseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAnnotationMultiEllipseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimAnnotationMultiEllipseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimAnnotationMultiEllipseObject_dup(self)
    def getNewClippedObject(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_getNewClippedObject(self, *args)
    def applyScale(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_applyScale(self, *args)
    def draw(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_draw(self, *args)
    def intersects(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_intersects(self, *args)
    def ossimAnnotationMultiEllipseObject_print(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print(self, *args)
    def getBoundingRect(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_getBoundingRect(self, *args)
    def computeBoundingRect(self): return _pyossim.ossimAnnotationMultiEllipseObject_computeBoundingRect(self)
    def isPointWithin(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_isPointWithin(self, *args)
    def setFillFlag(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_setFillFlag(self, *args)
    def resize(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_resize(self, *args)
    def setWidthHeight(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_setWidthHeight(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject___getitem__(self, *args)
ossimAnnotationMultiEllipseObject_swigregister = _pyossim.ossimAnnotationMultiEllipseObject_swigregister
ossimAnnotationMultiEllipseObject_swigregister(ossimAnnotationMultiEllipseObject)

class ossimAnnotationObjectFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAnnotationObjectFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAnnotationObjectFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimAnnotationObjectFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimAnnotationObjectFactory_instance)
    def create(self, *args): return _pyossim.ossimAnnotationObjectFactory_create(self, *args)
    def getList(self): return _pyossim.ossimAnnotationObjectFactory_getList(self)
    __swig_destroy__ = _pyossim.delete_ossimAnnotationObjectFactory
    __del__ = lambda self : None;
ossimAnnotationObjectFactory_swigregister = _pyossim.ossimAnnotationObjectFactory_swigregister
ossimAnnotationObjectFactory_swigregister(ossimAnnotationObjectFactory)

def ossimAnnotationObjectFactory_instance():
  return _pyossim.ossimAnnotationObjectFactory_instance()
ossimAnnotationObjectFactory_instance = _pyossim.ossimAnnotationObjectFactory_instance

class ossimBitMaskWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimBitMaskWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimBitMaskWriter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BM_STARTING_RLEVEL_KW"] = _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set
    __swig_getmethods__["BM_STARTING_RLEVEL_KW"] = _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get
    if _newclass:BM_STARTING_RLEVEL_KW = _swig_property(_pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get, _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set)
    __swig_setmethods__["MASK_FILE_MAGIC_NUMBER"] = _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set
    __swig_getmethods__["MASK_FILE_MAGIC_NUMBER"] = _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get
    if _newclass:MASK_FILE_MAGIC_NUMBER = _swig_property(_pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get, _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set)
    def __init__(self): 
        this = _pyossim.new_ossimBitMaskWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimBitMaskWriter
    __del__ = lambda self : None;
    def setBogusPixel(self, *args): return _pyossim.ossimBitMaskWriter_setBogusPixel(self, *args)
    def setBogusPixelRange(self, *args): return _pyossim.ossimBitMaskWriter_setBogusPixelRange(self, *args)
    def setStartingResLevel(self, *args): return _pyossim.ossimBitMaskWriter_setStartingResLevel(self, *args)
    def generateMask(self, *args): return _pyossim.ossimBitMaskWriter_generateMask(self, *args)
    def buildOverviews(self, *args): return _pyossim.ossimBitMaskWriter_buildOverviews(self, *args)
    def loadState(self, *args): return _pyossim.ossimBitMaskWriter_loadState(self, *args)
    def isOpen(self): return _pyossim.ossimBitMaskWriter_isOpen(self)
    def open(self): return _pyossim.ossimBitMaskWriter_open(self)
    def close(self): return _pyossim.ossimBitMaskWriter_close(self)
    def canConnectMyInputTo(self, *args): return _pyossim.ossimBitMaskWriter_canConnectMyInputTo(self, *args)
    def connectMyInputTo(self, *args): return _pyossim.ossimBitMaskWriter_connectMyInputTo(self, *args)
ossimBitMaskWriter_swigregister = _pyossim.ossimBitMaskWriter_swigregister
ossimBitMaskWriter_swigregister(ossimBitMaskWriter)

class ossimFilterResampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilterResampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilterResampler, name)
    __repr__ = _swig_repr
    ossimFilterResampler_NEAREST_NEIGHBOR = _pyossim.ossimFilterResampler_ossimFilterResampler_NEAREST_NEIGHBOR
    ossimFilterResampler_BOX = _pyossim.ossimFilterResampler_ossimFilterResampler_BOX
    ossimFilterResampler_GAUSSIAN = _pyossim.ossimFilterResampler_ossimFilterResampler_GAUSSIAN
    ossimFilterResampler_CUBIC = _pyossim.ossimFilterResampler_ossimFilterResampler_CUBIC
    ossimFilterResampler_HANNING = _pyossim.ossimFilterResampler_ossimFilterResampler_HANNING
    ossimFilterResampler_HAMMING = _pyossim.ossimFilterResampler_ossimFilterResampler_HAMMING
    ossimFilterResampler_LANCZOS = _pyossim.ossimFilterResampler_ossimFilterResampler_LANCZOS
    ossimFilterResampler_MITCHELL = _pyossim.ossimFilterResampler_ossimFilterResampler_MITCHELL
    ossimFilterResampler_CATROM = _pyossim.ossimFilterResampler_ossimFilterResampler_CATROM
    ossimFilterResampler_BLACKMAN = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN
    ossimFilterResampler_BLACKMAN_SINC = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN_SINC
    ossimFilterResampler_BLACKMAN_BESSEL = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN_BESSEL
    ossimFilterResampler_QUADRATIC = _pyossim.ossimFilterResampler_ossimFilterResampler_QUADRATIC
    ossimFilterResampler_TRIANGLE = _pyossim.ossimFilterResampler_ossimFilterResampler_TRIANGLE
    ossimFilterResampler_BILINEAR = _pyossim.ossimFilterResampler_ossimFilterResampler_BILINEAR
    ossimFilterResampler_HERMITE = _pyossim.ossimFilterResampler_ossimFilterResampler_HERMITE
    ossimFilterResampler_BELL = _pyossim.ossimFilterResampler_ossimFilterResampler_BELL
    ossimFilterResampler_BSPLINE = _pyossim.ossimFilterResampler_ossimFilterResampler_BSPLINE
    def __init__(self): 
        this = _pyossim.new_ossimFilterResampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFilterResampler
    __del__ = lambda self : None;
    def resample(self, *args): return _pyossim.ossimFilterResampler_resample(self, *args)
    def setFilterType(self, *args): return _pyossim.ossimFilterResampler_setFilterType(self, *args)
    def setMinifyFilterType(self, *args): return _pyossim.ossimFilterResampler_setMinifyFilterType(self, *args)
    def setMagnifyFilterType(self, *args): return _pyossim.ossimFilterResampler_setMagnifyFilterType(self, *args)
    def getMinifyFilterTypeAsString(self): return _pyossim.ossimFilterResampler_getMinifyFilterTypeAsString(self)
    def getMagnifyFilterTypeAsString(self): return _pyossim.ossimFilterResampler_getMagnifyFilterTypeAsString(self)
    def setScaleFactor(self, *args): return _pyossim.ossimFilterResampler_setScaleFactor(self, *args)
    def setBlurFactor(self, *args): return _pyossim.ossimFilterResampler_setBlurFactor(self, *args)
    def setBoundingInputRect(self, *args): return _pyossim.ossimFilterResampler_setBoundingInputRect(self, *args)
    def getBoundingInputRect(self): return _pyossim.ossimFilterResampler_getBoundingInputRect(self)
    def getBlurFactor(self): return _pyossim.ossimFilterResampler_getBlurFactor(self)
    def getScaleFactor(self): return _pyossim.ossimFilterResampler_getScaleFactor(self)
    def saveState(self, *args): return _pyossim.ossimFilterResampler_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimFilterResampler_loadState(self, *args)
    def getKernelSupport(self, *args): return _pyossim.ossimFilterResampler_getKernelSupport(self, *args)
    def getFilterTypes(self, *args): return _pyossim.ossimFilterResampler_getFilterTypes(self, *args)
ossimFilterResampler_swigregister = _pyossim.ossimFilterResampler_swigregister
ossimFilterResampler_swigregister(ossimFilterResampler)

class ossimFilterTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilterTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilterTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFilterTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFilterTable
    __del__ = lambda self : None;
    def buildTable(self, *args): return _pyossim.ossimFilterTable_buildTable(self, *args)
    def getWidthByHeight(self): return _pyossim.ossimFilterTable_getWidthByHeight(self)
    def getXSupport(self): return _pyossim.ossimFilterTable_getXSupport(self)
    def getYSupport(self): return _pyossim.ossimFilterTable_getYSupport(self)
    def getWidth(self): return _pyossim.ossimFilterTable_getWidth(self)
    def getHeight(self): return _pyossim.ossimFilterTable_getHeight(self)
    def getClosestWeights(self, *args): return _pyossim.ossimFilterTable_getClosestWeights(self, *args)
ossimFilterTable_swigregister = _pyossim.ossimFilterTable_swigregister
ossimFilterTable_swigregister(ossimFilterTable)

class vectorOssimFileName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorOssimFileName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorOssimFileName, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorOssimFileName_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorOssimFileName___nonzero__(self)
    def __bool__(self): return _pyossim.vectorOssimFileName___bool__(self)
    def __len__(self): return _pyossim.vectorOssimFileName___len__(self)
    def pop(self): return _pyossim.vectorOssimFileName_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorOssimFileName___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorOssimFileName___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorOssimFileName___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorOssimFileName___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorOssimFileName___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorOssimFileName___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorOssimFileName_append(self, *args)
    def empty(self): return _pyossim.vectorOssimFileName_empty(self)
    def size(self): return _pyossim.vectorOssimFileName_size(self)
    def clear(self): return _pyossim.vectorOssimFileName_clear(self)
    def swap(self, *args): return _pyossim.vectorOssimFileName_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorOssimFileName_get_allocator(self)
    def begin(self): return _pyossim.vectorOssimFileName_begin(self)
    def end(self): return _pyossim.vectorOssimFileName_end(self)
    def rbegin(self): return _pyossim.vectorOssimFileName_rbegin(self)
    def rend(self): return _pyossim.vectorOssimFileName_rend(self)
    def pop_back(self): return _pyossim.vectorOssimFileName_pop_back(self)
    def erase(self, *args): return _pyossim.vectorOssimFileName_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorOssimFileName(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorOssimFileName_push_back(self, *args)
    def front(self): return _pyossim.vectorOssimFileName_front(self)
    def back(self): return _pyossim.vectorOssimFileName_back(self)
    def assign(self, *args): return _pyossim.vectorOssimFileName_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorOssimFileName_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorOssimFileName_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorOssimFileName_reserve(self, *args)
    def capacity(self): return _pyossim.vectorOssimFileName_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorOssimFileName
    __del__ = lambda self : None;
vectorOssimFileName_swigregister = _pyossim.vectorOssimFileName_swigregister
vectorOssimFileName_swigregister(vectorOssimFileName)

class ossimGeneralRasterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeneralRasterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeneralRasterInfo, name)
    __repr__ = _swig_repr
    NONE = _pyossim.ossimGeneralRasterInfo_NONE
    ZEROES_TO_MIN = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_MIN
    ZEROES_TO_NULL_EDGES_ONLY = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_NULL_EDGES_ONLY
    UNKNOWN = _pyossim.ossimGeneralRasterInfo_UNKNOWN
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeneralRasterInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeneralRasterInfo
    __del__ = lambda self : None;
    def imageRect(self): return _pyossim.ossimGeneralRasterInfo_imageRect(self)
    def validImageRect(self): return _pyossim.ossimGeneralRasterInfo_validImageRect(self)
    def rawImageRect(self): return _pyossim.ossimGeneralRasterInfo_rawImageRect(self)
    def subImageOffset(self): return _pyossim.ossimGeneralRasterInfo_subImageOffset(self)
    def headerSize(self): return _pyossim.ossimGeneralRasterInfo_headerSize(self)
    def fillToNullsMode(self): return _pyossim.ossimGeneralRasterInfo_fillToNullsMode(self)
    def setFillToNullsMode(self, *args): return _pyossim.ossimGeneralRasterInfo_setFillToNullsMode(self, *args)
    def setMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMinPixelValue(self, *args)
    def getMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMinPixelValue(self, *args)
    def setMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMaxPixelValue(self, *args)
    def getMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMaxPixelValue(self, *args)
    def setNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setNullPixelValue(self, *args)
    def getNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getNullPixelValue(self, *args)
    def setNumberOfBands(self, *args): return _pyossim.ossimGeneralRasterInfo_setNumberOfBands(self, *args)
    def pixelsToChop(self): return _pyossim.ossimGeneralRasterInfo_pixelsToChop(self)
    def numberOfBands(self): return _pyossim.ossimGeneralRasterInfo_numberOfBands(self)
    def interleaveType(self): return _pyossim.ossimGeneralRasterInfo_interleaveType(self)
    def getScalarType(self): return _pyossim.ossimGeneralRasterInfo_getScalarType(self)
    def validLines(self): return _pyossim.ossimGeneralRasterInfo_validLines(self)
    def rawLines(self): return _pyossim.ossimGeneralRasterInfo_rawLines(self)
    def bytesPerRawLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerRawLine(self)
    def bytesPerValidLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerValidLine(self)
    def validSamples(self): return _pyossim.ossimGeneralRasterInfo_validSamples(self)
    def rawSamples(self): return _pyossim.ossimGeneralRasterInfo_rawSamples(self)
    def offsetToFirstValidSample(self): return _pyossim.ossimGeneralRasterInfo_offsetToFirstValidSample(self)
    def getImageFileList(self): return _pyossim.ossimGeneralRasterInfo_getImageFileList(self)
    def setImageFileList(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageFileList(self, *args)
    def setHeaderSize(self, *args): return _pyossim.ossimGeneralRasterInfo_setHeaderSize(self, *args)
    def setInterleaveType(self, *args): return _pyossim.ossimGeneralRasterInfo_setInterleaveType(self, *args)
    def ossimGeneralRasterInfo_print(self, *args): return _pyossim.ossimGeneralRasterInfo_ossimGeneralRasterInfo_print(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageRect(self, *args)
    def setValidImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setValidImageRect(self, *args)
    def setRawImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setRawImageRect(self, *args)
    def setSubImageOffset(self, *args): return _pyossim.ossimGeneralRasterInfo_setSubImageOffset(self, *args)
    def bytesPerPixel(self, *args): return _pyossim.ossimGeneralRasterInfo_bytesPerPixel(self, *args)
    def getImageDataByteOrder(self): return _pyossim.ossimGeneralRasterInfo_getImageDataByteOrder(self)
    def setImageDataByteOrder(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageDataByteOrder(self, *args)
    def saveState(self, *args): return _pyossim.ossimGeneralRasterInfo_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeneralRasterInfo_loadState(self, *args)
ossimGeneralRasterInfo_swigregister = _pyossim.ossimGeneralRasterInfo_swigregister
ossimGeneralRasterInfo_swigregister(ossimGeneralRasterInfo)

class ossimGeoAnnotationMultiEllipseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoAnnotationMultiEllipseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoAnnotationMultiEllipseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoAnnotationMultiEllipseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimGeoAnnotationMultiEllipseObject_dup(self)
    def getNewClippedObject(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_getNewClippedObject(self, *args)
    def transform(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_transform(self, *args)
    def applyScale(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_applyScale(self, *args)
    def draw(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_draw(self, *args)
    def intersects(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_intersects(self, *args)
    def addPoint(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_addPoint(self, *args)
    def setColor(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setColor(self, *args)
    def setThickness(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setThickness(self, *args)
    def setPoint(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setPoint(self, *args)
    def setWidthHeight(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setWidthHeight(self, *args)
    def resize(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_resize(self, *args)
    def setFillFlag(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setFillFlag(self, *args)
    def ossimGeoAnnotationMultiEllipseObject_print(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print(self, *args)
    def getBoundingRect(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_getBoundingRect(self, *args)
    def computeBoundingRect(self): return _pyossim.ossimGeoAnnotationMultiEllipseObject_computeBoundingRect(self)
    __swig_destroy__ = _pyossim.delete_ossimGeoAnnotationMultiEllipseObject
    __del__ = lambda self : None;
ossimGeoAnnotationMultiEllipseObject_swigregister = _pyossim.ossimGeoAnnotationMultiEllipseObject_swigregister
ossimGeoAnnotationMultiEllipseObject_swigregister(ossimGeoAnnotationMultiEllipseObject)

class ossimGridRemapEngineFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGridRemapEngineFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGridRemapEngineFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _pyossim.ossimGridRemapEngineFactory_create
    if _newclass:create = staticmethod(_pyossim.ossimGridRemapEngineFactory_create)
    __swig_destroy__ = _pyossim.delete_ossimGridRemapEngineFactory
    __del__ = lambda self : None;
ossimGridRemapEngineFactory_swigregister = _pyossim.ossimGridRemapEngineFactory_swigregister
ossimGridRemapEngineFactory_swigregister(ossimGridRemapEngineFactory)

def ossimGridRemapEngineFactory_create(*args):
  return _pyossim.ossimGridRemapEngineFactory_create(*args)
ossimGridRemapEngineFactory_create = _pyossim.ossimGridRemapEngineFactory_create

class ossimHistoMatchRemapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimHistoMatchRemapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimHistoMatchRemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimHistoMatchRemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimHistoMatchRemapper_getTile(self, *args)
    def initialize(self): return _pyossim.ossimHistoMatchRemapper_initialize(self)
    def getInputMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getInputMeanValues(self)
    def getInputSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getInputSigmaValues(self)
    def getTargetMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetMeanValues(self)
    def getTargetSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetSigmaValues(self)
    def setInputMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputMeanValues(self, *args)
    def setInputSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputSigmaValues(self, *args)
    def setTargetMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetMeanValues(self, *args)
    def setTargetSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetSigmaValues(self, *args)
    def loadState(self, *args): return _pyossim.ossimHistoMatchRemapper_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimHistoMatchRemapper_saveState(self, *args)
ossimHistoMatchRemapper_swigregister = _pyossim.ossimHistoMatchRemapper_swigregister
ossimHistoMatchRemapper_swigregister(ossimHistoMatchRemapper)

class ossimIgenGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIgenGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIgenGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, input = None, output = None, view = None): 
        this = _pyossim.new_ossimIgenGenerator(input, output, view)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIgenGenerator
    __del__ = lambda self : None;
    def setInput(self, *args): return _pyossim.ossimIgenGenerator_setInput(self, *args)
    def generateSpecList(self, outputToFileFlag = False): return _pyossim.ossimIgenGenerator_generateSpecList(self, outputToFileFlag)
    def getImageFilenamesFromSpecList(self, *args): return _pyossim.ossimIgenGenerator_getImageFilenamesFromSpecList(self, *args)
    def getBoundingGround(self): return _pyossim.ossimIgenGenerator_getBoundingGround(self)
    def executeSpecList(self): return _pyossim.ossimIgenGenerator_executeSpecList(self)
    def setIteratorsToStart(self): return _pyossim.ossimIgenGenerator_setIteratorsToStart(self)
    def nextSpecFile(self, *args): return _pyossim.ossimIgenGenerator_nextSpecFile(self, *args)
    def getSpecs(self, *args): return _pyossim.ossimIgenGenerator_getSpecs(self, *args)
    def getNumberOfSpecFiles(self): return _pyossim.ossimIgenGenerator_getNumberOfSpecFiles(self)
    def getSpecFilename(self, specFileIndex = 0): return _pyossim.ossimIgenGenerator_getSpecFilename(self, specFileIndex)
    def buildExe(self, i = 0): return _pyossim.ossimIgenGenerator_buildExe(self, i)
    def getSpec(self, *args): return _pyossim.ossimIgenGenerator_getSpec(self, *args)
    def getInput(self, *args): return _pyossim.ossimIgenGenerator_getInput(self, *args)
    def getOutput(self, *args): return _pyossim.ossimIgenGenerator_getOutput(self, *args)
    def getView(self, *args): return _pyossim.ossimIgenGenerator_getView(self, *args)
    def setView(self, *args): return _pyossim.ossimIgenGenerator_setView(self, *args)
    def setOutput(self, *args): return _pyossim.ossimIgenGenerator_setOutput(self, *args)
    def setSpecFileLocation(self, *args): return _pyossim.ossimIgenGenerator_setSpecFileLocation(self, *args)
    def getSpecFileLocation(self): return _pyossim.ossimIgenGenerator_getSpecFileLocation(self)
    def setIgenExecutable(self, *args): return _pyossim.ossimIgenGenerator_setIgenExecutable(self, *args)
    def getIgenExecutable(self): return _pyossim.ossimIgenGenerator_getIgenExecutable(self)
    def setOutputPolygon(self, *args): return _pyossim.ossimIgenGenerator_setOutputPolygon(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimIgenGenerator_setPixelType(self, *args)
    def getOutputGeoPolygon(self, *args): return _pyossim.ossimIgenGenerator_getOutputGeoPolygon(self, *args)
    def setTilingFlag(self, *args): return _pyossim.ossimIgenGenerator_setTilingFlag(self, *args)
    def setTileSpacing(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacing(self, *args)
    def setTilePadding(self, *args): return _pyossim.ossimIgenGenerator_setTilePadding(self, *args)
    def setTileSpacingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacingUnits(self, *args)
    def setTilePaddingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTilePaddingUnits(self, *args)
    def getTilingFlag(self): return _pyossim.ossimIgenGenerator_getTilingFlag(self)
    def getTileSpacing(self): return _pyossim.ossimIgenGenerator_getTileSpacing(self)
    def getTilePadding(self): return _pyossim.ossimIgenGenerator_getTilePadding(self)
    def getTileSpacingUnits(self): return _pyossim.ossimIgenGenerator_getTileSpacingUnits(self)
    def getTilePaddingUnits(self): return _pyossim.ossimIgenGenerator_getTilePaddingUnits(self)
    def getPixelType(self): return _pyossim.ossimIgenGenerator_getPixelType(self)
    def setTileNamingConvention(self, *args): return _pyossim.ossimIgenGenerator_setTileNamingConvention(self, *args)
    def getTileNamingConvention(self): return _pyossim.ossimIgenGenerator_getTileNamingConvention(self)
    def getInputBoundingRect(self): return _pyossim.ossimIgenGenerator_getInputBoundingRect(self)
    def createProductProjection(self): return _pyossim.ossimIgenGenerator_createProductProjection(self)
    def createOutput(self): return _pyossim.ossimIgenGenerator_createOutput(self)
    def createInput(self): return _pyossim.ossimIgenGenerator_createInput(self)
ossimIgenGenerator_swigregister = _pyossim.ossimIgenGenerator_swigregister
ossimIgenGenerator_swigregister(ossimIgenGenerator)

class ossimImageChain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageChain, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimImageChain()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageChain
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyossim.ossimImageChain___getitem__(self, *args)
    def getConnectableObject(self, *args): return _pyossim.ossimImageChain_getConnectableObject(self, *args)
    def indexOf(self, *args): return _pyossim.ossimImageChain_indexOf(self, *args)
    def getFirstSource(self): return _pyossim.ossimImageChain_getFirstSource(self)
    def getFirstObject(self): return _pyossim.ossimImageChain_getFirstObject(self)
    def getLastSource(self): return _pyossim.ossimImageChain_getLastSource(self)
    def getLastObject(self): return _pyossim.ossimImageChain_getLastObject(self)
    def addFirst(self, *args): return _pyossim.ossimImageChain_addFirst(self, *args)
    def addLast(self, *args): return _pyossim.ossimImageChain_addLast(self, *args)
    def deleteFirst(self): return _pyossim.ossimImageChain_deleteFirst(self)
    def deleteLast(self): return _pyossim.ossimImageChain_deleteLast(self)
    def insertRight(self, *args): return _pyossim.ossimImageChain_insertRight(self, *args)
    def insertLeft(self, *args): return _pyossim.ossimImageChain_insertLeft(self, *args)
    def replace(self, *args): return _pyossim.ossimImageChain_replace(self, *args)
    def add(self, *args): return _pyossim.ossimImageChain_add(self, *args)
    def getTile(self, *args): return _pyossim.ossimImageChain_getTile(self, *args)
    def getNumberOfInputBands(self): return _pyossim.ossimImageChain_getNumberOfInputBands(self)
    def getOutputScalarType(self): return _pyossim.ossimImageChain_getOutputScalarType(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageChain_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageChain_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageChain_getMaxPixelValue(self, band)
    def getOutputBandList(self, *args): return _pyossim.ossimImageChain_getOutputBandList(self, *args)
    def getTileWidth(self): return _pyossim.ossimImageChain_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimImageChain_getTileHeight(self)
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimImageChain_getBoundingRect(self, resLevel)
    def getValidImageVertices(self, *args): return _pyossim.ossimImageChain_getValidImageVertices(self, *args)
    def getImageGeometry(self): return _pyossim.ossimImageChain_getImageGeometry(self)
    def getDecimationFactor(self, *args): return _pyossim.ossimImageChain_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimImageChain_getDecimationFactors(self, *args)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimImageChain_getNumberOfDecimationLevels(self)
    def saveState(self, *args): return _pyossim.ossimImageChain_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageChain_loadState(self, *args)
    def initialize(self): return _pyossim.ossimImageChain_initialize(self)
    def enableSource(self): return _pyossim.ossimImageChain_enableSource(self)
    def disableSource(self): return _pyossim.ossimImageChain_disableSource(self)
    def canConnectMyInputTo(self, *args): return _pyossim.ossimImageChain_canConnectMyInputTo(self, *args)
    def makeUniqueIds(self): return _pyossim.ossimImageChain_makeUniqueIds(self)
    def getNumberOfObjects(self, recurse = True): return _pyossim.ossimImageChain_getNumberOfObjects(self, recurse)
    def getNumberOfSources(self): return _pyossim.ossimImageChain_getNumberOfSources(self)
    def addChild(self, *args): return _pyossim.ossimImageChain_addChild(self, *args)
    def removeChild(self, *args): return _pyossim.ossimImageChain_removeChild(self, *args)
    def getChildren(self, *args): return _pyossim.ossimImageChain_getChildren(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageChain_disconnectInputEvent(self, *args)
    def disconnectOutputEvent(self, *args): return _pyossim.ossimImageChain_disconnectOutputEvent(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageChain_connectInputEvent(self, *args)
    def connectOutputEvent(self, *args): return _pyossim.ossimImageChain_connectOutputEvent(self, *args)
    def objectDestructingEvent(self, *args): return _pyossim.ossimImageChain_objectDestructingEvent(self, *args)
    def propagateEventToOutputs(self, *args): return _pyossim.ossimImageChain_propagateEventToOutputs(self, *args)
    def propagateEventToInputs(self, *args): return _pyossim.ossimImageChain_propagateEventToInputs(self, *args)
    def accept(self, *args): return _pyossim.ossimImageChain_accept(self, *args)
ossimImageChain_swigregister = _pyossim.ossimImageChain_swigregister
ossimImageChain_swigregister(ossimImageChain)

class ossimImageDataHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageDataHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageDataHelper, name)
    __repr__ = _swig_repr
    def __init__(self, imageData = None): 
        this = _pyossim.new_ossimImageDataHelper(imageData)
        try: self.this.append(this)
        except: self.this = this
    def setImageData(self, *args): return _pyossim.ossimImageDataHelper_setImageData(self, *args)
    def fill(self, *args): return _pyossim.ossimImageDataHelper_fill(self, *args)
    def copyInputToThis(self, *args): return _pyossim.ossimImageDataHelper_copyInputToThis(self, *args)
    __swig_setmethods__["theImageData"] = _pyossim.ossimImageDataHelper_theImageData_set
    __swig_getmethods__["theImageData"] = _pyossim.ossimImageDataHelper_theImageData_get
    if _newclass:theImageData = _swig_property(_pyossim.ossimImageDataHelper_theImageData_get, _pyossim.ossimImageDataHelper_theImageData_set)
    __swig_destroy__ = _pyossim.delete_ossimImageDataHelper
    __del__ = lambda self : None;
ossimImageDataHelper_swigregister = _pyossim.ossimImageDataHelper_swigregister
ossimImageDataHelper_swigregister(ossimImageDataHelper)

ossimImageGeometryFactory_HEADER = _pyossim.ossimImageGeometryFactory_HEADER
class ossimImageGeometryFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometryFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometryFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageGeometryFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageGeometryFactory_instance)
    def createGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_createGeometry(self, *args)
    def extendGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_extendGeometry(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageGeometryFactory_getTypeNameList(self, *args)
    def createTransform(self, *args): return _pyossim.ossimImageGeometryFactory_createTransform(self, *args)
    def createProjection(self, *args): return _pyossim.ossimImageGeometryFactory_createProjection(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageGeometryFactory
    __del__ = lambda self : None;
ossimImageGeometryFactory_swigregister = _pyossim.ossimImageGeometryFactory_swigregister
ossimImageGeometryFactory_swigregister(ossimImageGeometryFactory)

def ossimImageGeometryFactory_instance():
  return _pyossim.ossimImageGeometryFactory_instance()
ossimImageGeometryFactory_instance = _pyossim.ossimImageGeometryFactory_instance

class ossimImageMetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageMetaData
    __del__ = lambda self : None;
    def clear(self): return _pyossim.ossimImageMetaData_clear(self)
    def clearBandInfo(self): return _pyossim.ossimImageMetaData_clearBandInfo(self)
    def setDefaultsForArrays(self): return _pyossim.ossimImageMetaData_setDefaultsForArrays(self)
    def setNumberOfBands(self, *args): return _pyossim.ossimImageMetaData_setNumberOfBands(self, *args)
    def getNumberOfBands(self): return _pyossim.ossimImageMetaData_getNumberOfBands(self)
    def setScalarType(self, *args): return _pyossim.ossimImageMetaData_setScalarType(self, *args)
    def getScalarType(self): return _pyossim.ossimImageMetaData_getScalarType(self)
    def getMinPix(self, *args): return _pyossim.ossimImageMetaData_getMinPix(self, *args)
    def setMinPix(self, *args): return _pyossim.ossimImageMetaData_setMinPix(self, *args)
    def setMaxPix(self, *args): return _pyossim.ossimImageMetaData_setMaxPix(self, *args)
    def setNullPix(self, *args): return _pyossim.ossimImageMetaData_setNullPix(self, *args)
    def getMaxPix(self, *args): return _pyossim.ossimImageMetaData_getMaxPix(self, *args)
    def getNullPix(self, *args): return _pyossim.ossimImageMetaData_getNullPix(self, *args)
    def getMinPixelArray(self): return _pyossim.ossimImageMetaData_getMinPixelArray(self)
    def getMaxPixelArray(self): return _pyossim.ossimImageMetaData_getMaxPixelArray(self)
    def getNullPixelArray(self): return _pyossim.ossimImageMetaData_getNullPixelArray(self)
    def setMinValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMinValuesValid(self, *args)
    def setMaxValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMaxValuesValid(self, *args)
    def setNullValuesValid(self, *args): return _pyossim.ossimImageMetaData_setNullValuesValid(self, *args)
    def getMinValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMinValuesValidFlag(self)
    def getMaxValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMaxValuesValidFlag(self)
    def getNullValuesValidFlag(self): return _pyossim.ossimImageMetaData_getNullValuesValidFlag(self)
    def __set__(self, *args): return _pyossim.ossimImageMetaData___set__(self, *args)
    def isValid(self): return _pyossim.ossimImageMetaData_isValid(self)
    def assign(self, *args): return _pyossim.ossimImageMetaData_assign(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMetaData_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageMetaData_saveState(self, *args)
ossimImageMetaData_swigregister = _pyossim.ossimImageMetaData_swigregister
ossimImageMetaData_swigregister(ossimImageMetaData)

class ossimImageMetaDataWriterRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMetaDataWriterRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMetaDataWriterRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageMetaDataWriterRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageMetaDataWriterRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageMetaDataWriterRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_unregisterFactory(self, *args)
    def findFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_findFactory(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_createObject(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_createWriter(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_getTypeNameList(self, *args)
    def getMetadatatypeList(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_getMetadatatypeList(self, *args)
ossimImageMetaDataWriterRegistry_swigregister = _pyossim.ossimImageMetaDataWriterRegistry_swigregister
ossimImageMetaDataWriterRegistry_swigregister(ossimImageMetaDataWriterRegistry)

def ossimImageMetaDataWriterRegistry_instance():
  return _pyossim.ossimImageMetaDataWriterRegistry_instance()
ossimImageMetaDataWriterRegistry_instance = _pyossim.ossimImageMetaDataWriterRegistry_instance


def ossimImageMetaDataWriterRegistryGetInstance():
  return _pyossim.ossimImageMetaDataWriterRegistryGetInstance()
ossimImageMetaDataWriterRegistryGetInstance = _pyossim.ossimImageMetaDataWriterRegistryGetInstance
class ossimImageMosaic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMosaic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMosaic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMosaic(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimImageMosaic_getTile(self, *args)
    def initialize(self): return _pyossim.ossimImageMosaic_initialize(self)
    def saveState(self, *args): return _pyossim.ossimImageMosaic_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMosaic_loadState(self, *args)
ossimImageMosaic_swigregister = _pyossim.ossimImageMosaic_swigregister
ossimImageMosaic_swigregister(ossimImageMosaic)

class ossimImageSourceFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSourceFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSourceFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def createImageSource(self, *args): return _pyossim.ossimImageSourceFactoryBase_createImageSource(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageSourceFactoryBase
    __del__ = lambda self : None;
ossimImageSourceFactoryBase_swigregister = _pyossim.ossimImageSourceFactoryBase_swigregister
ossimImageSourceFactoryBase_swigregister(ossimImageSourceFactoryBase)

class ossimImageWriterFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriterFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriterFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageWriterFactory
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageWriterFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageWriterFactory_instance)
    def createWriterFromExtension(self, *args): return _pyossim.ossimImageWriterFactory_createWriterFromExtension(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageWriterFactory_createWriter(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageWriterFactory_createObject(self, *args)
    def getExtensions(self, *args): return _pyossim.ossimImageWriterFactory_getExtensions(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageWriterFactory_getTypeNameList(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageWriterFactory_getImageTypeList(self, *args)
    def getImageFileWritersBySuffix(self, *args): return _pyossim.ossimImageWriterFactory_getImageFileWritersBySuffix(self, *args)
    def getImageFileWritersByMimeType(self, *args): return _pyossim.ossimImageWriterFactory_getImageFileWritersByMimeType(self, *args)
ossimImageWriterFactory_swigregister = _pyossim.ossimImageWriterFactory_swigregister
ossimImageWriterFactory_swigregister(ossimImageWriterFactory)

def ossimImageWriterFactory_instance():
  return _pyossim.ossimImageWriterFactory_instance()
ossimImageWriterFactory_instance = _pyossim.ossimImageWriterFactory_instance

class ossimImageWriterFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriterFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriterFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageWriterFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageWriterFactoryRegistry_instance)
    def createWriterFromExtension(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriterFromExtension(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriter(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getTypeNameList(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageTypeList(self, *args)
    def getImageFileWritersBySuffix(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix(self, *args)
    def getImageFileWritersByMimeType(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType(self, *args)
    def printImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printImageTypeList(self, *args)
    def printWriterProps(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printWriterProps(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageWriterFactoryRegistry
    __del__ = lambda self : None;
ossimImageWriterFactoryRegistry_swigregister = _pyossim.ossimImageWriterFactoryRegistry_swigregister
ossimImageWriterFactoryRegistry_swigregister(ossimImageWriterFactoryRegistry)

def ossimImageWriterFactoryRegistry_instance():
  return _pyossim.ossimImageWriterFactoryRegistry_instance()
ossimImageWriterFactoryRegistry_instance = _pyossim.ossimImageWriterFactoryRegistry_instance


def ossimImageWriterFactoryRegistryGetInstance():
  return _pyossim.ossimImageWriterFactoryRegistryGetInstance()
ossimImageWriterFactoryRegistryGetInstance = _pyossim.ossimImageWriterFactoryRegistryGetInstance
class ossimNormalizedRemapTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedRemapTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedRemapTable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimNormalizedRemapTable
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyossim.ossimNormalizedRemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedRemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedRemapTable_pixFromNorm(self, *args)
    def getEntries(self): return _pyossim.ossimNormalizedRemapTable_getEntries(self)
    def getNormalizer(self): return _pyossim.ossimNormalizedRemapTable_getNormalizer(self)
ossimNormalizedRemapTable_swigregister = _pyossim.ossimNormalizedRemapTable_swigregister
ossimNormalizedRemapTable_swigregister(ossimNormalizedRemapTable)

class ossimNormalizedS16RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedS16RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedS16RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedS16RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedS16RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedS16RemapTable_TABLE_ENTRIES
    OFFSET_TO_ZERO = _pyossim.ossimNormalizedS16RemapTable_OFFSET_TO_ZERO
    NULL_PIX = _pyossim.ossimNormalizedS16RemapTable_NULL_PIX
    MIN_PIX = _pyossim.ossimNormalizedS16RemapTable_MIN_PIX
    def getEntries(self): return _pyossim.ossimNormalizedS16RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedS16RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedS16RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedS16RemapTable_pixFromNorm(self, *args)
ossimNormalizedS16RemapTable_swigregister = _pyossim.ossimNormalizedS16RemapTable_swigregister
ossimNormalizedS16RemapTable_swigregister(ossimNormalizedS16RemapTable)

class ossimNormalizedU11RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU11RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU11RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU11RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU11RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU11RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU11RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU11RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU11RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU11RemapTable_pixFromNorm(self, *args)
ossimNormalizedU11RemapTable_swigregister = _pyossim.ossimNormalizedU11RemapTable_swigregister
ossimNormalizedU11RemapTable_swigregister(ossimNormalizedU11RemapTable)

class ossimNormalizedU16RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU16RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU16RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU16RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU16RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU16RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU16RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU16RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU16RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU16RemapTable_pixFromNorm(self, *args)
ossimNormalizedU16RemapTable_swigregister = _pyossim.ossimNormalizedU16RemapTable_swigregister
ossimNormalizedU16RemapTable_swigregister(ossimNormalizedU16RemapTable)

class ossimNormalizedU8RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU8RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU8RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU8RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU8RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU8RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU8RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU8RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU8RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU8RemapTable_pixFromNorm(self, *args)
ossimNormalizedU8RemapTable_swigregister = _pyossim.ossimNormalizedU8RemapTable_swigregister
ossimNormalizedU8RemapTable_swigregister(ossimNormalizedU8RemapTable)

class ossimOverviewBuilderFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactoryBase
    __del__ = lambda self : None;
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_getTypeNameList(self, *args)
    def createObject(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_createObject(self, *args)
ossimOverviewBuilderFactoryBase_swigregister = _pyossim.ossimOverviewBuilderFactoryBase_swigregister
ossimOverviewBuilderFactoryBase_swigregister(ossimOverviewBuilderFactoryBase)

class ossimOverviewBuilderFactory(ossimOverviewBuilderFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimOverviewBuilderFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimOverviewBuilderFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimOverviewBuilderFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimOverviewBuilderFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactory
    __del__ = lambda self : None;
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactory_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactory_getTypeNameList(self, *args)
ossimOverviewBuilderFactory_swigregister = _pyossim.ossimOverviewBuilderFactory_swigregister
ossimOverviewBuilderFactory_swigregister(ossimOverviewBuilderFactory)

def ossimOverviewBuilderFactory_instance():
  return _pyossim.ossimOverviewBuilderFactory_instance()
ossimOverviewBuilderFactory_instance = _pyossim.ossimOverviewBuilderFactory_instance

class ossimOverviewBuilderFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimOverviewBuilderFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimOverviewBuilderFactoryRegistry_instance)
    def createObject(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_createObject(self, *args)
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactoryRegistry
    __del__ = lambda self : None;
ossimOverviewBuilderFactoryRegistry_swigregister = _pyossim.ossimOverviewBuilderFactoryRegistry_swigregister
ossimOverviewBuilderFactoryRegistry_swigregister(ossimOverviewBuilderFactoryRegistry)

def ossimOverviewBuilderFactoryRegistry_instance():
  return _pyossim.ossimOverviewBuilderFactoryRegistry_instance()
ossimOverviewBuilderFactoryRegistry_instance = _pyossim.ossimOverviewBuilderFactoryRegistry_instance

ossimOverviewSequencer_HEADER = _pyossim.ossimOverviewSequencer_HEADER
class ossimOverviewSequencer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewSequencer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewSequencer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimOverviewSequencer()
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfTiles(self): return _pyossim.ossimOverviewSequencer_getNumberOfTiles(self)
    def getNumberOfTilesHorizontal(self): return _pyossim.ossimOverviewSequencer_getNumberOfTilesHorizontal(self)
    def getNumberOfTilesVertical(self): return _pyossim.ossimOverviewSequencer_getNumberOfTilesVertical(self)
    def getOutputImageRectangle(self, *args): return _pyossim.ossimOverviewSequencer_getOutputImageRectangle(self, *args)
    def setImageHandler(self, *args): return _pyossim.ossimOverviewSequencer_setImageHandler(self, *args)
    def setBitMaskObjects(self, *args): return _pyossim.ossimOverviewSequencer_setBitMaskObjects(self, *args)
    def setSourceLevel(self, *args): return _pyossim.ossimOverviewSequencer_setSourceLevel(self, *args)
    def getHistogramMode(self): return _pyossim.ossimOverviewSequencer_getHistogramMode(self)
    def setHistogramMode(self, *args): return _pyossim.ossimOverviewSequencer_setHistogramMode(self, *args)
    def writeHistogram(self, *args): return _pyossim.ossimOverviewSequencer_writeHistogram(self, *args)
    def initialize(self): return _pyossim.ossimOverviewSequencer_initialize(self)
    def setToStartOfSequence(self): return _pyossim.ossimOverviewSequencer_setToStartOfSequence(self)
    def getNextTile(self): return _pyossim.ossimOverviewSequencer_getNextTile(self)
    def slaveProcessTiles(self): return _pyossim.ossimOverviewSequencer_slaveProcessTiles(self)
    def isMaster(self): return _pyossim.ossimOverviewSequencer_isMaster(self)
    def getTileSize(self): return _pyossim.ossimOverviewSequencer_getTileSize(self)
    def setTileSize(self, *args): return _pyossim.ossimOverviewSequencer_setTileSize(self, *args)
    def setResampleType(self, *args): return _pyossim.ossimOverviewSequencer_setResampleType(self, *args)
    def setScanForMinMax(self, *args): return _pyossim.ossimOverviewSequencer_setScanForMinMax(self, *args)
    def getScanForMinMax(self): return _pyossim.ossimOverviewSequencer_getScanForMinMax(self)
    def setScanForMinMaxNull(self, *args): return _pyossim.ossimOverviewSequencer_setScanForMinMaxNull(self, *args)
    def getScanForMinMaxNull(self): return _pyossim.ossimOverviewSequencer_getScanForMinMaxNull(self)
    def writeOmdFile(self, *args): return _pyossim.ossimOverviewSequencer_writeOmdFile(self, *args)
ossimOverviewSequencer_swigregister = _pyossim.ossimOverviewSequencer_swigregister
ossimOverviewSequencer_swigregister(ossimOverviewSequencer)

class ossimEpsgProjectionDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEpsgProjectionDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEpsgProjectionDatabase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEpsgProjectionDatabase_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEpsgProjectionDatabase_instance)
    __swig_destroy__ = _pyossim.delete_ossimEpsgProjectionDatabase
    __del__ = lambda self : None;
    def findProjection(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjection(self, *args)
    def findProjectionCode(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjectionCode(self, *args)
    def findProjectionName(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjectionName(self, *args)
    def getProjectionsList(self, *args): return _pyossim.ossimEpsgProjectionDatabase_getProjectionsList(self, *args)
    def numRecords(self): return _pyossim.ossimEpsgProjectionDatabase_numRecords(self)
ossimEpsgProjectionDatabase_swigregister = _pyossim.ossimEpsgProjectionDatabase_swigregister
ossimEpsgProjectionDatabase_swigregister(ossimEpsgProjectionDatabase)

def ossimEpsgProjectionDatabase_instance():
  return _pyossim.ossimEpsgProjectionDatabase_instance()
ossimEpsgProjectionDatabase_instance = _pyossim.ossimEpsgProjectionDatabase_instance

class ossimEpsgProjectionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEpsgProjectionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEpsgProjectionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEpsgProjectionFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEpsgProjectionFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimEpsgProjectionFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimEpsgProjectionFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimEpsgProjectionFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEpsgProjectionFactory
    __del__ = lambda self : None;
ossimEpsgProjectionFactory_swigregister = _pyossim.ossimEpsgProjectionFactory_swigregister
ossimEpsgProjectionFactory_swigregister(ossimEpsgProjectionFactory)

def ossimEpsgProjectionFactory_instance():
  return _pyossim.ossimEpsgProjectionFactory_instance()
ossimEpsgProjectionFactory_instance = _pyossim.ossimEpsgProjectionFactory_instance

class ossimMapProjectionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMapProjectionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMapProjectionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimMapProjectionFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimMapProjectionFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimMapProjectionFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimMapProjectionFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimMapProjectionFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimMapProjectionFactory
    __del__ = lambda self : None;
ossimMapProjectionFactory_swigregister = _pyossim.ossimMapProjectionFactory_swigregister
ossimMapProjectionFactory_swigregister(ossimMapProjectionFactory)

def ossimMapProjectionFactory_instance():
  return _pyossim.ossimMapProjectionFactory_instance()
ossimMapProjectionFactory_instance = _pyossim.ossimMapProjectionFactory_instance

class ossimMapProjectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMapProjectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMapProjectionInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimMapProjectionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimMapProjectionInfo
    __del__ = lambda self : None;
    def errorStatus(self): return _pyossim.ossimMapProjectionInfo_errorStatus(self)
    def getGeom(self, *args): return _pyossim.ossimMapProjectionInfo_getGeom(self, *args)
    def getMetersPerPixel(self): return _pyossim.ossimMapProjectionInfo_getMetersPerPixel(self)
    def getUsSurveyFeetPerPixel(self): return _pyossim.ossimMapProjectionInfo_getUsSurveyFeetPerPixel(self)
    def getDecimalDegreesPerPixel(self): return _pyossim.ossimMapProjectionInfo_getDecimalDegreesPerPixel(self)
    def ulEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPt(self)
    def urEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPt(self)
    def lrEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPt(self)
    def llEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPt(self)
    def ulEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPtInFt(self)
    def urEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPtInFt(self)
    def lrEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPtInFt(self)
    def llEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPtInFt(self)
    def ulGroundPt(self): return _pyossim.ossimMapProjectionInfo_ulGroundPt(self)
    def urGroundPt(self): return _pyossim.ossimMapProjectionInfo_urGroundPt(self)
    def lrGroundPt(self): return _pyossim.ossimMapProjectionInfo_lrGroundPt(self)
    def llGroundPt(self): return _pyossim.ossimMapProjectionInfo_llGroundPt(self)
    def centerGroundPt(self): return _pyossim.ossimMapProjectionInfo_centerGroundPt(self)
    def centerEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_centerEastingNorthingPt(self)
    def linesPerImage(self): return _pyossim.ossimMapProjectionInfo_linesPerImage(self)
    def pixelsPerLine(self): return _pyossim.ossimMapProjectionInfo_pixelsPerLine(self)
    def ossimMapProjectionInfo_print(self, *args): return _pyossim.ossimMapProjectionInfo_ossimMapProjectionInfo_print(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimMapProjectionInfo_setPixelType(self, *args)
    def getPixelType(self): return _pyossim.ossimMapProjectionInfo_getPixelType(self)
    def setOutputFeetFlag(self, *args): return _pyossim.ossimMapProjectionInfo_setOutputFeetFlag(self, *args)
    def unitsInFeet(self): return _pyossim.ossimMapProjectionInfo_unitsInFeet(self)
    def getImageInfoString(self): return _pyossim.ossimMapProjectionInfo_getImageInfoString(self)
    def setImageInfoString(self, *args): return _pyossim.ossimMapProjectionInfo_setImageInfoString(self, *args)
    def getProjection(self): return _pyossim.ossimMapProjectionInfo_getProjection(self)
    __swig_setmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set
    __swig_getmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get
    if _newclass:README_IMAGE_STRING_KW = _swig_property(_pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get, _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set)
    __swig_setmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set
    __swig_getmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get
    if _newclass:PIXEL_TYPE_KW = _swig_property(_pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get, _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set)
    __swig_setmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set
    __swig_getmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get
    if _newclass:OUTPUT_US_FT_INFO_KW = _swig_property(_pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get, _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set)
    def loadState(self, *args): return _pyossim.ossimMapProjectionInfo_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimMapProjectionInfo_saveState(self, *args)
ossimMapProjectionInfo_swigregister = _pyossim.ossimMapProjectionInfo_swigregister
ossimMapProjectionInfo_swigregister(ossimMapProjectionInfo)

ossimNitfProjectionFactory_HEADER = _pyossim.ossimNitfProjectionFactory_HEADER
class ossimNitfProjectionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNitfProjectionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNitfProjectionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimNitfProjectionFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimNitfProjectionFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimNitfProjectionFactory
    __del__ = lambda self : None;
    def createProjection(self, *args): return _pyossim.ossimNitfProjectionFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimNitfProjectionFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimNitfProjectionFactory_getTypeNameList(self, *args)
ossimNitfProjectionFactory_swigregister = _pyossim.ossimNitfProjectionFactory_swigregister
ossimNitfProjectionFactory_swigregister(ossimNitfProjectionFactory)

def ossimNitfProjectionFactory_instance():
  return _pyossim.ossimNitfProjectionFactory_instance()
ossimNitfProjectionFactory_instance = _pyossim.ossimNitfProjectionFactory_instance

ONE_SIGMA = _pyossim.ONE_SIGMA
P50 = _pyossim.P50
P90 = _pyossim.P90
P95 = _pyossim.P95
NUM_PROB_LEVELS = _pyossim.NUM_PROB_LEVELS
class pqeErrorEllipse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pqeErrorEllipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pqeErrorEllipse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theSemiMinorAxis"] = _pyossim.pqeErrorEllipse_theSemiMinorAxis_set
    __swig_getmethods__["theSemiMinorAxis"] = _pyossim.pqeErrorEllipse_theSemiMinorAxis_get
    if _newclass:theSemiMinorAxis = _swig_property(_pyossim.pqeErrorEllipse_theSemiMinorAxis_get, _pyossim.pqeErrorEllipse_theSemiMinorAxis_set)
    __swig_setmethods__["theSemiMajorAxis"] = _pyossim.pqeErrorEllipse_theSemiMajorAxis_set
    __swig_getmethods__["theSemiMajorAxis"] = _pyossim.pqeErrorEllipse_theSemiMajorAxis_get
    if _newclass:theSemiMajorAxis = _swig_property(_pyossim.pqeErrorEllipse_theSemiMajorAxis_get, _pyossim.pqeErrorEllipse_theSemiMajorAxis_set)
    __swig_setmethods__["theAzimAngle"] = _pyossim.pqeErrorEllipse_theAzimAngle_set
    __swig_getmethods__["theAzimAngle"] = _pyossim.pqeErrorEllipse_theAzimAngle_get
    if _newclass:theAzimAngle = _swig_property(_pyossim.pqeErrorEllipse_theAzimAngle_get, _pyossim.pqeErrorEllipse_theAzimAngle_set)
    __swig_setmethods__["theCenter"] = _pyossim.pqeErrorEllipse_theCenter_set
    __swig_getmethods__["theCenter"] = _pyossim.pqeErrorEllipse_theCenter_get
    if _newclass:theCenter = _swig_property(_pyossim.pqeErrorEllipse_theCenter_get, _pyossim.pqeErrorEllipse_theCenter_set)
    def __init__(self): 
        this = _pyossim.new_pqeErrorEllipse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_pqeErrorEllipse
    __del__ = lambda self : None;
pqeErrorEllipse_swigregister = _pyossim.pqeErrorEllipse_swigregister
pqeErrorEllipse_swigregister(pqeErrorEllipse)

class pqeRPCModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pqeRPCModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pqeRPCModel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theLineScale"] = _pyossim.pqeRPCModel_theLineScale_set
    __swig_getmethods__["theLineScale"] = _pyossim.pqeRPCModel_theLineScale_get
    if _newclass:theLineScale = _swig_property(_pyossim.pqeRPCModel_theLineScale_get, _pyossim.pqeRPCModel_theLineScale_set)
    __swig_setmethods__["theSampScale"] = _pyossim.pqeRPCModel_theSampScale_set
    __swig_getmethods__["theSampScale"] = _pyossim.pqeRPCModel_theSampScale_get
    if _newclass:theSampScale = _swig_property(_pyossim.pqeRPCModel_theSampScale_get, _pyossim.pqeRPCModel_theSampScale_set)
    __swig_setmethods__["theLatScale"] = _pyossim.pqeRPCModel_theLatScale_set
    __swig_getmethods__["theLatScale"] = _pyossim.pqeRPCModel_theLatScale_get
    if _newclass:theLatScale = _swig_property(_pyossim.pqeRPCModel_theLatScale_get, _pyossim.pqeRPCModel_theLatScale_set)
    __swig_setmethods__["theLonScale"] = _pyossim.pqeRPCModel_theLonScale_set
    __swig_getmethods__["theLonScale"] = _pyossim.pqeRPCModel_theLonScale_get
    if _newclass:theLonScale = _swig_property(_pyossim.pqeRPCModel_theLonScale_get, _pyossim.pqeRPCModel_theLonScale_set)
    __swig_setmethods__["theHgtScale"] = _pyossim.pqeRPCModel_theHgtScale_set
    __swig_getmethods__["theHgtScale"] = _pyossim.pqeRPCModel_theHgtScale_get
    if _newclass:theHgtScale = _swig_property(_pyossim.pqeRPCModel_theHgtScale_get, _pyossim.pqeRPCModel_theHgtScale_set)
    __swig_setmethods__["theLineOffset"] = _pyossim.pqeRPCModel_theLineOffset_set
    __swig_getmethods__["theLineOffset"] = _pyossim.pqeRPCModel_theLineOffset_get
    if _newclass:theLineOffset = _swig_property(_pyossim.pqeRPCModel_theLineOffset_get, _pyossim.pqeRPCModel_theLineOffset_set)
    __swig_setmethods__["theSampOffset"] = _pyossim.pqeRPCModel_theSampOffset_set
    __swig_getmethods__["theSampOffset"] = _pyossim.pqeRPCModel_theSampOffset_get
    if _newclass:theSampOffset = _swig_property(_pyossim.pqeRPCModel_theSampOffset_get, _pyossim.pqeRPCModel_theSampOffset_set)
    __swig_setmethods__["theLatOffset"] = _pyossim.pqeRPCModel_theLatOffset_set
    __swig_getmethods__["theLatOffset"] = _pyossim.pqeRPCModel_theLatOffset_get
    if _newclass:theLatOffset = _swig_property(_pyossim.pqeRPCModel_theLatOffset_get, _pyossim.pqeRPCModel_theLatOffset_set)
    __swig_setmethods__["theLonOffset"] = _pyossim.pqeRPCModel_theLonOffset_set
    __swig_getmethods__["theLonOffset"] = _pyossim.pqeRPCModel_theLonOffset_get
    if _newclass:theLonOffset = _swig_property(_pyossim.pqeRPCModel_theLonOffset_get, _pyossim.pqeRPCModel_theLonOffset_set)
    __swig_setmethods__["theHgtOffset"] = _pyossim.pqeRPCModel_theHgtOffset_set
    __swig_getmethods__["theHgtOffset"] = _pyossim.pqeRPCModel_theHgtOffset_get
    if _newclass:theHgtOffset = _swig_property(_pyossim.pqeRPCModel_theHgtOffset_get, _pyossim.pqeRPCModel_theHgtOffset_set)
    __swig_setmethods__["theLineNumCoef"] = _pyossim.pqeRPCModel_theLineNumCoef_set
    __swig_getmethods__["theLineNumCoef"] = _pyossim.pqeRPCModel_theLineNumCoef_get
    if _newclass:theLineNumCoef = _swig_property(_pyossim.pqeRPCModel_theLineNumCoef_get, _pyossim.pqeRPCModel_theLineNumCoef_set)
    __swig_setmethods__["theLineDenCoef"] = _pyossim.pqeRPCModel_theLineDenCoef_set
    __swig_getmethods__["theLineDenCoef"] = _pyossim.pqeRPCModel_theLineDenCoef_get
    if _newclass:theLineDenCoef = _swig_property(_pyossim.pqeRPCModel_theLineDenCoef_get, _pyossim.pqeRPCModel_theLineDenCoef_set)
    __swig_setmethods__["theSampNumCoef"] = _pyossim.pqeRPCModel_theSampNumCoef_set
    __swig_getmethods__["theSampNumCoef"] = _pyossim.pqeRPCModel_theSampNumCoef_get
    if _newclass:theSampNumCoef = _swig_property(_pyossim.pqeRPCModel_theSampNumCoef_get, _pyossim.pqeRPCModel_theSampNumCoef_set)
    __swig_setmethods__["theSampDenCoef"] = _pyossim.pqeRPCModel_theSampDenCoef_set
    __swig_getmethods__["theSampDenCoef"] = _pyossim.pqeRPCModel_theSampDenCoef_get
    if _newclass:theSampDenCoef = _swig_property(_pyossim.pqeRPCModel_theSampDenCoef_get, _pyossim.pqeRPCModel_theSampDenCoef_set)
    __swig_setmethods__["theType"] = _pyossim.pqeRPCModel_theType_set
    __swig_getmethods__["theType"] = _pyossim.pqeRPCModel_theType_get
    if _newclass:theType = _swig_property(_pyossim.pqeRPCModel_theType_get, _pyossim.pqeRPCModel_theType_set)
    def __init__(self): 
        this = _pyossim.new_pqeRPCModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_pqeRPCModel
    __del__ = lambda self : None;
pqeRPCModel_swigregister = _pyossim.pqeRPCModel_swigregister
pqeRPCModel_swigregister(pqeRPCModel)

class ossimPositionQualityEvaluator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPositionQualityEvaluator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPositionQualityEvaluator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimPositionQualityEvaluator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPositionQualityEvaluator
    __del__ = lambda self : None;
    def addContributingCovariance(self, *args): return _pyossim.ossimPositionQualityEvaluator_addContributingCovariance(self, *args)
    def addContributingCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_addContributingCE_LE(self, *args)
    def subtractContributingCovariance(self, *args): return _pyossim.ossimPositionQualityEvaluator_subtractContributingCovariance(self, *args)
    def subtractContributingCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_subtractContributingCE_LE(self, *args)
    def getCovMatrix(self, *args): return _pyossim.ossimPositionQualityEvaluator_getCovMatrix(self, *args)
    def computeCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_computeCE_LE(self, *args)
    def extractErrorEllipse(self, *args): return _pyossim.ossimPositionQualityEvaluator_extractErrorEllipse(self, *args)
    def isValid(self): return _pyossim.ossimPositionQualityEvaluator_isValid(self)
    def ossimPositionQualityEvaluator_print(self, *args): return _pyossim.ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print(self, *args)
ossimPositionQualityEvaluator_swigregister = _pyossim.ossimPositionQualityEvaluator_swigregister
ossimPositionQualityEvaluator_swigregister(ossimPositionQualityEvaluator)

class ossimProjectionFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProjectionFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProjectionFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimProjectionFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimProjectionFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimProjectionFactoryRegistry_instance)
    def createProjection(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimProjectionFactoryRegistry_getTypeNameList(self, *args)
ossimProjectionFactoryRegistry_swigregister = _pyossim.ossimProjectionFactoryRegistry_swigregister
ossimProjectionFactoryRegistry_swigregister(ossimProjectionFactoryRegistry)

def ossimProjectionFactoryRegistry_instance():
  return _pyossim.ossimProjectionFactoryRegistry_instance()
ossimProjectionFactoryRegistry_instance = _pyossim.ossimProjectionFactoryRegistry_instance


def ossimProjectionFactoryRegistryGetInstance():
  return _pyossim.ossimProjectionFactoryRegistryGetInstance()
ossimProjectionFactoryRegistryGetInstance = _pyossim.ossimProjectionFactoryRegistryGetInstance
class ossimSensorModelFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModelFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModelFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimSensorModelFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimSensorModelFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimSensorModelFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimSensorModelFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimSensorModelFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimSensorModelFactory
    __del__ = lambda self : None;
ossimSensorModelFactory_swigregister = _pyossim.ossimSensorModelFactory_swigregister
ossimSensorModelFactory_swigregister(ossimSensorModelFactory)

def ossimSensorModelFactory_instance():
  return _pyossim.ossimSensorModelFactory_instance()
ossimSensorModelFactory_instance = _pyossim.ossimSensorModelFactory_instance

class ossimRpcPqeInputs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRpcPqeInputs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRpcPqeInputs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimRpcPqeInputs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimRpcPqeInputs
    __del__ = lambda self : None;
    __swig_setmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set
    __swig_getmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get
    if _newclass:theRpcElevationAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get, _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set)
    __swig_setmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set
    __swig_getmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get
    if _newclass:theRpcAzimuthAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get, _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set)
    __swig_setmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_set
    __swig_getmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_get
    if _newclass:theRpcBiasError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcBiasError_get, _pyossim.ossimRpcPqeInputs_theRpcBiasError_set)
    __swig_setmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_set
    __swig_getmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_get
    if _newclass:theRpcRandError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcRandError_get, _pyossim.ossimRpcPqeInputs_theRpcRandError_set)
    __swig_setmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set
    __swig_getmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get
    if _newclass:theSurfaceNormalVector = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get, _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set)
    __swig_setmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set
    __swig_getmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get
    if _newclass:theSurfaceCovMatrix = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get, _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set)
ossimRpcPqeInputs_swigregister = _pyossim.ossimRpcPqeInputs_swigregister
ossimRpcPqeInputs_swigregister(ossimRpcPqeInputs)

class ossimSensorModelTuple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModelTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModelTuple, name)
    __repr__ = _swig_repr
    OBS_INIT = _pyossim.ossimSensorModelTuple_OBS_INIT
    EVALUATE = _pyossim.ossimSensorModelTuple_EVALUATE
    P_WRT_X = _pyossim.ossimSensorModelTuple_P_WRT_X
    P_WRT_Y = _pyossim.ossimSensorModelTuple_P_WRT_Y
    P_WRT_Z = _pyossim.ossimSensorModelTuple_P_WRT_Z
    OP_SUCCESS = _pyossim.ossimSensorModelTuple_OP_SUCCESS
    ERROR_PROP_FAIL = _pyossim.ossimSensorModelTuple_ERROR_PROP_FAIL
    OP_FAIL = _pyossim.ossimSensorModelTuple_OP_FAIL
    def __init__(self): 
        this = _pyossim.new_ossimSensorModelTuple()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimSensorModelTuple
    __del__ = lambda self : None;
    def addImage(self, *args): return _pyossim.ossimSensorModelTuple_addImage(self, *args)
    def ossimSensorModelTuple_print(self, *args): return _pyossim.ossimSensorModelTuple_ossimSensorModelTuple_print(self, *args)
    def intersect(self, *args): return _pyossim.ossimSensorModelTuple_intersect(self, *args)
    def setIntersectionSurfaceAccuracy(self, *args): return _pyossim.ossimSensorModelTuple_setIntersectionSurfaceAccuracy(self, *args)
    def getRpcPqeInputs(self, *args): return _pyossim.ossimSensorModelTuple_getRpcPqeInputs(self, *args)
ossimSensorModelTuple_swigregister = _pyossim.ossimSensorModelTuple_swigregister
ossimSensorModelTuple_swigregister(ossimSensorModelTuple)

class ossimStatePlaneProjectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStatePlaneProjectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStatePlaneProjectionInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimStatePlaneProjectionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def code(self): return _pyossim.ossimStatePlaneProjectionInfo_code(self)
    def name(self): return _pyossim.ossimStatePlaneProjectionInfo_name(self)
    def projName(self): return _pyossim.ossimStatePlaneProjectionInfo_projName(self)
    def originLat(self): return _pyossim.ossimStatePlaneProjectionInfo_originLat(self)
    def originLon(self): return _pyossim.ossimStatePlaneProjectionInfo_originLon(self)
    def datum(self): return _pyossim.ossimStatePlaneProjectionInfo_datum(self)
    def origin(self): return _pyossim.ossimStatePlaneProjectionInfo_origin(self)
    def parallel1(self): return _pyossim.ossimStatePlaneProjectionInfo_parallel1(self)
    def parallel2(self): return _pyossim.ossimStatePlaneProjectionInfo_parallel2(self)
    def falseEasting(self): return _pyossim.ossimStatePlaneProjectionInfo_falseEasting(self)
    def falseNorthing(self): return _pyossim.ossimStatePlaneProjectionInfo_falseNorthing(self)
    def falseEastingInMeters(self): return _pyossim.ossimStatePlaneProjectionInfo_falseEastingInMeters(self)
    def falseNorthingInMeters(self): return _pyossim.ossimStatePlaneProjectionInfo_falseNorthingInMeters(self)
    def scaleFactor(self): return _pyossim.ossimStatePlaneProjectionInfo_scaleFactor(self)
    def units(self): return _pyossim.ossimStatePlaneProjectionInfo_units(self)
    def getUnitType(self): return _pyossim.ossimStatePlaneProjectionInfo_getUnitType(self)
    def matchesProjection(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_matchesProjection(self, *args)
    def isSameCode(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_isSameCode(self, *args)
    def populateProjectionKeywords(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_populateProjectionKeywords(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimStatePlaneProjectionInfo
    __del__ = lambda self : None;
ossimStatePlaneProjectionInfo_swigregister = _pyossim.ossimStatePlaneProjectionInfo_swigregister
ossimStatePlaneProjectionInfo_swigregister(ossimStatePlaneProjectionInfo)

def __lshift__(*args):
  return _pyossim.__lshift__(*args)
__lshift__ = _pyossim.__lshift__

class ossimTiffProjectionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTiffProjectionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTiffProjectionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimTiffProjectionFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimTiffProjectionFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimTiffProjectionFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimTiffProjectionFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimTiffProjectionFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimTiffProjectionFactory
    __del__ = lambda self : None;
ossimTiffProjectionFactory_swigregister = _pyossim.ossimTiffProjectionFactory_swigregister
ossimTiffProjectionFactory_swigregister(ossimTiffProjectionFactory)

def ossimTiffProjectionFactory_instance():
  return _pyossim.ossimTiffProjectionFactory_instance()
ossimTiffProjectionFactory_instance = _pyossim.ossimTiffProjectionFactory_instance

class ossimUpspt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimUpspt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimUpspt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimUpspt(*args)
        try: self.this.append(this)
        except: self.this = this
    def hemisphere(self): return _pyossim.ossimUpspt_hemisphere(self)
    def easting(self): return _pyossim.ossimUpspt_easting(self)
    def northing(self): return _pyossim.ossimUpspt_northing(self)
    def datum(self): return _pyossim.ossimUpspt_datum(self)
    __swig_destroy__ = _pyossim.delete_ossimUpspt
    __del__ = lambda self : None;
ossimUpspt_swigregister = _pyossim.ossimUpspt_swigregister
ossimUpspt_swigregister(ossimUpspt)

class ossimUtmpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimUtmpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimUtmpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimUtmpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def zone(self): return _pyossim.ossimUtmpt_zone(self)
    def hemisphere(self): return _pyossim.ossimUtmpt_hemisphere(self)
    def easting(self): return _pyossim.ossimUtmpt_easting(self)
    def northing(self): return _pyossim.ossimUtmpt_northing(self)
    def datum(self): return _pyossim.ossimUtmpt_datum(self)
    def convertFromGround(self, *args): return _pyossim.ossimUtmpt_convertFromGround(self, *args)
    def convertToGround(self, *args): return _pyossim.ossimUtmpt_convertToGround(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimUtmpt
    __del__ = lambda self : None;
ossimUtmpt_swigregister = _pyossim.ossimUtmpt_swigregister
ossimUtmpt_swigregister(ossimUtmpt)

ossimElevUtil_HEADER = _pyossim.ossimElevUtil_HEADER
class ossimElevUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevUtil, name)
    __repr__ = _swig_repr
    OSSIM_DEM_OP_UNKNOWN = _pyossim.ossimElevUtil_OSSIM_DEM_OP_UNKNOWN
    OSSIM_DEM_OP_HILL_SHADE = _pyossim.ossimElevUtil_OSSIM_DEM_OP_HILL_SHADE
    OSSIM_DEM_OP_COLOR_RELIEF = _pyossim.ossimElevUtil_OSSIM_DEM_OP_COLOR_RELIEF
    OSSIM_DEM_OP_ORTHO = _pyossim.ossimElevUtil_OSSIM_DEM_OP_ORTHO
    OSSIM_DEM_PROJ_UNKNOWN = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_UNKNOWN
    OSSIM_DEM_PROJ_GEO = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_GEO
    OSSIM_DEM_PROJ_GEO_SCALED = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_GEO_SCALED
    OSSIM_DEM_PROJ_INPUT = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_INPUT
    OSSIM_DEM_PROJ_UTM = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_UTM
    def __init__(self): 
        this = _pyossim.new_ossimElevUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimElevUtil
    __del__ = lambda self : None;
    def initialize(self, *args): return _pyossim.ossimElevUtil_initialize(self, *args)
    def execute(self): return _pyossim.ossimElevUtil_execute(self)
    def getOutputFilename(self, *args): return _pyossim.ossimElevUtil_getOutputFilename(self, *args)
ossimElevUtil_swigregister = _pyossim.ossimElevUtil_swigregister
ossimElevUtil_swigregister(ossimElevUtil)

ossimFileWalker_HEADER = _pyossim.ossimFileWalker_HEADER
class ossimFileWalker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFileWalker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFileWalker, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFileWalker()
        try: self.this.append(this)
        except: self.this = this
    def walk(self, *args): return _pyossim.ossimFileWalker_walk(self, *args)
    def registerProcessFileCallback(self, *args): return _pyossim.ossimFileWalker_registerProcessFileCallback(self, *args)
    def getFilteredExtensions(self, *args): return _pyossim.ossimFileWalker_getFilteredExtensions(self, *args)
    def initializeDefaultFilterList(self): return _pyossim.ossimFileWalker_initializeDefaultFilterList(self)
    __swig_destroy__ = _pyossim.delete_ossimFileWalker
    __del__ = lambda self : None;
ossimFileWalker_swigregister = _pyossim.ossimFileWalker_swigregister
ossimFileWalker_swigregister(ossimFileWalker)

ossimInfo_HEADER = _pyossim.ossimInfo_HEADER
class ossimInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimInfo
    __del__ = lambda self : None;
    def addArguments(self, *args): return _pyossim.ossimInfo_addArguments(self, *args)
    def initialize(self, *args): return _pyossim.ossimInfo_initialize(self, *args)
    def execute(self): return _pyossim.ossimInfo_execute(self)
    def executeImageOptions(self, *args): return _pyossim.ossimInfo_executeImageOptions(self, *args)
    def openImage(self, *args): return _pyossim.ossimInfo_openImage(self, *args)
    def closeImage(self): return _pyossim.ossimInfo_closeImage(self)
    def getImageHandler(self): return _pyossim.ossimInfo_getImageHandler(self)
    def dumpImage(self, *args): return _pyossim.ossimInfo_dumpImage(self, *args)
    def printFactories(self, *args): return _pyossim.ossimInfo_printFactories(self, *args)
    def getImageMetadata(self, *args): return _pyossim.ossimInfo_getImageMetadata(self, *args)
    def getImagePalette(self, *args): return _pyossim.ossimInfo_getImagePalette(self, *args)
    def getImageInfo(self, *args): return _pyossim.ossimInfo_getImageInfo(self, *args)
    def getImageGeometryInfo(self, *args): return _pyossim.ossimInfo_getImageGeometryInfo(self, *args)
    def isImageEntryOverview(self): return _pyossim.ossimInfo_isImageEntryOverview(self)
    def printConfiguration(self, *args): return _pyossim.ossimInfo_printConfiguration(self, *args)
    def printDatums(self, *args): return _pyossim.ossimInfo_printDatums(self, *args)
    def deg2rad(self, *args): return _pyossim.ossimInfo_deg2rad(self, *args)
    def rad2deg(self, *args): return _pyossim.ossimInfo_rad2deg(self, *args)
    def ft2mtrs(self, *args): return _pyossim.ossimInfo_ft2mtrs(self, *args)
    def mtrs2ft(self, *args): return _pyossim.ossimInfo_mtrs2ft(self, *args)
    def mtrsPerDeg(self, *args): return _pyossim.ossimInfo_mtrsPerDeg(self, *args)
    def outputHeight(self, *args): return _pyossim.ossimInfo_outputHeight(self, *args)
    def printPlugins(self, *args): return _pyossim.ossimInfo_printPlugins(self, *args)
    def testPlugin(self, *args): return _pyossim.ossimInfo_testPlugin(self, *args)
    def printOverviewTypes(self, *args): return _pyossim.ossimInfo_printOverviewTypes(self, *args)
    def printProjections(self, *args): return _pyossim.ossimInfo_printProjections(self, *args)
    def printReaderProps(self, *args): return _pyossim.ossimInfo_printReaderProps(self, *args)
    def printResamplerFilters(self, *args): return _pyossim.ossimInfo_printResamplerFilters(self, *args)
    def printWriterProps(self, *args): return _pyossim.ossimInfo_printWriterProps(self, *args)
    def getRadiometry(self, *args): return _pyossim.ossimInfo_getRadiometry(self, *args)
ossimInfo_swigregister = _pyossim.ossimInfo_swigregister
ossimInfo_swigregister(ossimInfo)

ossimRpfUtil_HEADER = _pyossim.ossimRpfUtil_HEADER
class ossimRpfUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRpfUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRpfUtil, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimRpfUtil()
        try: self.this.append(this)
        except: self.this = this
    def writeDotRpfFiles(self, *args): return _pyossim.ossimRpfUtil_writeDotRpfFiles(self, *args)
    def writeDotRpfFile(self, *args): return _pyossim.ossimRpfUtil_writeDotRpfFile(self, *args)
ossimRpfUtil_swigregister = _pyossim.ossimRpfUtil_swigregister
ossimRpfUtil_swigregister(ossimRpfUtil)

# This file is compatible with both classic and new-style classes.


