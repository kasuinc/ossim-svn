# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyossim', [dirname(__file__)])
        except ImportError:
            import _pyossim
            return _pyossim
        if fp is not None:
            try:
                _mod = imp.load_module('_pyossim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyossim = swig_import_helper()
    del swig_import_helper
else:
    import _pyossim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ossimInit_HEADER = _pyossim.ossimInit_HEADER
class ossimInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimInit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimInit
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimInit_instance
    if _newclass:instance = staticmethod(_pyossim.ossimInit_instance)
    def addOptions(self, *args): return _pyossim.ossimInit_addOptions(self, *args)
    def initialize(self, *args): return _pyossim.ossimInit_initialize(self, *args)
    def finalize(self): return _pyossim.ossimInit_finalize(self)
    def usage(self): return _pyossim.ossimInit_usage(self)
    def getElevEnabledFlag(self): return _pyossim.ossimInit_getElevEnabledFlag(self)
    def setElevEnabledFlag(self, *args): return _pyossim.ossimInit_setElevEnabledFlag(self, *args)
    def setPluginLoaderEnabledFlag(self, *args): return _pyossim.ossimInit_setPluginLoaderEnabledFlag(self, *args)
    def loadPlugins(self, *args): return _pyossim.ossimInit_loadPlugins(self, *args)
    def initializePlugins(self): return _pyossim.ossimInit_initializePlugins(self)
    def initializeDefaultFactories(self): return _pyossim.ossimInit_initializeDefaultFactories(self)
    def initializeElevation(self): return _pyossim.ossimInit_initializeElevation(self)
    def initializeLogFile(self): return _pyossim.ossimInit_initializeLogFile(self)
    def version(self): return _pyossim.ossimInit_version(self)
    def appName(self): return _pyossim.ossimInit_appName(self)
ossimInit_swigregister = _pyossim.ossimInit_swigregister
ossimInit_swigregister(ossimInit)

def ossimInit_instance():
  return _pyossim.ossimInit_instance()
ossimInit_instance = _pyossim.ossimInit_instance

class ossimDtedElevationDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDtedElevationDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDtedElevationDatabase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDtedElevationDatabase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDtedElevationDatabase
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimDtedElevationDatabase_dup(self)
    def open(self, *args): return _pyossim.ossimDtedElevationDatabase_open(self, *args)
    def pointHasCoverage(self, *args): return _pyossim.ossimDtedElevationDatabase_pointHasCoverage(self, *args)
    def getAccuracyLE90(self, *args): return _pyossim.ossimDtedElevationDatabase_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimDtedElevationDatabase_getAccuracyCE90(self, *args)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimDtedElevationDatabase_getHeightAboveMSL(self, *args)
    def getHeightAboveEllipsoid(self, *args): return _pyossim.ossimDtedElevationDatabase_getHeightAboveEllipsoid(self, *args)
    def createId(self, *args): return _pyossim.ossimDtedElevationDatabase_createId(self, *args)
    def loadState(self, *args): return _pyossim.ossimDtedElevationDatabase_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimDtedElevationDatabase_saveState(self, *args)
ossimDtedElevationDatabase_swigregister = _pyossim.ossimDtedElevationDatabase_swigregister
ossimDtedElevationDatabase_swigregister(ossimDtedElevationDatabase)

class ossimElevationDatabaseFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationDatabaseFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevationDatabaseFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevationDatabaseFactory_instance)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseFactory_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseFactory_open(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimElevationDatabaseFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseFactory
    __del__ = lambda self : None;
ossimElevationDatabaseFactory_swigregister = _pyossim.ossimElevationDatabaseFactory_swigregister
ossimElevationDatabaseFactory_swigregister(ossimElevationDatabaseFactory)

def ossimElevationDatabaseFactory_instance():
  return _pyossim.ossimElevationDatabaseFactory_instance()
ossimElevationDatabaseFactory_instance = _pyossim.ossimElevationDatabaseFactory_instance

class ossimElevationDatabaseRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationDatabaseRegistry()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevationDatabaseRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevationDatabaseRegistry_instance)
    def getTypeNameList(self, *args): return _pyossim.ossimElevationDatabaseRegistry_getTypeNameList(self, *args)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseRegistry_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseRegistry_open(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseRegistry
    __del__ = lambda self : None;
ossimElevationDatabaseRegistry_swigregister = _pyossim.ossimElevationDatabaseRegistry_swigregister
ossimElevationDatabaseRegistry_swigregister(ossimElevationDatabaseRegistry)

def ossimElevationDatabaseRegistry_instance():
  return _pyossim.ossimElevationDatabaseRegistry_instance()
ossimElevationDatabaseRegistry_instance = _pyossim.ossimElevationDatabaseRegistry_instance

class ossimElevCellHandlerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevCellHandlerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevCellHandlerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevCellHandlerFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevCellHandlerFactory_instance)
    def create(self, *args): return _pyossim.ossimElevCellHandlerFactory_create(self, *args)
    def getList(self): return _pyossim.ossimElevCellHandlerFactory_getList(self)
    __swig_destroy__ = _pyossim.delete_ossimElevCellHandlerFactory
    __del__ = lambda self : None;
ossimElevCellHandlerFactory_swigregister = _pyossim.ossimElevCellHandlerFactory_swigregister
ossimElevCellHandlerFactory_swigregister(ossimElevCellHandlerFactory)

def ossimElevCellHandlerFactory_instance():
  return _pyossim.ossimElevCellHandlerFactory_instance()
ossimElevCellHandlerFactory_instance = _pyossim.ossimElevCellHandlerFactory_instance

class ossimElevManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimElevManager
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevManager_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevManager_instance)
    def getHeightAboveEllipsoid(self, *args): return _pyossim.ossimElevManager_getHeightAboveEllipsoid(self, *args)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimElevManager_getHeightAboveMSL(self, *args)
    def getAccuracyLE90(self, *args): return _pyossim.ossimElevManager_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimElevManager_getAccuracyCE90(self, *args)
    def pointHasCoverage(self, *args): return _pyossim.ossimElevManager_pointHasCoverage(self, *args)
    def getMeanSpacingMeters(self): return _pyossim.ossimElevManager_getMeanSpacingMeters(self)
    def getNumberOfElevationDatabases(self): return _pyossim.ossimElevManager_getNumberOfElevationDatabases(self)
    def getElevationDatabase(self, *args): return _pyossim.ossimElevManager_getElevationDatabase(self, *args)
    def getElevationDatabaseList(self, *args): return _pyossim.ossimElevManager_getElevationDatabaseList(self, *args)
    def addDatabase(self, *args): return _pyossim.ossimElevManager_addDatabase(self, *args)
    def loadElevationPath(self, *args): return _pyossim.ossimElevManager_loadElevationPath(self, *args)
    def setDefaultHeightAboveEllipsoid(self, *args): return _pyossim.ossimElevManager_setDefaultHeightAboveEllipsoid(self, *args)
    def setElevationOffset(self, *args): return _pyossim.ossimElevManager_setElevationOffset(self, *args)
    def getElevationOffset(self): return _pyossim.ossimElevManager_getElevationOffset(self)
    def getOpenCellList(self, *args): return _pyossim.ossimElevManager_getOpenCellList(self, *args)
    def setUseGeoidIfNullFlag(self, *args): return _pyossim.ossimElevManager_setUseGeoidIfNullFlag(self, *args)
    def getUseGeoidIfNullFlag(self): return _pyossim.ossimElevManager_getUseGeoidIfNullFlag(self)
    def clear(self): return _pyossim.ossimElevManager_clear(self)
    def saveState(self, *args): return _pyossim.ossimElevManager_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimElevManager_loadState(self, *args)
ossimElevManager_swigregister = _pyossim.ossimElevManager_swigregister
ossimElevManager_swigregister(ossimElevManager)

def ossimElevManager_instance():
  return _pyossim.ossimElevManager_instance()
ossimElevManager_instance = _pyossim.ossimElevManager_instance

class ossim2dTo2dTransformFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dTransformFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dTransformFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossim2dTo2dTransformFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossim2dTo2dTransformFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossim2dTo2dTransformFactory_instance)
    def createTransform(self, *args): return _pyossim.ossim2dTo2dTransformFactory_createTransform(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossim2dTo2dTransformFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossim2dTo2dTransformFactory
    __del__ = lambda self : None;
ossim2dTo2dTransformFactory_swigregister = _pyossim.ossim2dTo2dTransformFactory_swigregister
ossim2dTo2dTransformFactory_swigregister(ossim2dTo2dTransformFactory)

def ossim2dTo2dTransformFactory_instance():
  return _pyossim.ossim2dTo2dTransformFactory_instance()
ossim2dTo2dTransformFactory_instance = _pyossim.ossim2dTo2dTransformFactory_instance

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyossim.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyossim.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyossim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyossim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyossim.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyossim.SwigPyIterator_copy(self)
    def next(self): return _pyossim.SwigPyIterator_next(self)
    def __next__(self): return _pyossim.SwigPyIterator___next__(self)
    def previous(self): return _pyossim.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyossim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyossim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyossim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyossim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyossim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyossim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorossimString, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorossimString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorossimString___nonzero__(self)
    def __bool__(self): return _pyossim.vectorossimString___bool__(self)
    def __len__(self): return _pyossim.vectorossimString___len__(self)
    def pop(self): return _pyossim.vectorossimString_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorossimString___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorossimString___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorossimString___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorossimString___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorossimString___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorossimString___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorossimString_append(self, *args)
    def empty(self): return _pyossim.vectorossimString_empty(self)
    def size(self): return _pyossim.vectorossimString_size(self)
    def clear(self): return _pyossim.vectorossimString_clear(self)
    def swap(self, *args): return _pyossim.vectorossimString_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorossimString_get_allocator(self)
    def begin(self): return _pyossim.vectorossimString_begin(self)
    def end(self): return _pyossim.vectorossimString_end(self)
    def rbegin(self): return _pyossim.vectorossimString_rbegin(self)
    def rend(self): return _pyossim.vectorossimString_rend(self)
    def pop_back(self): return _pyossim.vectorossimString_pop_back(self)
    def erase(self, *args): return _pyossim.vectorossimString_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorossimString_push_back(self, *args)
    def front(self): return _pyossim.vectorossimString_front(self)
    def back(self): return _pyossim.vectorossimString_back(self)
    def assign(self, *args): return _pyossim.vectorossimString_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorossimString_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorossimString_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorossimString_reserve(self, *args)
    def capacity(self): return _pyossim.vectorossimString_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorossimString
    __del__ = lambda self : None;
vectorossimString_swigregister = _pyossim.vectorossimString_swigregister
vectorossimString_swigregister(vectorossimString)

ossimDatumFactory_HEADER = _pyossim.ossimDatumFactory_HEADER
class ossimDatumFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimDatumFactory_create(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactory_instance)
    def wgs84(self): return _pyossim.ossimDatumFactory_wgs84(self)
    def wgs72(self): return _pyossim.ossimDatumFactory_wgs72(self)
    def getList(self, *args): return _pyossim.ossimDatumFactory_getList(self, *args)
    def writeCStructure(self, *args): return _pyossim.ossimDatumFactory_writeCStructure(self, *args)
ossimDatumFactory_swigregister = _pyossim.ossimDatumFactory_swigregister
ossimDatumFactory_swigregister(ossimDatumFactory)

def ossimDatumFactory_instance():
  return _pyossim.ossimDatumFactory_instance()
ossimDatumFactory_instance = _pyossim.ossimDatumFactory_instance

class ossimDatumFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactoryRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimDatumFactoryRegistry_registerFactory(self, *args)
    def create(self, *args): return _pyossim.ossimDatumFactoryRegistry_create(self, *args)
    def getList(self, *args): return _pyossim.ossimDatumFactoryRegistry_getList(self, *args)
ossimDatumFactoryRegistry_swigregister = _pyossim.ossimDatumFactoryRegistry_swigregister
ossimDatumFactoryRegistry_swigregister(ossimDatumFactoryRegistry)

def ossimDatumFactoryRegistry_instance():
  return _pyossim.ossimDatumFactoryRegistry_instance()
ossimDatumFactoryRegistry_instance = _pyossim.ossimDatumFactoryRegistry_instance

class ossimDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatum, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def shift(self, *args): return _pyossim.ossimDatum_shift(self, *args)
    def shiftToWgs84(self, *args): return _pyossim.ossimDatum_shiftToWgs84(self, *args)
    def shiftFromWgs84(self, *args): return _pyossim.ossimDatum_shiftFromWgs84(self, *args)
    def isTheSameAs(self, *args): return _pyossim.ossimDatum_isTheSameAs(self, *args)
    def code(self): return _pyossim.ossimDatum_code(self)
    def name(self): return _pyossim.ossimDatum_name(self)
    def epsgCode(self): return _pyossim.ossimDatum_epsgCode(self)
    def ellipsoid(self): return _pyossim.ossimDatum_ellipsoid(self)
    def sigmaX(self): return _pyossim.ossimDatum_sigmaX(self)
    def sigmaY(self): return _pyossim.ossimDatum_sigmaY(self)
    def sigmaZ(self): return _pyossim.ossimDatum_sigmaZ(self)
    def westLongitude(self): return _pyossim.ossimDatum_westLongitude(self)
    def eastLongitude(self): return _pyossim.ossimDatum_eastLongitude(self)
    def southLatitude(self): return _pyossim.ossimDatum_southLatitude(self)
    def northLatitude(self): return _pyossim.ossimDatum_northLatitude(self)
    def param1(self): return _pyossim.ossimDatum_param1(self)
    def param2(self): return _pyossim.ossimDatum_param2(self)
    def param3(self): return _pyossim.ossimDatum_param3(self)
    def param4(self): return _pyossim.ossimDatum_param4(self)
    def param5(self): return _pyossim.ossimDatum_param5(self)
    def param6(self): return _pyossim.ossimDatum_param6(self)
    def param7(self): return _pyossim.ossimDatum_param7(self)
    def isInside(self, *args): return _pyossim.ossimDatum_isInside(self, *args)
    def __eq__(self, *args): return _pyossim.ossimDatum___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDatum___ne__(self, *args)
ossimDatum_swigregister = _pyossim.ossimDatum_swigregister
ossimDatum_swigregister(ossimDatum)

class ossimDpt3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __cmp__(self, *args): return _pyossim.ossimDpt3d___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt3d___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt3d_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt3d_hasNans(self)
    def length(self): return _pyossim.ossimDpt3d_length(self)
    def length2(self): return _pyossim.ossimDpt3d_length2(self)
    def __add__(self, *args): return _pyossim.ossimDpt3d___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt3d___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt3d___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt3d___isub__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt3d___div__(self, *args)
    def __idiv__(self, *args): return _pyossim.ossimDpt3d___idiv__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimDpt3d___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt3d___mul__(self, *args)
    def __xor__(self, *args): return _pyossim.ossimDpt3d___xor__(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt3d_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt3d_toPoint(self, *args)
    __swig_setmethods__["x"] = _pyossim.ossimDpt3d_x_set
    __swig_getmethods__["x"] = _pyossim.ossimDpt3d_x_get
    if _newclass:x = _swig_property(_pyossim.ossimDpt3d_x_get, _pyossim.ossimDpt3d_x_set)
    __swig_setmethods__["y"] = _pyossim.ossimDpt3d_y_set
    __swig_getmethods__["y"] = _pyossim.ossimDpt3d_y_get
    if _newclass:y = _swig_property(_pyossim.ossimDpt3d_y_get, _pyossim.ossimDpt3d_y_set)
    __swig_setmethods__["z"] = _pyossim.ossimDpt3d_z_set
    __swig_getmethods__["z"] = _pyossim.ossimDpt3d_z_get
    if _newclass:z = _swig_property(_pyossim.ossimDpt3d_z_get, _pyossim.ossimDpt3d_z_set)
    __swig_destroy__ = _pyossim.delete_ossimDpt3d
    __del__ = lambda self : None;
ossimDpt3d_swigregister = _pyossim.ossimDpt3d_swigregister
ossimDpt3d_swigregister(ossimDpt3d)

class ossimDpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimDpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimDpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt_hasNans(self)
    def isNan(self): return _pyossim.ossimDpt_isNan(self)
    def length(self): return _pyossim.ossimDpt_length(self)
    def __add__(self, *args): return _pyossim.ossimDpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt___div__(self, *args)
    def ossimDpt_print(self, *args): return _pyossim.ossimDpt_ossimDpt_print(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt_toPoint(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimDpt
    __del__ = lambda self : None;
ossimDpt_swigregister = _pyossim.ossimDpt_swigregister
ossimDpt_swigregister(ossimDpt)

class ossimIpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimIpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimIpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimIpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimIpt_hasNans(self)
    def isNan(self): return _pyossim.ossimIpt_isNan(self)
    def ossimIpt_print(self, *args): return _pyossim.ossimIpt_ossimIpt_print(self, *args)
    def toString(self): return _pyossim.ossimIpt_toString(self)
    def toPoint(self, *args): return _pyossim.ossimIpt_toPoint(self, *args)
    def length(self): return _pyossim.ossimIpt_length(self)
    def __add__(self, *args): return _pyossim.ossimIpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimIpt___div__(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimIpt
    __del__ = lambda self : None;
ossimIpt_swigregister = _pyossim.ossimIpt_swigregister
ossimIpt_swigregister(ossimIpt)

ossimIrect_HEADER = _pyossim.ossimIrect_HEADER
class ossimIrect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIrect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIrect, name)
    __repr__ = _swig_repr
    UPPER_LEFT = _pyossim.ossimIrect_UPPER_LEFT
    LOWER_LEFT = _pyossim.ossimIrect_LOWER_LEFT
    LOWER_RIGHT = _pyossim.ossimIrect_LOWER_RIGHT
    UPPER_RIGHT = _pyossim.ossimIrect_UPPER_RIGHT
    def __init__(self, *args): 
        this = _pyossim.new_ossimIrect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIrect
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimIrect___set__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIrect___ne__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIrect___cmp__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimIrect___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIrect___mul__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIrect___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIrect___isub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimIrect___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIrect___sub__(self, *args)
    def ul(self): return _pyossim.ossimIrect_ul(self)
    def ur(self): return _pyossim.ossimIrect_ur(self)
    def lr(self): return _pyossim.ossimIrect_lr(self)
    def ll(self): return _pyossim.ossimIrect_ll(self)
    def changeOrientationMode(self, *args): return _pyossim.ossimIrect_changeOrientationMode(self, *args)
    def getBounds(self, *args): return _pyossim.ossimIrect_getBounds(self, *args)
    def getCenter(self, *args): return _pyossim.ossimIrect_getCenter(self, *args)
    def makeNan(self): return _pyossim.ossimIrect_makeNan(self)
    def hasNans(self): return _pyossim.ossimIrect_hasNans(self)
    def isNan(self): return _pyossim.ossimIrect_isNan(self)
    def orientMode(self): return _pyossim.ossimIrect_orientMode(self)
    def setOrientMode(self, *args): return _pyossim.ossimIrect_setOrientMode(self, *args)
    def stretchToTileBoundary(self, *args): return _pyossim.ossimIrect_stretchToTileBoundary(self, *args)
    def toString(self): return _pyossim.ossimIrect_toString(self)
    def toRect(self, *args): return _pyossim.ossimIrect_toRect(self, *args)
    def expand(self, *args): return _pyossim.ossimIrect_expand(self, *args)
    def insureMinimumSize(self, *args): return _pyossim.ossimIrect_insureMinimumSize(self, *args)
    def area(self): return _pyossim.ossimIrect_area(self)
    def set_ul(self, *args): return _pyossim.ossimIrect_set_ul(self, *args)
    def set_ur(self, *args): return _pyossim.ossimIrect_set_ur(self, *args)
    def set_lr(self, *args): return _pyossim.ossimIrect_set_lr(self, *args)
    def set_ll(self, *args): return _pyossim.ossimIrect_set_ll(self, *args)
    def set_ulx(self, *args): return _pyossim.ossimIrect_set_ulx(self, *args)
    def set_uly(self, *args): return _pyossim.ossimIrect_set_uly(self, *args)
    def set_urx(self, *args): return _pyossim.ossimIrect_set_urx(self, *args)
    def set_ury(self, *args): return _pyossim.ossimIrect_set_ury(self, *args)
    def set_lrx(self, *args): return _pyossim.ossimIrect_set_lrx(self, *args)
    def set_lry(self, *args): return _pyossim.ossimIrect_set_lry(self, *args)
    def set_llx(self, *args): return _pyossim.ossimIrect_set_llx(self, *args)
    def set_lly(self, *args): return _pyossim.ossimIrect_set_lly(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimIrect_pointWithin(self, *args)
    def intersects(self, *args): return _pyossim.ossimIrect_intersects(self, *args)
    def completely_within(self, *args): return _pyossim.ossimIrect_completely_within(self, *args)
    def orientationMode(self): return _pyossim.ossimIrect_orientationMode(self)
    def height(self): return _pyossim.ossimIrect_height(self)
    def width(self): return _pyossim.ossimIrect_width(self)
    def size(self): return _pyossim.ossimIrect_size(self)
    def clipToRect(self, *args): return _pyossim.ossimIrect_clipToRect(self, *args)
    def midPoint(self): return _pyossim.ossimIrect_midPoint(self)
    def ossimIrect_print(self, *args): return _pyossim.ossimIrect_ossimIrect_print(self, *args)
    def combine(self, *args): return _pyossim.ossimIrect_combine(self, *args)
    def saveState(self, *args): return _pyossim.ossimIrect_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimIrect_loadState(self, *args)
ossimIrect_swigregister = _pyossim.ossimIrect_swigregister
ossimIrect_swigregister(ossimIrect)

def __mul__(*args):
  return _pyossim.__mul__(*args)
__mul__ = _pyossim.__mul__

class ossimLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def getVector(self): return _pyossim.ossimLine_getVector(self)
    def intersectInfinite(self, *args): return _pyossim.ossimLine_intersectInfinite(self, *args)
    def intersectSegment(self, *args): return _pyossim.ossimLine_intersectSegment(self, *args)
    def midPoint(self): return _pyossim.ossimLine_midPoint(self)
    def length(self): return _pyossim.ossimLine_length(self)
    def normal(self): return _pyossim.ossimLine_normal(self)
    def isPointWithin(self, *args): return _pyossim.ossimLine_isPointWithin(self, *args)
    def isPointOnInfiniteLine(self, *args): return _pyossim.ossimLine_isPointOnInfiniteLine(self, *args)
    __swig_setmethods__["theP1"] = _pyossim.ossimLine_theP1_set
    __swig_getmethods__["theP1"] = _pyossim.ossimLine_theP1_get
    if _newclass:theP1 = _swig_property(_pyossim.ossimLine_theP1_get, _pyossim.ossimLine_theP1_set)
    __swig_setmethods__["theP2"] = _pyossim.ossimLine_theP2_set
    __swig_getmethods__["theP2"] = _pyossim.ossimLine_theP2_get
    if _newclass:theP2 = _swig_property(_pyossim.ossimLine_theP2_get, _pyossim.ossimLine_theP2_set)
    __swig_destroy__ = _pyossim.delete_ossimLine
    __del__ = lambda self : None;
ossimLine_swigregister = _pyossim.ossimLine_swigregister
ossimLine_swigregister(ossimLine)

class ossimLsrPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrPoint___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrPoint___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrPoint___add__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrPoint___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrPoint___ne__(self, *args)
    def ossimLsrPoint_ossimEcefPoint(self): return _pyossim.ossimLsrPoint_ossimLsrPoint_ossimEcefPoint(self)
    def x(self, *args): return _pyossim.ossimLsrPoint_x(self, *args)
    def y(self, *args): return _pyossim.ossimLsrPoint_y(self, *args)
    def z(self, *args): return _pyossim.ossimLsrPoint_z(self, *args)
    def data(self, *args): return _pyossim.ossimLsrPoint_data(self, *args)
    def lsrSpace(self, *args): return _pyossim.ossimLsrPoint_lsrSpace(self, *args)
    def hasNans(self): return _pyossim.ossimLsrPoint_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrPoint_makeNan(self)
    def ossimLsrPoint_print(self, *args): return _pyossim.ossimLsrPoint_ossimLsrPoint_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrPoint
    __del__ = lambda self : None;
ossimLsrPoint_swigregister = _pyossim.ossimLsrPoint_swigregister
ossimLsrPoint_swigregister(ossimLsrPoint)

class ossimLsrRay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrRay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrRay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrRay(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrRay___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrRay___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrRay___ne__(self, *args)
    def origin(self): return _pyossim.ossimLsrRay_origin(self)
    def direction(self): return _pyossim.ossimLsrRay_direction(self)
    def lsrSpace(self): return _pyossim.ossimLsrRay_lsrSpace(self)
    def ossimLsrRay_ossimEcefRay(self): return _pyossim.ossimLsrRay_ossimLsrRay_ossimEcefRay(self)
    def hasNans(self): return _pyossim.ossimLsrRay_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrRay_makeNan(self)
    def extend(self, *args): return _pyossim.ossimLsrRay_extend(self, *args)
    def ossimLsrRay_print(self, *args): return _pyossim.ossimLsrRay_ossimLsrRay_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrRay
    __del__ = lambda self : None;
ossimLsrRay_swigregister = _pyossim.ossimLsrRay_swigregister
ossimLsrRay_swigregister(ossimLsrRay)

class ossimLsrSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimLsrSpace
    __del__ = lambda self : None;
    def __cmp__(self, *args): return _pyossim.ossimLsrSpace___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrSpace___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimLsrSpace___set__(self, *args)
    def origin(self): return _pyossim.ossimLsrSpace_origin(self)
    def lsrToEcefRotMatrix(self): return _pyossim.ossimLsrSpace_lsrToEcefRotMatrix(self)
    def ecefToLsrRotMatrix(self): return _pyossim.ossimLsrSpace_ecefToLsrRotMatrix(self)
    __swig_getmethods__["lsrSpaceErrorMessage"] = lambda x: _pyossim.ossimLsrSpace_lsrSpaceErrorMessage
    if _newclass:lsrSpaceErrorMessage = staticmethod(_pyossim.ossimLsrSpace_lsrSpaceErrorMessage)
    def ossimLsrSpace_print(self, *args): return _pyossim.ossimLsrSpace_ossimLsrSpace_print(self, *args)
ossimLsrSpace_swigregister = _pyossim.ossimLsrSpace_swigregister
ossimLsrSpace_swigregister(ossimLsrSpace)

def ossimLsrSpace_lsrSpaceErrorMessage(*args):
  return _pyossim.ossimLsrSpace_lsrSpaceErrorMessage(*args)
ossimLsrSpace_lsrSpaceErrorMessage = _pyossim.ossimLsrSpace_lsrSpaceErrorMessage

class ossimLsrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrVector___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrVector___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrVector___add__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimLsrVector___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimLsrVector___div__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrVector___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrVector___ne__(self, *args)
    def ossimLsrVector_ossimEcefVector(self): return _pyossim.ossimLsrVector_ossimLsrVector_ossimEcefVector(self)
    def dot(self, *args): return _pyossim.ossimLsrVector_dot(self, *args)
    def angleTo(self, *args): return _pyossim.ossimLsrVector_angleTo(self, *args)
    def cross(self, *args): return _pyossim.ossimLsrVector_cross(self, *args)
    def unitVector(self): return _pyossim.ossimLsrVector_unitVector(self)
    def magnitude(self): return _pyossim.ossimLsrVector_magnitude(self)
    def normalize(self): return _pyossim.ossimLsrVector_normalize(self)
    def x(self, *args): return _pyossim.ossimLsrVector_x(self, *args)
    def y(self, *args): return _pyossim.ossimLsrVector_y(self, *args)
    def z(self, *args): return _pyossim.ossimLsrVector_z(self, *args)
    def hasNans(self): return _pyossim.ossimLsrVector_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrVector_makeNan(self)
    def data(self, *args): return _pyossim.ossimLsrVector_data(self, *args)
    def lsrSpace(self, *args): return _pyossim.ossimLsrVector_lsrSpace(self, *args)
    def ossimLsrVector_print(self, *args): return _pyossim.ossimLsrVector_ossimLsrVector_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrVector
    __del__ = lambda self : None;
ossimLsrVector_swigregister = _pyossim.ossimLsrVector_swigregister
ossimLsrVector_swigregister(ossimLsrVector)

class ossimNadconGridDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconGridDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridDatum
    __del__ = lambda self : None;
ossimNadconGridDatum_swigregister = _pyossim.ossimNadconGridDatum_swigregister
ossimNadconGridDatum_swigregister(ossimNadconGridDatum)

class ossimNadconGridFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridFile
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimNadconGridFile_open(self, *args)
    def close(self): return _pyossim.ossimNadconGridFile_close(self)
    def getShiftAtLatLon(self, *args): return _pyossim.ossimNadconGridFile_getShiftAtLatLon(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimNadconGridFile_pointWithin(self, *args)
    def getBoundingRect(self): return _pyossim.ossimNadconGridFile_getBoundingRect(self)
    def getFilename(self): return _pyossim.ossimNadconGridFile_getFilename(self)
    def getFileOkFlag(self): return _pyossim.ossimNadconGridFile_getFileOkFlag(self)
    def getSpacing(self): return _pyossim.ossimNadconGridFile_getSpacing(self)
ossimNadconGridFile_swigregister = _pyossim.ossimNadconGridFile_swigregister
ossimNadconGridFile_swigregister(ossimNadconGridFile)

class ossimNadconGridHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridHeader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridHeader()
        try: self.this.append(this)
        except: self.this = this
    def readHeader(self, *args): return _pyossim.ossimNadconGridHeader_readHeader(self, *args)
    def getStartOffset(self): return _pyossim.ossimNadconGridHeader_getStartOffset(self)
    def getBytesPerRow(self): return _pyossim.ossimNadconGridHeader_getBytesPerRow(self)
    def getNumberOfRows(self): return _pyossim.ossimNadconGridHeader_getNumberOfRows(self)
    def getNumberOfCols(self): return _pyossim.ossimNadconGridHeader_getNumberOfCols(self)
    def getDeltaX(self): return _pyossim.ossimNadconGridHeader_getDeltaX(self)
    def getDeltaY(self): return _pyossim.ossimNadconGridHeader_getDeltaY(self)
    def getBoundingRect(self): return _pyossim.ossimNadconGridHeader_getBoundingRect(self)
    def getMinX(self): return _pyossim.ossimNadconGridHeader_getMinX(self)
    def getMinY(self): return _pyossim.ossimNadconGridHeader_getMinY(self)
    def getSpacing(self): return _pyossim.ossimNadconGridHeader_getSpacing(self)
    __swig_destroy__ = _pyossim.delete_ossimNadconGridHeader
    __del__ = lambda self : None;
ossimNadconGridHeader_swigregister = _pyossim.ossimNadconGridHeader_swigregister
ossimNadconGridHeader_swigregister(ossimNadconGridHeader)

class ossimNadconNarDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNarDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNarDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNarDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNarDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNarDatum
    __del__ = lambda self : None;
ossimNadconNarDatum_swigregister = _pyossim.ossimNadconNarDatum_swigregister
ossimNadconNarDatum_swigregister(ossimNadconNarDatum)

class ossimNadconNasDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNasDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNasDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNasDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNasDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNasDatum
    __del__ = lambda self : None;
ossimNadconNasDatum_swigregister = _pyossim.ossimNadconNasDatum_swigregister
ossimNadconNasDatum_swigregister(ossimNadconNasDatum)

ossimString_HEADER = _pyossim.ossimString_HEADER
class ossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    def contains(self, *args): return _pyossim.ossimString_contains(self, *args)
    def chars(self): return _pyossim.ossimString_chars(self)
    def __set__(self, *args): return _pyossim.ossimString___set__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimString___iadd__(self, *args)
    def at(self, *args): return _pyossim.ossimString_at(self, *args)
    def append(self, *args): return _pyossim.ossimString_append(self, *args)
    def __add__(self, *args): return _pyossim.ossimString___add__(self, *args)
    def __eq__(self, *args): return _pyossim.ossimString___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimString___ne__(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimString___getitem__(self, *args)
    def insert(self, *args): return _pyossim.ossimString_insert(self, *args)
    def push_back(self, *args): return _pyossim.ossimString_push_back(self, *args)
    def substr(self, *args): return _pyossim.ossimString_substr(self, *args)
    def trim(self, *args): return _pyossim.ossimString_trim(self, *args)
    def beforePos(self, *args): return _pyossim.ossimString_beforePos(self, *args)
    def afterPos(self, *args): return _pyossim.ossimString_afterPos(self, *args)
    def substitute(self, *args): return _pyossim.ossimString_substitute(self, *args)
    def gsub(self, *args): return _pyossim.ossimString_gsub(self, *args)
    def explode(self, *args): return _pyossim.ossimString_explode(self, *args)
    def expandEnvironmentVariable(self): return _pyossim.ossimString_expandEnvironmentVariable(self)
    def upcase(self, *args): return _pyossim.ossimString_upcase(self, *args)
    def downcase(self, *args): return _pyossim.ossimString_downcase(self, *args)
    def c_str(self): return _pyossim.ossimString_c_str(self)
    def data(self): return _pyossim.ossimString_data(self)
    def size(self): return _pyossim.ossimString_size(self)
    def length(self): return _pyossim.ossimString_length(self)
    def empty(self): return _pyossim.ossimString_empty(self)
    def string(self, *args): return _pyossim.ossimString_string(self, *args)
    def begin(self, *args): return _pyossim.ossimString_begin(self, *args)
    def end(self, *args): return _pyossim.ossimString_end(self, *args)
    def clear(self): return _pyossim.ossimString_clear(self)
    def erase(self, *args): return _pyossim.ossimString_erase(self, *args)
    def find(self, *args): return _pyossim.ossimString_find(self, *args)
    def rfind(self, *args): return _pyossim.ossimString_rfind(self, *args)
    def find_first_of(self, *args): return _pyossim.ossimString_find_first_of(self, *args)
    def find_first_not_of(self, *args): return _pyossim.ossimString_find_first_not_of(self, *args)
    def find_last_of(self, *args): return _pyossim.ossimString_find_last_of(self, *args)
    def assign(self, *args): return _pyossim.ossimString_assign(self, *args)
    def replace(self, *args): return _pyossim.ossimString_replace(self, *args)
    def reserve(self, *args): return _pyossim.ossimString_reserve(self, *args)
    def before(self, *args): return _pyossim.ossimString_before(self, *args)
    def after(self, *args): return _pyossim.ossimString_after(self, *args)
    def stringDup(self): return _pyossim.ossimString_stringDup(self)
    __swig_getmethods__["toBool"] = lambda x: _pyossim.ossimString_toBool
    if _newclass:toBool = staticmethod(_pyossim.ossimString_toBool)
    __swig_getmethods__["toUInt8"] = lambda x: _pyossim.ossimString_toUInt8
    if _newclass:toUInt8 = staticmethod(_pyossim.ossimString_toUInt8)
    __swig_getmethods__["toInt"] = lambda x: _pyossim.ossimString_toInt
    if _newclass:toInt = staticmethod(_pyossim.ossimString_toInt)
    __swig_getmethods__["toInt16"] = lambda x: _pyossim.ossimString_toInt16
    if _newclass:toInt16 = staticmethod(_pyossim.ossimString_toInt16)
    __swig_getmethods__["toUInt16"] = lambda x: _pyossim.ossimString_toUInt16
    if _newclass:toUInt16 = staticmethod(_pyossim.ossimString_toUInt16)
    __swig_getmethods__["toInt32"] = lambda x: _pyossim.ossimString_toInt32
    if _newclass:toInt32 = staticmethod(_pyossim.ossimString_toInt32)
    __swig_getmethods__["toUInt32"] = lambda x: _pyossim.ossimString_toUInt32
    if _newclass:toUInt32 = staticmethod(_pyossim.ossimString_toUInt32)
    __swig_getmethods__["toInt64"] = lambda x: _pyossim.ossimString_toInt64
    if _newclass:toInt64 = staticmethod(_pyossim.ossimString_toInt64)
    __swig_getmethods__["toUInt64"] = lambda x: _pyossim.ossimString_toUInt64
    if _newclass:toUInt64 = staticmethod(_pyossim.ossimString_toUInt64)
    __swig_getmethods__["toLong"] = lambda x: _pyossim.ossimString_toLong
    if _newclass:toLong = staticmethod(_pyossim.ossimString_toLong)
    __swig_getmethods__["toULong"] = lambda x: _pyossim.ossimString_toULong
    if _newclass:toULong = staticmethod(_pyossim.ossimString_toULong)
    __swig_getmethods__["toFloat32"] = lambda x: _pyossim.ossimString_toFloat32
    if _newclass:toFloat32 = staticmethod(_pyossim.ossimString_toFloat32)
    __swig_getmethods__["toFloat64"] = lambda x: _pyossim.ossimString_toFloat64
    if _newclass:toFloat64 = staticmethod(_pyossim.ossimString_toFloat64)
    __swig_getmethods__["toDouble"] = lambda x: _pyossim.ossimString_toDouble
    if _newclass:toDouble = staticmethod(_pyossim.ossimString_toDouble)
    __swig_getmethods__["toString"] = lambda x: _pyossim.ossimString_toString
    if _newclass:toString = staticmethod(_pyossim.ossimString_toString)
    __swig_getmethods__["stripLeading"] = lambda x: _pyossim.ossimString_stripLeading
    if _newclass:stripLeading = staticmethod(_pyossim.ossimString_stripLeading)
    def split(self, *args): return _pyossim.ossimString_split(self, *args)
    def join(self, *args): return _pyossim.ossimString_join(self, *args)
    def beforeRegExp(self, *args): return _pyossim.ossimString_beforeRegExp(self, *args)
    def fromRegExp(self, *args): return _pyossim.ossimString_fromRegExp(self, *args)
    def afterRegExp(self, *args): return _pyossim.ossimString_afterRegExp(self, *args)
    def match(self, *args): return _pyossim.ossimString_match(self, *args)
    def replaceAllThatMatch(self, *args): return _pyossim.ossimString_replaceAllThatMatch(self, *args)
    def replaceStrThatMatch(self, *args): return _pyossim.ossimString_replaceStrThatMatch(self, *args)
    def urlEncode(self): return _pyossim.ossimString_urlEncode(self)
    def getOssimId(self): return _pyossim.ossimString_getOssimId(self)
    __swig_destroy__ = _pyossim.delete_ossimString
    __del__ = lambda self : None;
ossimString_swigregister = _pyossim.ossimString_swigregister
ossimString_swigregister(ossimString)

def __rshift__(*args):
  return _pyossim.__rshift__(*args)
__rshift__ = _pyossim.__rshift__

def __lshift__(*args):
  return _pyossim.__lshift__(*args)
__lshift__ = _pyossim.__lshift__

def getline(*args):
  return _pyossim.getline(*args)
getline = _pyossim.getline

def __add__(*args):
  return _pyossim.__add__(*args)
__add__ = _pyossim.__add__

def __eq__(*args):
  return _pyossim.__eq__(*args)
__eq__ = _pyossim.__eq__

def ossimString_toBool(*args):
  return _pyossim.ossimString_toBool(*args)
ossimString_toBool = _pyossim.ossimString_toBool

def ossimString_toUInt8(*args):
  return _pyossim.ossimString_toUInt8(*args)
ossimString_toUInt8 = _pyossim.ossimString_toUInt8

def ossimString_toInt(*args):
  return _pyossim.ossimString_toInt(*args)
ossimString_toInt = _pyossim.ossimString_toInt

def ossimString_toInt16(*args):
  return _pyossim.ossimString_toInt16(*args)
ossimString_toInt16 = _pyossim.ossimString_toInt16

def ossimString_toUInt16(*args):
  return _pyossim.ossimString_toUInt16(*args)
ossimString_toUInt16 = _pyossim.ossimString_toUInt16

def ossimString_toInt32(*args):
  return _pyossim.ossimString_toInt32(*args)
ossimString_toInt32 = _pyossim.ossimString_toInt32

def ossimString_toUInt32(*args):
  return _pyossim.ossimString_toUInt32(*args)
ossimString_toUInt32 = _pyossim.ossimString_toUInt32

def ossimString_toInt64(*args):
  return _pyossim.ossimString_toInt64(*args)
ossimString_toInt64 = _pyossim.ossimString_toInt64

def ossimString_toUInt64(*args):
  return _pyossim.ossimString_toUInt64(*args)
ossimString_toUInt64 = _pyossim.ossimString_toUInt64

def ossimString_toLong(*args):
  return _pyossim.ossimString_toLong(*args)
ossimString_toLong = _pyossim.ossimString_toLong

def ossimString_toULong(*args):
  return _pyossim.ossimString_toULong(*args)
ossimString_toULong = _pyossim.ossimString_toULong

def ossimString_toFloat32(*args):
  return _pyossim.ossimString_toFloat32(*args)
ossimString_toFloat32 = _pyossim.ossimString_toFloat32

def ossimString_toFloat64(*args):
  return _pyossim.ossimString_toFloat64(*args)
ossimString_toFloat64 = _pyossim.ossimString_toFloat64

def ossimString_toDouble(*args):
  return _pyossim.ossimString_toDouble(*args)
ossimString_toDouble = _pyossim.ossimString_toDouble

def ossimString_toString(*args):
  return _pyossim.ossimString_toString(*args)
ossimString_toString = _pyossim.ossimString_toString

def ossimString_stripLeading(*args):
  return _pyossim.ossimString_stripLeading(*args)
ossimString_stripLeading = _pyossim.ossimString_stripLeading

class ossimStringLtstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStringLtstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStringLtstr, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _pyossim.ossimStringLtstr___call__(self, *args)
    def __init__(self): 
        this = _pyossim.new_ossimStringLtstr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimStringLtstr
    __del__ = lambda self : None;
ossimStringLtstr_swigregister = _pyossim.ossimStringLtstr_swigregister
ossimStringLtstr_swigregister(ossimStringLtstr)

class vectorOssimFileName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorOssimFileName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorOssimFileName, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorOssimFileName_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorOssimFileName___nonzero__(self)
    def __bool__(self): return _pyossim.vectorOssimFileName___bool__(self)
    def __len__(self): return _pyossim.vectorOssimFileName___len__(self)
    def pop(self): return _pyossim.vectorOssimFileName_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorOssimFileName___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorOssimFileName___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorOssimFileName___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorOssimFileName___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorOssimFileName___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorOssimFileName___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorOssimFileName_append(self, *args)
    def empty(self): return _pyossim.vectorOssimFileName_empty(self)
    def size(self): return _pyossim.vectorOssimFileName_size(self)
    def clear(self): return _pyossim.vectorOssimFileName_clear(self)
    def swap(self, *args): return _pyossim.vectorOssimFileName_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorOssimFileName_get_allocator(self)
    def begin(self): return _pyossim.vectorOssimFileName_begin(self)
    def end(self): return _pyossim.vectorOssimFileName_end(self)
    def rbegin(self): return _pyossim.vectorOssimFileName_rbegin(self)
    def rend(self): return _pyossim.vectorOssimFileName_rend(self)
    def pop_back(self): return _pyossim.vectorOssimFileName_pop_back(self)
    def erase(self, *args): return _pyossim.vectorOssimFileName_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorOssimFileName(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorOssimFileName_push_back(self, *args)
    def front(self): return _pyossim.vectorOssimFileName_front(self)
    def back(self): return _pyossim.vectorOssimFileName_back(self)
    def assign(self, *args): return _pyossim.vectorOssimFileName_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorOssimFileName_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorOssimFileName_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorOssimFileName_reserve(self, *args)
    def capacity(self): return _pyossim.vectorOssimFileName_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorOssimFileName
    __del__ = lambda self : None;
vectorOssimFileName_swigregister = _pyossim.vectorOssimFileName_swigregister
vectorOssimFileName_swigregister(vectorOssimFileName)

class ossimGeneralRasterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeneralRasterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeneralRasterInfo, name)
    __repr__ = _swig_repr
    NONE = _pyossim.ossimGeneralRasterInfo_NONE
    ZEROES_TO_MIN = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_MIN
    ZEROES_TO_NULL_EDGES_ONLY = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_NULL_EDGES_ONLY
    UNKNOWN = _pyossim.ossimGeneralRasterInfo_UNKNOWN
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeneralRasterInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeneralRasterInfo
    __del__ = lambda self : None;
    def imageRect(self): return _pyossim.ossimGeneralRasterInfo_imageRect(self)
    def validImageRect(self): return _pyossim.ossimGeneralRasterInfo_validImageRect(self)
    def rawImageRect(self): return _pyossim.ossimGeneralRasterInfo_rawImageRect(self)
    def subImageOffset(self): return _pyossim.ossimGeneralRasterInfo_subImageOffset(self)
    def headerSize(self): return _pyossim.ossimGeneralRasterInfo_headerSize(self)
    def fillToNullsMode(self): return _pyossim.ossimGeneralRasterInfo_fillToNullsMode(self)
    def setFillToNullsMode(self, *args): return _pyossim.ossimGeneralRasterInfo_setFillToNullsMode(self, *args)
    def setMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMinPixelValue(self, *args)
    def getMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMinPixelValue(self, *args)
    def setMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMaxPixelValue(self, *args)
    def getMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMaxPixelValue(self, *args)
    def setNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setNullPixelValue(self, *args)
    def getNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getNullPixelValue(self, *args)
    def setNumberOfBands(self, *args): return _pyossim.ossimGeneralRasterInfo_setNumberOfBands(self, *args)
    def pixelsToChop(self): return _pyossim.ossimGeneralRasterInfo_pixelsToChop(self)
    def numberOfBands(self): return _pyossim.ossimGeneralRasterInfo_numberOfBands(self)
    def interleaveType(self): return _pyossim.ossimGeneralRasterInfo_interleaveType(self)
    def getScalarType(self): return _pyossim.ossimGeneralRasterInfo_getScalarType(self)
    def validLines(self): return _pyossim.ossimGeneralRasterInfo_validLines(self)
    def rawLines(self): return _pyossim.ossimGeneralRasterInfo_rawLines(self)
    def bytesPerRawLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerRawLine(self)
    def bytesPerValidLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerValidLine(self)
    def validSamples(self): return _pyossim.ossimGeneralRasterInfo_validSamples(self)
    def rawSamples(self): return _pyossim.ossimGeneralRasterInfo_rawSamples(self)
    def offsetToFirstValidSample(self): return _pyossim.ossimGeneralRasterInfo_offsetToFirstValidSample(self)
    def getImageFileList(self): return _pyossim.ossimGeneralRasterInfo_getImageFileList(self)
    def setImageFileList(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageFileList(self, *args)
    def setHeaderSize(self, *args): return _pyossim.ossimGeneralRasterInfo_setHeaderSize(self, *args)
    def setInterleaveType(self, *args): return _pyossim.ossimGeneralRasterInfo_setInterleaveType(self, *args)
    def ossimGeneralRasterInfo_print(self, *args): return _pyossim.ossimGeneralRasterInfo_ossimGeneralRasterInfo_print(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageRect(self, *args)
    def setValidImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setValidImageRect(self, *args)
    def setRawImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setRawImageRect(self, *args)
    def setSubImageOffset(self, *args): return _pyossim.ossimGeneralRasterInfo_setSubImageOffset(self, *args)
    def bytesPerPixel(self, *args): return _pyossim.ossimGeneralRasterInfo_bytesPerPixel(self, *args)
    def getImageDataByteOrder(self): return _pyossim.ossimGeneralRasterInfo_getImageDataByteOrder(self)
    def setImageDataByteOrder(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageDataByteOrder(self, *args)
    def saveState(self, *args): return _pyossim.ossimGeneralRasterInfo_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeneralRasterInfo_loadState(self, *args)
ossimGeneralRasterInfo_swigregister = _pyossim.ossimGeneralRasterInfo_swigregister
ossimGeneralRasterInfo_swigregister(ossimGeneralRasterInfo)

class ossimHistoMatchRemapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimHistoMatchRemapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimHistoMatchRemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimHistoMatchRemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimHistoMatchRemapper_getTile(self, *args)
    def initialize(self): return _pyossim.ossimHistoMatchRemapper_initialize(self)
    def getInputMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getInputMeanValues(self)
    def getInputSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getInputSigmaValues(self)
    def getTargetMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetMeanValues(self)
    def getTargetSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetSigmaValues(self)
    def setInputMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputMeanValues(self, *args)
    def setInputSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputSigmaValues(self, *args)
    def setTargetMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetMeanValues(self, *args)
    def setTargetSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetSigmaValues(self, *args)
    def loadState(self, *args): return _pyossim.ossimHistoMatchRemapper_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimHistoMatchRemapper_saveState(self, *args)
ossimHistoMatchRemapper_swigregister = _pyossim.ossimHistoMatchRemapper_swigregister
ossimHistoMatchRemapper_swigregister(ossimHistoMatchRemapper)

class ossimIgenGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIgenGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIgenGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, input = None, output = None, view = None): 
        this = _pyossim.new_ossimIgenGenerator(input, output, view)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIgenGenerator
    __del__ = lambda self : None;
    def setInput(self, *args): return _pyossim.ossimIgenGenerator_setInput(self, *args)
    def generateSpecList(self, outputToFileFlag = False): return _pyossim.ossimIgenGenerator_generateSpecList(self, outputToFileFlag)
    def getImageFilenamesFromSpecList(self, *args): return _pyossim.ossimIgenGenerator_getImageFilenamesFromSpecList(self, *args)
    def getBoundingGround(self): return _pyossim.ossimIgenGenerator_getBoundingGround(self)
    def executeSpecList(self): return _pyossim.ossimIgenGenerator_executeSpecList(self)
    def setIteratorsToStart(self): return _pyossim.ossimIgenGenerator_setIteratorsToStart(self)
    def nextSpecFile(self, *args): return _pyossim.ossimIgenGenerator_nextSpecFile(self, *args)
    def getSpecs(self, *args): return _pyossim.ossimIgenGenerator_getSpecs(self, *args)
    def getNumberOfSpecFiles(self): return _pyossim.ossimIgenGenerator_getNumberOfSpecFiles(self)
    def getSpecFilename(self, specFileIndex = 0): return _pyossim.ossimIgenGenerator_getSpecFilename(self, specFileIndex)
    def buildExe(self, i = 0): return _pyossim.ossimIgenGenerator_buildExe(self, i)
    def getSpec(self, *args): return _pyossim.ossimIgenGenerator_getSpec(self, *args)
    def getInput(self, *args): return _pyossim.ossimIgenGenerator_getInput(self, *args)
    def getOutput(self, *args): return _pyossim.ossimIgenGenerator_getOutput(self, *args)
    def getView(self, *args): return _pyossim.ossimIgenGenerator_getView(self, *args)
    def setView(self, *args): return _pyossim.ossimIgenGenerator_setView(self, *args)
    def setOutput(self, *args): return _pyossim.ossimIgenGenerator_setOutput(self, *args)
    def setSpecFileLocation(self, *args): return _pyossim.ossimIgenGenerator_setSpecFileLocation(self, *args)
    def getSpecFileLocation(self): return _pyossim.ossimIgenGenerator_getSpecFileLocation(self)
    def setIgenExecutable(self, *args): return _pyossim.ossimIgenGenerator_setIgenExecutable(self, *args)
    def getIgenExecutable(self): return _pyossim.ossimIgenGenerator_getIgenExecutable(self)
    def setOutputPolygon(self, *args): return _pyossim.ossimIgenGenerator_setOutputPolygon(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimIgenGenerator_setPixelType(self, *args)
    def getOutputGeoPolygon(self, *args): return _pyossim.ossimIgenGenerator_getOutputGeoPolygon(self, *args)
    def setTilingFlag(self, *args): return _pyossim.ossimIgenGenerator_setTilingFlag(self, *args)
    def setTileSpacing(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacing(self, *args)
    def setTilePadding(self, *args): return _pyossim.ossimIgenGenerator_setTilePadding(self, *args)
    def setTileSpacingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacingUnits(self, *args)
    def setTilePaddingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTilePaddingUnits(self, *args)
    def getTilingFlag(self): return _pyossim.ossimIgenGenerator_getTilingFlag(self)
    def getTileSpacing(self): return _pyossim.ossimIgenGenerator_getTileSpacing(self)
    def getTilePadding(self): return _pyossim.ossimIgenGenerator_getTilePadding(self)
    def getTileSpacingUnits(self): return _pyossim.ossimIgenGenerator_getTileSpacingUnits(self)
    def getTilePaddingUnits(self): return _pyossim.ossimIgenGenerator_getTilePaddingUnits(self)
    def getPixelType(self): return _pyossim.ossimIgenGenerator_getPixelType(self)
    def setTileNamingConvention(self, *args): return _pyossim.ossimIgenGenerator_setTileNamingConvention(self, *args)
    def getTileNamingConvention(self): return _pyossim.ossimIgenGenerator_getTileNamingConvention(self)
    def getInputBoundingRect(self): return _pyossim.ossimIgenGenerator_getInputBoundingRect(self)
    def createProductProjection(self): return _pyossim.ossimIgenGenerator_createProductProjection(self)
    def createOutput(self): return _pyossim.ossimIgenGenerator_createOutput(self)
    def createInput(self): return _pyossim.ossimIgenGenerator_createInput(self)
ossimIgenGenerator_swigregister = _pyossim.ossimIgenGenerator_swigregister
ossimIgenGenerator_swigregister(ossimIgenGenerator)

class ossimImageChain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageChain, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimImageChain()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageChain
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyossim.ossimImageChain___getitem__(self, *args)
    def getConnectableObject(self, *args): return _pyossim.ossimImageChain_getConnectableObject(self, *args)
    def indexOf(self, *args): return _pyossim.ossimImageChain_indexOf(self, *args)
    def getFirstSource(self): return _pyossim.ossimImageChain_getFirstSource(self)
    def getFirstObject(self): return _pyossim.ossimImageChain_getFirstObject(self)
    def getLastSource(self): return _pyossim.ossimImageChain_getLastSource(self)
    def getLastObject(self): return _pyossim.ossimImageChain_getLastObject(self)
    def addFirst(self, *args): return _pyossim.ossimImageChain_addFirst(self, *args)
    def addLast(self, *args): return _pyossim.ossimImageChain_addLast(self, *args)
    def deleteFirst(self): return _pyossim.ossimImageChain_deleteFirst(self)
    def deleteLast(self): return _pyossim.ossimImageChain_deleteLast(self)
    def insertRight(self, *args): return _pyossim.ossimImageChain_insertRight(self, *args)
    def insertLeft(self, *args): return _pyossim.ossimImageChain_insertLeft(self, *args)
    def replace(self, *args): return _pyossim.ossimImageChain_replace(self, *args)
    def add(self, *args): return _pyossim.ossimImageChain_add(self, *args)
    def getTile(self, *args): return _pyossim.ossimImageChain_getTile(self, *args)
    def getNumberOfInputBands(self): return _pyossim.ossimImageChain_getNumberOfInputBands(self)
    def getOutputScalarType(self): return _pyossim.ossimImageChain_getOutputScalarType(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageChain_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageChain_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageChain_getMaxPixelValue(self, band)
    def getOutputBandList(self, *args): return _pyossim.ossimImageChain_getOutputBandList(self, *args)
    def getTileWidth(self): return _pyossim.ossimImageChain_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimImageChain_getTileHeight(self)
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimImageChain_getBoundingRect(self, resLevel)
    def getValidImageVertices(self, *args): return _pyossim.ossimImageChain_getValidImageVertices(self, *args)
    def getImageGeometry(self): return _pyossim.ossimImageChain_getImageGeometry(self)
    def getDecimationFactor(self, *args): return _pyossim.ossimImageChain_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimImageChain_getDecimationFactors(self, *args)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimImageChain_getNumberOfDecimationLevels(self)
    def saveState(self, *args): return _pyossim.ossimImageChain_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageChain_loadState(self, *args)
    def initialize(self): return _pyossim.ossimImageChain_initialize(self)
    def enableSource(self): return _pyossim.ossimImageChain_enableSource(self)
    def disableSource(self): return _pyossim.ossimImageChain_disableSource(self)
    def canConnectMyInputTo(self, *args): return _pyossim.ossimImageChain_canConnectMyInputTo(self, *args)
    def makeUniqueIds(self): return _pyossim.ossimImageChain_makeUniqueIds(self)
    def getNumberOfObjects(self, recurse = True): return _pyossim.ossimImageChain_getNumberOfObjects(self, recurse)
    def getNumberOfSources(self): return _pyossim.ossimImageChain_getNumberOfSources(self)
    def addChild(self, *args): return _pyossim.ossimImageChain_addChild(self, *args)
    def removeChild(self, *args): return _pyossim.ossimImageChain_removeChild(self, *args)
    def getChildren(self, *args): return _pyossim.ossimImageChain_getChildren(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageChain_disconnectInputEvent(self, *args)
    def disconnectOutputEvent(self, *args): return _pyossim.ossimImageChain_disconnectOutputEvent(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageChain_connectInputEvent(self, *args)
    def connectOutputEvent(self, *args): return _pyossim.ossimImageChain_connectOutputEvent(self, *args)
    def objectDestructingEvent(self, *args): return _pyossim.ossimImageChain_objectDestructingEvent(self, *args)
    def propagateEventToOutputs(self, *args): return _pyossim.ossimImageChain_propagateEventToOutputs(self, *args)
    def propagateEventToInputs(self, *args): return _pyossim.ossimImageChain_propagateEventToInputs(self, *args)
    def accept(self, *args): return _pyossim.ossimImageChain_accept(self, *args)
ossimImageChain_swigregister = _pyossim.ossimImageChain_swigregister
ossimImageChain_swigregister(ossimImageChain)

ossimImageGeometryFactory_HEADER = _pyossim.ossimImageGeometryFactory_HEADER
class ossimImageGeometryFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometryFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometryFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageGeometryFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageGeometryFactory_instance)
    def createGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_createGeometry(self, *args)
    def extendGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_extendGeometry(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageGeometryFactory_getTypeNameList(self, *args)
    def createTransform(self, *args): return _pyossim.ossimImageGeometryFactory_createTransform(self, *args)
    def createProjection(self, *args): return _pyossim.ossimImageGeometryFactory_createProjection(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageGeometryFactory
    __del__ = lambda self : None;
ossimImageGeometryFactory_swigregister = _pyossim.ossimImageGeometryFactory_swigregister
ossimImageGeometryFactory_swigregister(ossimImageGeometryFactory)

def ossimImageGeometryFactory_instance():
  return _pyossim.ossimImageGeometryFactory_instance()
ossimImageGeometryFactory_instance = _pyossim.ossimImageGeometryFactory_instance

class ossimImageMetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageMetaData
    __del__ = lambda self : None;
    def clear(self): return _pyossim.ossimImageMetaData_clear(self)
    def clearBandInfo(self): return _pyossim.ossimImageMetaData_clearBandInfo(self)
    def setDefaultsForArrays(self): return _pyossim.ossimImageMetaData_setDefaultsForArrays(self)
    def setNumberOfBands(self, *args): return _pyossim.ossimImageMetaData_setNumberOfBands(self, *args)
    def getNumberOfBands(self): return _pyossim.ossimImageMetaData_getNumberOfBands(self)
    def setScalarType(self, *args): return _pyossim.ossimImageMetaData_setScalarType(self, *args)
    def getScalarType(self): return _pyossim.ossimImageMetaData_getScalarType(self)
    def getMinPix(self, *args): return _pyossim.ossimImageMetaData_getMinPix(self, *args)
    def setMinPix(self, *args): return _pyossim.ossimImageMetaData_setMinPix(self, *args)
    def setMaxPix(self, *args): return _pyossim.ossimImageMetaData_setMaxPix(self, *args)
    def setNullPix(self, *args): return _pyossim.ossimImageMetaData_setNullPix(self, *args)
    def getMaxPix(self, *args): return _pyossim.ossimImageMetaData_getMaxPix(self, *args)
    def getNullPix(self, *args): return _pyossim.ossimImageMetaData_getNullPix(self, *args)
    def getMinPixelArray(self): return _pyossim.ossimImageMetaData_getMinPixelArray(self)
    def getMaxPixelArray(self): return _pyossim.ossimImageMetaData_getMaxPixelArray(self)
    def getNullPixelArray(self): return _pyossim.ossimImageMetaData_getNullPixelArray(self)
    def setMinValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMinValuesValid(self, *args)
    def setMaxValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMaxValuesValid(self, *args)
    def setNullValuesValid(self, *args): return _pyossim.ossimImageMetaData_setNullValuesValid(self, *args)
    def getMinValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMinValuesValidFlag(self)
    def getMaxValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMaxValuesValidFlag(self)
    def getNullValuesValidFlag(self): return _pyossim.ossimImageMetaData_getNullValuesValidFlag(self)
    def __set__(self, *args): return _pyossim.ossimImageMetaData___set__(self, *args)
    def isValid(self): return _pyossim.ossimImageMetaData_isValid(self)
    def assign(self, *args): return _pyossim.ossimImageMetaData_assign(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMetaData_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageMetaData_saveState(self, *args)
ossimImageMetaData_swigregister = _pyossim.ossimImageMetaData_swigregister
ossimImageMetaData_swigregister(ossimImageMetaData)

class ossimImageMetaDataWriterRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMetaDataWriterRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMetaDataWriterRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageMetaDataWriterRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageMetaDataWriterRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageMetaDataWriterRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_unregisterFactory(self, *args)
    def findFactory(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_findFactory(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_createObject(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_createWriter(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_getTypeNameList(self, *args)
    def getMetadatatypeList(self, *args): return _pyossim.ossimImageMetaDataWriterRegistry_getMetadatatypeList(self, *args)
ossimImageMetaDataWriterRegistry_swigregister = _pyossim.ossimImageMetaDataWriterRegistry_swigregister
ossimImageMetaDataWriterRegistry_swigregister(ossimImageMetaDataWriterRegistry)

def ossimImageMetaDataWriterRegistry_instance():
  return _pyossim.ossimImageMetaDataWriterRegistry_instance()
ossimImageMetaDataWriterRegistry_instance = _pyossim.ossimImageMetaDataWriterRegistry_instance


def ossimImageMetaDataWriterRegistryGetInstance():
  return _pyossim.ossimImageMetaDataWriterRegistryGetInstance()
ossimImageMetaDataWriterRegistryGetInstance = _pyossim.ossimImageMetaDataWriterRegistryGetInstance
class ossimImageMosaic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMosaic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMosaic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMosaic(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimImageMosaic_getTile(self, *args)
    def initialize(self): return _pyossim.ossimImageMosaic_initialize(self)
    def saveState(self, *args): return _pyossim.ossimImageMosaic_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMosaic_loadState(self, *args)
ossimImageMosaic_swigregister = _pyossim.ossimImageMosaic_swigregister
ossimImageMosaic_swigregister(ossimImageMosaic)

class ossimImageSourceFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSourceFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSourceFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def createImageSource(self, *args): return _pyossim.ossimImageSourceFactoryBase_createImageSource(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageSourceFactoryBase
    __del__ = lambda self : None;
ossimImageSourceFactoryBase_swigregister = _pyossim.ossimImageSourceFactoryBase_swigregister
ossimImageSourceFactoryBase_swigregister(ossimImageSourceFactoryBase)

class ossimImageWriterFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriterFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriterFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageWriterFactory
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageWriterFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageWriterFactory_instance)
    def createWriterFromExtension(self, *args): return _pyossim.ossimImageWriterFactory_createWriterFromExtension(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageWriterFactory_createWriter(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageWriterFactory_createObject(self, *args)
    def getExtensions(self, *args): return _pyossim.ossimImageWriterFactory_getExtensions(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageWriterFactory_getTypeNameList(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageWriterFactory_getImageTypeList(self, *args)
    def getImageFileWritersBySuffix(self, *args): return _pyossim.ossimImageWriterFactory_getImageFileWritersBySuffix(self, *args)
    def getImageFileWritersByMimeType(self, *args): return _pyossim.ossimImageWriterFactory_getImageFileWritersByMimeType(self, *args)
ossimImageWriterFactory_swigregister = _pyossim.ossimImageWriterFactory_swigregister
ossimImageWriterFactory_swigregister(ossimImageWriterFactory)

def ossimImageWriterFactory_instance():
  return _pyossim.ossimImageWriterFactory_instance()
ossimImageWriterFactory_instance = _pyossim.ossimImageWriterFactory_instance

class ossimImageWriterFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriterFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriterFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageWriterFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageWriterFactoryRegistry_instance)
    def createWriterFromExtension(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriterFromExtension(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriter(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getTypeNameList(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageTypeList(self, *args)
    def getImageFileWritersBySuffix(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix(self, *args)
    def getImageFileWritersByMimeType(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType(self, *args)
    def printImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printImageTypeList(self, *args)
    def printWriterProps(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printWriterProps(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageWriterFactoryRegistry
    __del__ = lambda self : None;
ossimImageWriterFactoryRegistry_swigregister = _pyossim.ossimImageWriterFactoryRegistry_swigregister
ossimImageWriterFactoryRegistry_swigregister(ossimImageWriterFactoryRegistry)

def ossimImageWriterFactoryRegistry_instance():
  return _pyossim.ossimImageWriterFactoryRegistry_instance()
ossimImageWriterFactoryRegistry_instance = _pyossim.ossimImageWriterFactoryRegistry_instance


def ossimImageWriterFactoryRegistryGetInstance():
  return _pyossim.ossimImageWriterFactoryRegistryGetInstance()
ossimImageWriterFactoryRegistryGetInstance = _pyossim.ossimImageWriterFactoryRegistryGetInstance
class ossimMapProjectionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMapProjectionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMapProjectionFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimMapProjectionFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimMapProjectionFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimMapProjectionFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimMapProjectionFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimMapProjectionFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimMapProjectionFactory
    __del__ = lambda self : None;
ossimMapProjectionFactory_swigregister = _pyossim.ossimMapProjectionFactory_swigregister
ossimMapProjectionFactory_swigregister(ossimMapProjectionFactory)

def ossimMapProjectionFactory_instance():
  return _pyossim.ossimMapProjectionFactory_instance()
ossimMapProjectionFactory_instance = _pyossim.ossimMapProjectionFactory_instance

class ossimMapProjectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMapProjectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMapProjectionInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimMapProjectionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimMapProjectionInfo
    __del__ = lambda self : None;
    def errorStatus(self): return _pyossim.ossimMapProjectionInfo_errorStatus(self)
    def getGeom(self, *args): return _pyossim.ossimMapProjectionInfo_getGeom(self, *args)
    def getMetersPerPixel(self): return _pyossim.ossimMapProjectionInfo_getMetersPerPixel(self)
    def getUsSurveyFeetPerPixel(self): return _pyossim.ossimMapProjectionInfo_getUsSurveyFeetPerPixel(self)
    def getDecimalDegreesPerPixel(self): return _pyossim.ossimMapProjectionInfo_getDecimalDegreesPerPixel(self)
    def ulEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPt(self)
    def urEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPt(self)
    def lrEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPt(self)
    def llEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPt(self)
    def ulEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPtInFt(self)
    def urEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPtInFt(self)
    def lrEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPtInFt(self)
    def llEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPtInFt(self)
    def ulGroundPt(self): return _pyossim.ossimMapProjectionInfo_ulGroundPt(self)
    def urGroundPt(self): return _pyossim.ossimMapProjectionInfo_urGroundPt(self)
    def lrGroundPt(self): return _pyossim.ossimMapProjectionInfo_lrGroundPt(self)
    def llGroundPt(self): return _pyossim.ossimMapProjectionInfo_llGroundPt(self)
    def centerGroundPt(self): return _pyossim.ossimMapProjectionInfo_centerGroundPt(self)
    def centerEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_centerEastingNorthingPt(self)
    def linesPerImage(self): return _pyossim.ossimMapProjectionInfo_linesPerImage(self)
    def pixelsPerLine(self): return _pyossim.ossimMapProjectionInfo_pixelsPerLine(self)
    def ossimMapProjectionInfo_print(self, *args): return _pyossim.ossimMapProjectionInfo_ossimMapProjectionInfo_print(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimMapProjectionInfo_setPixelType(self, *args)
    def getPixelType(self): return _pyossim.ossimMapProjectionInfo_getPixelType(self)
    def setOutputFeetFlag(self, *args): return _pyossim.ossimMapProjectionInfo_setOutputFeetFlag(self, *args)
    def unitsInFeet(self): return _pyossim.ossimMapProjectionInfo_unitsInFeet(self)
    def getImageInfoString(self): return _pyossim.ossimMapProjectionInfo_getImageInfoString(self)
    def setImageInfoString(self, *args): return _pyossim.ossimMapProjectionInfo_setImageInfoString(self, *args)
    def getProjection(self): return _pyossim.ossimMapProjectionInfo_getProjection(self)
    __swig_setmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set
    __swig_getmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get
    if _newclass:README_IMAGE_STRING_KW = _swig_property(_pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get, _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set)
    __swig_setmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set
    __swig_getmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get
    if _newclass:PIXEL_TYPE_KW = _swig_property(_pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get, _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set)
    __swig_setmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set
    __swig_getmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get
    if _newclass:OUTPUT_US_FT_INFO_KW = _swig_property(_pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get, _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set)
    def loadState(self, *args): return _pyossim.ossimMapProjectionInfo_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimMapProjectionInfo_saveState(self, *args)
ossimMapProjectionInfo_swigregister = _pyossim.ossimMapProjectionInfo_swigregister
ossimMapProjectionInfo_swigregister(ossimMapProjectionInfo)
cvar = _pyossim.cvar

class ossimProjectionFactoryRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProjectionFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProjectionFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimProjectionFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimProjectionFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimProjectionFactoryRegistry_instance)
    def createProjection(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimProjectionFactoryRegistry_getTypeNameList(self, *args)
ossimProjectionFactoryRegistry_swigregister = _pyossim.ossimProjectionFactoryRegistry_swigregister
ossimProjectionFactoryRegistry_swigregister(ossimProjectionFactoryRegistry)

def ossimProjectionFactoryRegistry_instance():
  return _pyossim.ossimProjectionFactoryRegistry_instance()
ossimProjectionFactoryRegistry_instance = _pyossim.ossimProjectionFactoryRegistry_instance


def ossimProjectionFactoryRegistryGetInstance():
  return _pyossim.ossimProjectionFactoryRegistryGetInstance()
ossimProjectionFactoryRegistryGetInstance = _pyossim.ossimProjectionFactoryRegistryGetInstance
class ossimSensorModelFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModelFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModelFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimSensorModelFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimSensorModelFactory_instance)
    def createProjection(self, *args): return _pyossim.ossimSensorModelFactory_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimSensorModelFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimSensorModelFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimSensorModelFactory
    __del__ = lambda self : None;
ossimSensorModelFactory_swigregister = _pyossim.ossimSensorModelFactory_swigregister
ossimSensorModelFactory_swigregister(ossimSensorModelFactory)

def ossimSensorModelFactory_instance():
  return _pyossim.ossimSensorModelFactory_instance()
ossimSensorModelFactory_instance = _pyossim.ossimSensorModelFactory_instance

class ossimRpcPqeInputs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRpcPqeInputs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRpcPqeInputs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimRpcPqeInputs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimRpcPqeInputs
    __del__ = lambda self : None;
    __swig_setmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set
    __swig_getmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get
    if _newclass:theRpcElevationAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get, _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set)
    __swig_setmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set
    __swig_getmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get
    if _newclass:theRpcAzimuthAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get, _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set)
    __swig_setmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_set
    __swig_getmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_get
    if _newclass:theRpcBiasError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcBiasError_get, _pyossim.ossimRpcPqeInputs_theRpcBiasError_set)
    __swig_setmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_set
    __swig_getmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_get
    if _newclass:theRpcRandError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcRandError_get, _pyossim.ossimRpcPqeInputs_theRpcRandError_set)
    __swig_setmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set
    __swig_getmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get
    if _newclass:theSurfaceNormalVector = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get, _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set)
    __swig_setmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set
    __swig_getmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get
    if _newclass:theSurfaceCovMatrix = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get, _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set)
ossimRpcPqeInputs_swigregister = _pyossim.ossimRpcPqeInputs_swigregister
ossimRpcPqeInputs_swigregister(ossimRpcPqeInputs)

class ossimSensorModelTuple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModelTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModelTuple, name)
    __repr__ = _swig_repr
    OBS_INIT = _pyossim.ossimSensorModelTuple_OBS_INIT
    EVALUATE = _pyossim.ossimSensorModelTuple_EVALUATE
    P_WRT_X = _pyossim.ossimSensorModelTuple_P_WRT_X
    P_WRT_Y = _pyossim.ossimSensorModelTuple_P_WRT_Y
    P_WRT_Z = _pyossim.ossimSensorModelTuple_P_WRT_Z
    OP_SUCCESS = _pyossim.ossimSensorModelTuple_OP_SUCCESS
    ERROR_PROP_FAIL = _pyossim.ossimSensorModelTuple_ERROR_PROP_FAIL
    OP_FAIL = _pyossim.ossimSensorModelTuple_OP_FAIL
    def __init__(self): 
        this = _pyossim.new_ossimSensorModelTuple()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimSensorModelTuple
    __del__ = lambda self : None;
    def addImage(self, *args): return _pyossim.ossimSensorModelTuple_addImage(self, *args)
    def ossimSensorModelTuple_print(self, *args): return _pyossim.ossimSensorModelTuple_ossimSensorModelTuple_print(self, *args)
    def intersect(self, *args): return _pyossim.ossimSensorModelTuple_intersect(self, *args)
    def setIntersectionSurfaceAccuracy(self, *args): return _pyossim.ossimSensorModelTuple_setIntersectionSurfaceAccuracy(self, *args)
    def getRpcPqeInputs(self, *args): return _pyossim.ossimSensorModelTuple_getRpcPqeInputs(self, *args)
ossimSensorModelTuple_swigregister = _pyossim.ossimSensorModelTuple_swigregister
ossimSensorModelTuple_swigregister(ossimSensorModelTuple)

# This file is compatible with both classic and new-style classes.


