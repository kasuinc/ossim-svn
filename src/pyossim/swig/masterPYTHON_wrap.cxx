/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DirectMap swig_types[0]
#define SWIGTYPE_p_ElevationDatabaseListType swig_types[1]
#define SWIGTYPE_p_FilenameListType swig_types[2]
#define SWIGTYPE_p_NEWMAT__Matrix swig_types[3]
#define SWIGTYPE_p_NEWMAT__SymmetricMatrix swig_types[4]
#define SWIGTYPE_p_StringListType swig_types[5]
#define SWIGTYPE_p_Timer_t swig_types[6]
#define SWIGTYPE_p_allocator_type swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_const_iterator swig_types[9]
#define SWIGTYPE_p_difference_type swig_types[10]
#define SWIGTYPE_p_double swig_types[11]
#define SWIGTYPE_p_float swig_types[12]
#define SWIGTYPE_p_int swig_types[13]
#define SWIGTYPE_p_iterator swig_types[14]
#define SWIGTYPE_p_listT_ossimString_t swig_types[15]
#define SWIGTYPE_p_long_long swig_types[16]
#define SWIGTYPE_p_ossim2dLinearRegression swig_types[17]
#define SWIGTYPE_p_ossim2dTo2dTransform swig_types[18]
#define SWIGTYPE_p_ossim2dTo2dTransformFactory swig_types[19]
#define SWIGTYPE_p_ossimAdjustableParameterInfo swig_types[20]
#define SWIGTYPE_p_ossimAnnotationMultiEllipseObject swig_types[21]
#define SWIGTYPE_p_ossimAnnotationObject swig_types[22]
#define SWIGTYPE_p_ossimAnnotationObjectFactory swig_types[23]
#define SWIGTYPE_p_ossimArgumentParser swig_types[24]
#define SWIGTYPE_p_ossimBitMaskWriter swig_types[25]
#define SWIGTYPE_p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t swig_types[26]
#define SWIGTYPE_p_ossimColumnVector3d swig_types[27]
#define SWIGTYPE_p_ossimConnectableObject swig_types[28]
#define SWIGTYPE_p_ossimConnectableObject__ConnectableObjectList swig_types[29]
#define SWIGTYPE_p_ossimConnectionEvent swig_types[30]
#define SWIGTYPE_p_ossimCsvFile swig_types[31]
#define SWIGTYPE_p_ossimDatum swig_types[32]
#define SWIGTYPE_p_ossimDatumFactory swig_types[33]
#define SWIGTYPE_p_ossimDatumFactoryInterface swig_types[34]
#define SWIGTYPE_p_ossimDatumFactoryRegistry swig_types[35]
#define SWIGTYPE_p_ossimDirectory swig_types[36]
#define SWIGTYPE_p_ossimDirectoryData swig_types[37]
#define SWIGTYPE_p_ossimDpt swig_types[38]
#define SWIGTYPE_p_ossimDpt3d swig_types[39]
#define SWIGTYPE_p_ossimDrect swig_types[40]
#define SWIGTYPE_p_ossimDtedElevationDatabase swig_types[41]
#define SWIGTYPE_p_ossimEbcdicToAscii swig_types[42]
#define SWIGTYPE_p_ossimEcefPoint swig_types[43]
#define SWIGTYPE_p_ossimEcefRay swig_types[44]
#define SWIGTYPE_p_ossimEcefVector swig_types[45]
#define SWIGTYPE_p_ossimElevCellHandler swig_types[46]
#define SWIGTYPE_p_ossimElevCellHandlerFactory swig_types[47]
#define SWIGTYPE_p_ossimElevManager swig_types[48]
#define SWIGTYPE_p_ossimElevUtil swig_types[49]
#define SWIGTYPE_p_ossimElevationDatabase swig_types[50]
#define SWIGTYPE_p_ossimElevationDatabaseFactory swig_types[51]
#define SWIGTYPE_p_ossimElevationDatabaseRegistry swig_types[52]
#define SWIGTYPE_p_ossimEllipsoid swig_types[53]
#define SWIGTYPE_p_ossimEllipsoidFactory swig_types[54]
#define SWIGTYPE_p_ossimEnvironmentUtility swig_types[55]
#define SWIGTYPE_p_ossimEpsgDatumFactory swig_types[56]
#define SWIGTYPE_p_ossimEpsgProjectionDatabase swig_types[57]
#define SWIGTYPE_p_ossimEpsgProjectionFactory swig_types[58]
#define SWIGTYPE_p_ossimEquTokenizerFlexLexer swig_types[59]
#define SWIGTYPE_p_ossimErrorCodes swig_types[60]
#define SWIGTYPE_p_ossimEvent swig_types[61]
#define SWIGTYPE_p_ossimException swig_types[62]
#define SWIGTYPE_p_ossimFileWalker swig_types[63]
#define SWIGTYPE_p_ossimFilename swig_types[64]
#define SWIGTYPE_p_ossimFilter swig_types[65]
#define SWIGTYPE_p_ossimFilterResampler swig_types[66]
#define SWIGTYPE_p_ossimFilterTable swig_types[67]
#define SWIGTYPE_p_ossimFontInformation swig_types[68]
#define SWIGTYPE_p_ossimFpt swig_types[69]
#define SWIGTYPE_p_ossimGeneralRasterInfo swig_types[70]
#define SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject swig_types[71]
#define SWIGTYPE_p_ossimGeoPolygon swig_types[72]
#define SWIGTYPE_p_ossimGeoTiffCoordTransformsLut swig_types[73]
#define SWIGTYPE_p_ossimGeoTiffDatumLut swig_types[74]
#define SWIGTYPE_p_ossimGeoidNgsHeader swig_types[75]
#define SWIGTYPE_p_ossimGeoref swig_types[76]
#define SWIGTYPE_p_ossimGpt swig_types[77]
#define SWIGTYPE_p_ossimGrect swig_types[78]
#define SWIGTYPE_p_ossimGridRemapEngine swig_types[79]
#define SWIGTYPE_p_ossimGridRemapEngineFactory swig_types[80]
#define SWIGTYPE_p_ossimHistoMatchRemapper swig_types[81]
#define SWIGTYPE_p_ossimId swig_types[82]
#define SWIGTYPE_p_ossimIgenGenerator swig_types[83]
#define SWIGTYPE_p_ossimImageChain swig_types[84]
#define SWIGTYPE_p_ossimImageData swig_types[85]
#define SWIGTYPE_p_ossimImageDataHelper swig_types[86]
#define SWIGTYPE_p_ossimImageFileWriter swig_types[87]
#define SWIGTYPE_p_ossimImageGeometry swig_types[88]
#define SWIGTYPE_p_ossimImageGeometryFactory swig_types[89]
#define SWIGTYPE_p_ossimImageHandler swig_types[90]
#define SWIGTYPE_p_ossimImageMetaData swig_types[91]
#define SWIGTYPE_p_ossimImageMetaDataWriterFactoryBase swig_types[92]
#define SWIGTYPE_p_ossimImageMetaDataWriterRegistry swig_types[93]
#define SWIGTYPE_p_ossimImageMosaic swig_types[94]
#define SWIGTYPE_p_ossimImageSource swig_types[95]
#define SWIGTYPE_p_ossimImageSourceFactoryBase swig_types[96]
#define SWIGTYPE_p_ossimImageWriterFactory swig_types[97]
#define SWIGTYPE_p_ossimImageWriterFactoryBase__ImageFileWriterList swig_types[98]
#define SWIGTYPE_p_ossimImageWriterFactoryRegistry swig_types[99]
#define SWIGTYPE_p_ossimInfo swig_types[100]
#define SWIGTYPE_p_ossimInit swig_types[101]
#define SWIGTYPE_p_ossimIpt swig_types[102]
#define SWIGTYPE_p_ossimIrect swig_types[103]
#define SWIGTYPE_p_ossimKeyword swig_types[104]
#define SWIGTYPE_p_ossimKeywordlist swig_types[105]
#define SWIGTYPE_p_ossimLine swig_types[106]
#define SWIGTYPE_p_ossimLocalTm swig_types[107]
#define SWIGTYPE_p_ossimLsrPoint swig_types[108]
#define SWIGTYPE_p_ossimLsrRay swig_types[109]
#define SWIGTYPE_p_ossimLsrSpace swig_types[110]
#define SWIGTYPE_p_ossimLsrVector swig_types[111]
#define SWIGTYPE_p_ossimMapProjection swig_types[112]
#define SWIGTYPE_p_ossimMapProjectionFactory swig_types[113]
#define SWIGTYPE_p_ossimMapProjectionInfo swig_types[114]
#define SWIGTYPE_p_ossimMaskFilter swig_types[115]
#define SWIGTYPE_p_ossimMatrix4x4 swig_types[116]
#define SWIGTYPE_p_ossimNadconGridDatum swig_types[117]
#define SWIGTYPE_p_ossimNadconGridFile swig_types[118]
#define SWIGTYPE_p_ossimNadconGridHeader swig_types[119]
#define SWIGTYPE_p_ossimNadconNarDatum swig_types[120]
#define SWIGTYPE_p_ossimNadconNasDatum swig_types[121]
#define SWIGTYPE_p_ossimNitfProjectionFactory swig_types[122]
#define SWIGTYPE_p_ossimNormalizedRemapTable swig_types[123]
#define SWIGTYPE_p_ossimNormalizedS16RemapTable swig_types[124]
#define SWIGTYPE_p_ossimNormalizedU11RemapTable swig_types[125]
#define SWIGTYPE_p_ossimNormalizedU16RemapTable swig_types[126]
#define SWIGTYPE_p_ossimNormalizedU8RemapTable swig_types[127]
#define SWIGTYPE_p_ossimObject swig_types[128]
#define SWIGTYPE_p_ossimObjectDestructingEvent swig_types[129]
#define SWIGTYPE_p_ossimOverviewBuilderBase swig_types[130]
#define SWIGTYPE_p_ossimOverviewBuilderFactory swig_types[131]
#define SWIGTYPE_p_ossimOverviewBuilderFactoryBase swig_types[132]
#define SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry swig_types[133]
#define SWIGTYPE_p_ossimOverviewSequencer swig_types[134]
#define SWIGTYPE_p_ossimPolygon swig_types[135]
#define SWIGTYPE_p_ossimPositionQualityEvaluator swig_types[136]
#define SWIGTYPE_p_ossimProjection swig_types[137]
#define SWIGTYPE_p_ossimProjectionFactoryRegistry swig_types[138]
#define SWIGTYPE_p_ossimRefPtrT_ossimCsvFile__Record_t swig_types[139]
#define SWIGTYPE_p_ossimRefPtrT_ossimIFStream_t swig_types[140]
#define SWIGTYPE_p_ossimRefPtrT_ossimImageData_t swig_types[141]
#define SWIGTYPE_p_ossimRefPtrT_ossimImageGeometry_t swig_types[142]
#define SWIGTYPE_p_ossimRefPtrT_ossimImageHandler_t swig_types[143]
#define SWIGTYPE_p_ossimRefPtrT_ossimMetadataFileWriter_t swig_types[144]
#define SWIGTYPE_p_ossimRefPtrT_ossimTieGpt_t swig_types[145]
#define SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t swig_types[146]
#define SWIGTYPE_p_ossimRgbImage swig_types[147]
#define SWIGTYPE_p_ossimRgbVector swig_types[148]
#define SWIGTYPE_p_ossimRpcPqeInputs swig_types[149]
#define SWIGTYPE_p_ossimRpfToc swig_types[150]
#define SWIGTYPE_p_ossimRpfTocEntry swig_types[151]
#define SWIGTYPE_p_ossimRpfUtil swig_types[152]
#define SWIGTYPE_p_ossimSensorModel swig_types[153]
#define SWIGTYPE_p_ossimSensorModelFactory swig_types[154]
#define SWIGTYPE_p_ossimSensorModelTuple swig_types[155]
#define SWIGTYPE_p_ossimStatePlaneProjectionInfo swig_types[156]
#define SWIGTYPE_p_ossimStreamBase swig_types[157]
#define SWIGTYPE_p_ossimStreamFactory swig_types[158]
#define SWIGTYPE_p_ossimStreamFactoryBase swig_types[159]
#define SWIGTYPE_p_ossimStreamFactoryRegistry swig_types[160]
#define SWIGTYPE_p_ossimString swig_types[161]
#define SWIGTYPE_p_ossimStringLtstr swig_types[162]
#define SWIGTYPE_p_ossimTDpt swig_types[163]
#define SWIGTYPE_p_ossimTempFilename swig_types[164]
#define SWIGTYPE_p_ossimThinPlateSpline swig_types[165]
#define SWIGTYPE_p_ossimThreeParamDatum swig_types[166]
#define SWIGTYPE_p_ossimTieGpt swig_types[167]
#define SWIGTYPE_p_ossimTieGptSet swig_types[168]
#define SWIGTYPE_p_ossimTiffProjectionFactory swig_types[169]
#define SWIGTYPE_p_ossimTileHash swig_types[170]
#define SWIGTYPE_p_ossimTiledImageHash swig_types[171]
#define SWIGTYPE_p_ossimTimer swig_types[172]
#define SWIGTYPE_p_ossimTrace swig_types[173]
#define SWIGTYPE_p_ossimTraceManager swig_types[174]
#define SWIGTYPE_p_ossimUpspt swig_types[175]
#define SWIGTYPE_p_ossimUtmpt swig_types[176]
#define SWIGTYPE_p_ossimVisitor swig_types[177]
#define SWIGTYPE_p_ostream swig_types[178]
#define SWIGTYPE_p_p_PyObject swig_types[179]
#define SWIGTYPE_p_p_char swig_types[180]
#define SWIGTYPE_p_pqeErrorEllipse swig_types[181]
#define SWIGTYPE_p_pqeRPCModel swig_types[182]
#define SWIGTYPE_p_short swig_types[183]
#define SWIGTYPE_p_signed_char swig_types[184]
#define SWIGTYPE_p_size_type swig_types[185]
#define SWIGTYPE_p_std__allocatorT_ossimFilename_t swig_types[186]
#define SWIGTYPE_p_std__allocatorT_ossimString_t swig_types[187]
#define SWIGTYPE_p_std__exception swig_types[188]
#define SWIGTYPE_p_std__invalid_argument swig_types[189]
#define SWIGTYPE_p_std__ios_base__openmode swig_types[190]
#define SWIGTYPE_p_std__istream swig_types[191]
#define SWIGTYPE_p_std__listT_ossimString_t swig_types[192]
#define SWIGTYPE_p_std__ostream swig_types[193]
#define SWIGTYPE_p_std__string swig_types[194]
#define SWIGTYPE_p_std__string__const_iterator swig_types[195]
#define SWIGTYPE_p_std__string__iterator swig_types[196]
#define SWIGTYPE_p_std__string__size_type swig_types[197]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[199]
#define SWIGTYPE_p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t swig_types[200]
#define SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t swig_types[201]
#define SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t swig_types[202]
#define SWIGTYPE_p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t swig_types[203]
#define SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t swig_types[204]
#define SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t swig_types[205]
#define SWIGTYPE_p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t swig_types[206]
#define SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t swig_types[207]
#define SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t swig_types[208]
#define SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t swig_types[209]
#define SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t swig_types[210]
#define SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t swig_types[211]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[212]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[213]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[214]
#define SWIGTYPE_p_unsigned_char swig_types[215]
#define SWIGTYPE_p_unsigned_int swig_types[216]
#define SWIGTYPE_p_unsigned_long_long swig_types[217]
#define SWIGTYPE_p_unsigned_short swig_types[218]
#define SWIGTYPE_p_value_type swig_types[219]
#define SWIGTYPE_p_vizGeorefInterType swig_types[220]
#define SWIGTYPE_p_void swig_types[221]
static swig_type_info *swig_types[223];
static swig_module_info swig_module = {swig_types, 222, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pyossim.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pyossim

#else
#  define SWIG_init    init_pyossim

#endif
#define SWIG_name    "_pyossim"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}



#include <ossim/init/ossimInit.h>
#include <ossim/base/ossimFilename.h>        
#include <ossim/base/ossimConstants.h>



  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





#include <ossim/elevation/ossimDtedElevationDatabase.h>


  #define SWIG_From_double   PyFloat_FromDouble 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


#include <ossim/elevation/ossimDtedFactory.h>


#include <ossim/elevation/ossimDtedHandler.h>


#include <ossim/elevation/ossimElevationDatabaseFactory.h>


#include <ossim/elevation/ossimElevationDatabase.h>


#include <ossim/elevation/ossimElevationDatabaseRegistry.h>


#include <ossim/base/ossimString.h>
#include <ossim/elevation/ossimElevCellHandlerFactory.h>


#include <ossim/elevation/ossimElevCellHandler.h>


#include <ossim/elevation/ossimElevManager.h>


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


#include <ossim/elevation/ossimElevSourceFactory.h>


#include <ossim/elevation/ossimElevSource.h>



#include <ossim/elevation/ossimElevationDatabase.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/elevation/ossimGeneralRasterElevHandler.h>
#include <ossim/elevation/ossimGeneralRasterElevationDatabase.h>
#include <OpenThreads/Mutex>



#include <ossim/elevation/ossimGeneralRasterElevFactory.h>


#include <ossim/elevation/ossimGeneralRasterElevHandler.h>


#include <ossim/elevation/ossimImageElevationDatabase.h>


#include <ossim/elevation/ossimImageElevationHandler.h>


#include <ossim/elevation/ossimSrtmElevationDatabase.h>


#include <ossim/elevation/ossimSrtmFactory.h>


#include <ossim/elevation/ossimSrtmHandler.h>



#include <ossim/base/ossim2dBilinearTransform.h>
#include <ossim/base/ossim2dTo2dTransform.h>
#include <algorithm>



        
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossim2dLinearRegression.h>
#include <vector>
#include <iostream>




#include <ossim/base/ossim2dTo2dTransform.h>
#include <ossim/base/ossim2dTo2dIdentityTransform.h>




#include <ossim/base/ossim2dTo2dTransform.h>
#include <ossim/base/ossim2dTo2dShiftTransform.h>




#include <ossim/base/ossim2dTo2dTransformFactoryBase.h>
#include <ossim/base/ossim2dTo2dTransformFactory.h>




#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossim2dTo2dTransform.h>




#include <ossim/base/ossimObjectFactory.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossim2dTo2dTransformFactoryBase.h>
#include <ossim/base/ossim2dTo2dTransform.h>
#include <vector>
#include <ossim/base/ossimFactoryListInterface.h>
#include <ossim/base/ossim2dTo2dTransformRegistry.h>




#include <iostream>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimKeywordlist.h>
#include <ossim/base/ossimAdjustableParameterInfo.h>



SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}



#include <ossim/base/ossimRtti.h>
#include <vector>
#include <ossim/base/ossimAdjustmentInfo.h>
#include <ossim/base/ossimKeywordlist.h>
#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimAdjustableParameterInterface.h>




#include <map>

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimConnectableObject.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimConnectableContainerInterface.h>
#include <ossim/base/ossimConnectableContainer.h>




#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossimId.h>
#include <ossim/base/ossimConnectableObject.h>
#include <ossim/base/ossimConnectableContainerInterface.h>
#include <vector>



#include <ossim/base/ossimListener.h>
#include <ossim/base/ossimConnectableDisplayListener.h>


#include <ossim/base/ossimConnectableObject.h>


#include <ossim/base/ossimConnectableObjectListener.h>



#include <ossim/base/ossimEvent.h>
#include <ossim/base/ossimEventIds.h>
#include <ossim/base/ossimContainerEvent.h>




#include <vector>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimProperty.h>
#include <ossim/base/ossimContainerProperty.h>



#include <ossim/base/ossimReferenced.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimCsvFile.h>
#include <map>
#include <vector>
#include <fstream>


#include <ossim/base/ossimObjectFactory.h>
#include <ossim/base/ossimCustomEditorWindowFactoryBase.h>


#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimCustomEditorWindow.h>


#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimCustomEditorWindow.h>
#include <ossim/base/ossimCustomEditorWindowRegistry.h>
#include <ossim/base/ossimCustomEditorWindowFactoryBase.h>

#include <vector>


#include <ossim/base/ossimDataObject.h>



#include <ossim/base/ossimProperty.h>
#include <ossim/base/ossimDate.h>
#include <ossim/base/ossimDateProperty.h>



#include <ossim/base/ossimDatumFactory.h>
#include <ossim/base/ossimString.h>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <string>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<ossimString > {
      typedef pointer_category category;
      static const char* type_name() { return"ossimString"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<ossimString, std::allocator< ossimString > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ossimString" "," "std::allocator< ossimString >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ossimString_Sg__iterator(std::vector< ossimString > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ossimString_Sg____nonzero__(std::vector< ossimString > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ossimString_Sg____bool__(std::vector< ossimString > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ossimString >::size_type std_vector_Sl_ossimString_Sg____len__(std::vector< ossimString > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< ossimString >::value_type std_vector_Sl_ossimString_Sg__pop(std::vector< ossimString > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<ossimString,std::allocator< ossimString > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< ossimString,std::allocator< ossimString > > *std_vector_Sl_ossimString_Sg____getslice__(std::vector< ossimString > *self,std::vector< ossimString >::difference_type i,std::vector< ossimString >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____setslice____SWIG_0(std::vector< ossimString > *self,std::vector< ossimString >::difference_type i,std::vector< ossimString >::difference_type j,std::vector< ossimString,std::allocator< ossimString > > const &v=std::vector< ossimString,std::allocator< ossimString > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____delslice__(std::vector< ossimString > *self,std::vector< ossimString >::difference_type i,std::vector< ossimString >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____delitem____SWIG_0(std::vector< ossimString > *self,std::vector< ossimString >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< ossimString,std::allocator< ossimString > > *std_vector_Sl_ossimString_Sg____getitem____SWIG_0(std::vector< ossimString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____setitem____SWIG_0(std::vector< ossimString > *self,PySliceObject *slice,std::vector< ossimString,std::allocator< ossimString > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____setitem____SWIG_1(std::vector< ossimString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____delitem____SWIG_1(std::vector< ossimString > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< ossimString >::value_type const &std_vector_Sl_ossimString_Sg____getitem____SWIG_1(std::vector< ossimString > const *self,std::vector< ossimString >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg____setitem____SWIG_2(std::vector< ossimString > *self,std::vector< ossimString >::difference_type i,std::vector< ossimString >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_ossimString_Sg__append(std::vector< ossimString > *self,std::vector< ossimString >::value_type const &x){
      self->push_back(x);
    }

#include <ossim/base/ossimDatumFactoryRegistry.h> 


#include <ossim/base/ossimDatum.h>



#include <dirent.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimDirectoryData.h>




#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimDirectory.h>




#include <ossim/base/ossimListener.h>
#include <ossim/base/ossimDisplayEventListener.h>




#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimDisplayInterface.h>




#include <ossim/base/ossimEvent.h>
#include <ossim/base/ossimDisplayListEvent.h>
#include <map>




#include <ossim/base/ossimEvent.h>
#include <ossim/base/ossimDisplayRefreshEvent.h>
#include <map>



#include <ossim/base/ossimCommon.h>             /* for ossim::isnan */
#include <ossim/base/ossimDpt3d.h>


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#include <ossim/base/ossimDpt.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimEbcdicToAscii.h>


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <iosfwd>
#include <ossim/base/ossimCommon.h>
#include <ossim/base/ossimColumnVector3d.h>
#include <ossim/base/ossimNotify.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimEcefPoint.h>
#include <ossim/base/ossimEcefVector.h>


#include <cmath>
#include <ossim/base/ossimCommon.h>
#include <ossim/base/ossimColumnVector3d.h>
#include <ossim/base/ossimEcefPoint.h>
#include <ossim/base/ossimEcefVector.h>
#include <ossim/base/ossimString.h>


#include <ossim/base/ossimEvent.h>
#include <ossim/base/ossimElevationManagerEvent.h>


#include <ossim/base/ossimListener.h>
#include <ossim/base/ossimElevationManagerEvent.h>
#include <ossim/base/ossimElevationManagerEventListener.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimEllipsoidFactory.h>
#include <map>
#include <string>


#include <cmath> /* std::sqrt */

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimEllipsoid.h>
#include <ossim/base/ossimEcefVector.h>
#include <ossim/matrix/newmat.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimEnvironmentUtility.h>


#include <ossim/base/ossimDatumFactoryInterface.h>
#include <ossim/base/ossimEpsgDatumFactory.h>
#include <ossim/base/ossimString.h>
#include <map>
#include <string>


#include <ossim/base/ossimEquTokenDefines.h>
#include <ossim/base/ossimFlexLexer.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimErrorCodes.h>
#include <ossim/base/ossimString.h>


#include <iosfwd>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossimErrorCodes.h>
#include <ossim/base/ossimErrorStatusInterface.h>


#include <ossim/base/ossimEvent.h>



#include <exception>
#include <string>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimException.h>



SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}



#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimFilename.h>



SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}



#include <vector>
#include <ossim/base/ossimProperty.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimFilenameProperty.h>
#include <ossim/base/ossimString.h>



#include <iosfwd>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimFontInformation.h>


#include <ossim/base/ossimProperty.h>
#include <ossim/base/ossimFontInformation.h>
#include <ossim/base/ossimFontProperty.h>


#include <ossim/base/ossimGeocent.h>


#include <ossim/base/ossimGeoid.h>
#include <ossim/base/ossimGeoidEgm96.h>
#include <vector>


#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimGeoid.h>
#include <ossim/base/ossimErrorStatusInterface.h>


#include <vector>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimGeoid.h>
#include <ossim/base/ossimGeoidManager.h>


#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimGeoidNgsHeader.h>
#include <iostream>


#include <ossim/base/ossimGeoid.h>
#include <ossim/base/ossimGeoidNgs.h>
#include <ossim/base/ossimGeoidNgsHeader.h>


#include <vector>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimGeoPolygon.h>


#include <ossim/base/ossimString.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimGeoref.h>


#include <ossim/base/ossimLookUpTable.h>
#include <ossim/base/ossimKeywordNames.h>
#include <ossim/base/ossimGeoTiffCoordTransformsLut.h>


#include <ossim/base/ossimLookUpTable.h>
#include <ossim/base/ossimKeywordNames.h>
#include <ossim/base/ossimGeoTiffDatumLut.h>


#include <ossim/base/ossimIpt.h>


#include <ossim/base/ossimIrect.h>


#include <ossim/base/ossimLine.h>


#include <ossim/base/ossimListener.h>


#include <ossim/base/ossimListenerManager.h>



#include <ossim/base/ossimLsrSpace.h>
#include <ossim/base/ossimLsrPoint.h>
#include <ossim/base/ossimLsrVector.h>
#include <ossim/base/ossimColumnVector3d.h>
#include <ossim/base/ossimNotify.h>




#include <ossim/base/ossimLsrPoint.h>
#include <ossim/base/ossimLsrRay.h>
#include <ossim/base/ossimLsrVector.h>
#include <ossim/base/ossimEcefRay.h>
#include <ossim/base/ossimNotifyContext.h>




#include <ossim/base/ossimLsrSpace.h>
#include <ossim/base/ossimEcefPoint.h>
#include <ossim/base/ossimEcefVector.h>
#include <ossim/base/ossimMatrix3x3.h>
#include <ossim/base/ossimNotifyContext.h>




#include <iosfwd>

#include <ossim/base/ossimCommon.h>
#include <ossim/base/ossimLsrPoint.h>
#include <ossim/base/ossimLsrSpace.h>
#include <ossim/base/ossimLsrVector.h>
#include <ossim/base/ossimEcefVector.h>
#include <ossim/base/ossimColumnVector3d.h>



#include <ossim/base/ossimNadconGridDatum.h>


#include <ossim/base/ossimNadconGridFile.h>


#include <ossim/base/ossimNadconGridHeader.h>


#include <ossim/base/ossimNadconNarDatum.h>


#include <ossim/base/ossimNadconNasDatum.h>


#include <ossim/base/ossimObjectDestructingEvent.h>


#include <ossim/base/ossimObjectFactory.h>


#include <ossim/base/ossimObjectFactoryRegistry.h>


#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimString.h>


#include <ossim/base/ossimProperty.h>


#include <ossim/base/ossimPropertyInterfaceFactory.h>


#include <ossim/base/ossimPropertyInterface.h>


#include <ossim/base/ossimPropertyInterfaceRegistry.h>


#include <ossim/base/ossimConstants.h>  /* for OSSIM_DLL */
#include <ossim/base/ossimReferenced.h> /* for base class */
#include <ossim/base/ossimStreamBase.h>


#include <ossim/base/ossimStreamFactoryBase.h>
#include <ossim/base/ossimStreamFactory.h>
#include <ossim/base/ossimIoStream.h>


#include <vector>

#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimIoStream.h>
#include <ossim/base/ossimStreamFactoryBase.h>
#include <ossim/base/ossimStreamFactoryRegistry.h>


#include <ossim/base/ossimString.h>


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


#include <ossim/base/ossimStringListProperty.h>


#include <ossim/base/ossimStringProperty.h>


#include <iostream>
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossimTDpt.h>


#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimTempFilename.h>


#include <ossim/base/ossimProperty.h>
#include <ossim/base/ossimTextProperty.h>


#include <vector>
#include <iostream>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimThinPlateSpline.h>


#include <ossim/base/ossimDatum.h>
#include <ossim/base/ossimThreeParamDatum.h>


#include <iostream>
#include <ossim/base/ossimXmlNode.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimReferenced.h>
#include <ossim/base/ossimTieGpt.h>


#include <iostream>
#include <vector>
#include <ossim/base/ossimXmlNode.h>
#include <ossim/base/ossimTieGpt.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimTieGptSet.h>
#include <ossim/matrix/newmat.h>


#include <ossim/base/ossimDrect.h>
#include <ossim/base/ossimPointHash.h>
#include <ossim/base/ossimTiledImageHash.h>


#include <ossim/base/ossimDrect.h>
#include <ossim/base/ossimPointHash.h>
#include <ossim/base/ossimTileHash.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimTimer.h>


#include <ossim/base/ossimString.h>
#include <ossim/base/ossimNotify.h>
#include <ossim/base/ossimTrace.h>


#include <ossim/base/ossimString.h>
#include <ossim/base/ossimTraceManager.h>


#include <ossim/base/ossimViewController.h>


#include <ossim/base/ossimViewEvent.h>


#include <ossim/base/ossimViewInterface.h>


#include <ossim/base/ossimViewListener.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationEllipseObject.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationFontObject.h>
#include <ossim/base/ossimFontInformation.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/font/ossimFont.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationLineObject.h>
#include <ossim/base/ossimIpt.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationMultiEllipseObject.h>
#include <vector>



#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationMultiLineObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolyLine.h>



#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationMultiPolyLineObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolyLine.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationMultiPolyObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolygon.h>


#include <ossim/base/ossimFactoryBaseTemplate.h>
#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationObjectFactory.h>


#include <iostream>

#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimCommon.h>
#include <ossim/base/ossimDrect.h>
#include <ossim/base/ossimKeywordlist.h>
#include <ossim/imaging/ossimRgbImage.h>
#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/base/ossimString.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationPolyObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolygon.h>


#include <vector>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimDrect.h>
#include <ossim/imaging/ossimRgbImage.h>
#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationSource.h>


#include <vector>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimBandAverageFilter.h>


#include <vector>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimBandClipFilter.h>


#include <ossim/imaging/ossimImageCombiner.h>
#include <ossim/imaging/ossimBandMergeSource.h>


#include <vector>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimBandSelector.h>


#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimBitMaskWriter.h>
#include <ossim/imaging/ossimBitMaskTileSource.h>


#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimOutputSource.h>
#include <ossim/imaging/ossimPixelFlipper.h>
#include <ossim/imaging/ossimBitMaskWriter.h>
#include <vector>


#include <ossim/imaging/ossimImageMosaic.h>
#include <ossim/imaging/ossimBlendMosaic.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimConvolutionFilter1D.h>


#include <vector>
#include <iostream>
#include <ossim/matrix/newmat.h>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimConvolutionSource.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimEdgeFilter.h>


#include <math.h>
#include <ossim/matrix/newmat.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/imaging/ossimFilter.h>


#include <vector>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/imaging/ossimImageData.h>
#include <ossim/imaging/ossimFilter.h>
#include <ossim/imaging/ossimFilterTable.h>
#include <ossim/imaging/ossimFilterResampler.h>


#include <cmath>
#include <ossim/base/ossimConstants.h>
#include <ossim/imaging/ossimFilterTable.h>



#include <ossim/imaging/ossimGeneralRasterInfo.h>

#include <vector>



  namespace swig {
    template <>  struct traits<ossimFilename > {
      typedef pointer_category category;
      static const char* type_name() { return"ossimFilename"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<ossimFilename, std::allocator< ossimFilename > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ossimFilename" "," "std::allocator< ossimFilename >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ossimFilename_Sg__iterator(std::vector< ossimFilename > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ossimFilename_Sg____nonzero__(std::vector< ossimFilename > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ossimFilename_Sg____bool__(std::vector< ossimFilename > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ossimFilename >::size_type std_vector_Sl_ossimFilename_Sg____len__(std::vector< ossimFilename > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ossimFilename >::value_type std_vector_Sl_ossimFilename_Sg__pop(std::vector< ossimFilename > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<ossimFilename,std::allocator< ossimFilename > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< ossimFilename,std::allocator< ossimFilename > > *std_vector_Sl_ossimFilename_Sg____getslice__(std::vector< ossimFilename > *self,std::vector< ossimFilename >::difference_type i,std::vector< ossimFilename >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____setslice____SWIG_0(std::vector< ossimFilename > *self,std::vector< ossimFilename >::difference_type i,std::vector< ossimFilename >::difference_type j,std::vector< ossimFilename,std::allocator< ossimFilename > > const &v=std::vector< ossimFilename,std::allocator< ossimFilename > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____delslice__(std::vector< ossimFilename > *self,std::vector< ossimFilename >::difference_type i,std::vector< ossimFilename >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____delitem____SWIG_0(std::vector< ossimFilename > *self,std::vector< ossimFilename >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< ossimFilename,std::allocator< ossimFilename > > *std_vector_Sl_ossimFilename_Sg____getitem____SWIG_0(std::vector< ossimFilename > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____setitem____SWIG_0(std::vector< ossimFilename > *self,PySliceObject *slice,std::vector< ossimFilename,std::allocator< ossimFilename > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____setitem____SWIG_1(std::vector< ossimFilename > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____delitem____SWIG_1(std::vector< ossimFilename > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< ossimFilename >::value_type const &std_vector_Sl_ossimFilename_Sg____getitem____SWIG_1(std::vector< ossimFilename > const *self,std::vector< ossimFilename >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg____setitem____SWIG_2(std::vector< ossimFilename > *self,std::vector< ossimFilename >::difference_type i,std::vector< ossimFilename >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_ossimFilename_Sg__append(std::vector< ossimFilename > *self,std::vector< ossimFilename >::value_type const &x){
      self->push_back(x);
    }

#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimGeoAnnotationBitmap.h>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationEllipseObject.h>
#include <ossim/imaging/ossimGeoAnnotationEllipseObject.h>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationFontObject.h>
#include <ossim/imaging/ossimGeoAnnotationFontObject.h>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimGeoAnnotationGdBitmapFont.h>
#include <ossim/imaging/ossimGdFont.h>
#include <ossim/imaging/ossimGdFontExterns.h>


#include <ossim/base/ossimGpt.h>
#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimGeoAnnotationLineObject.h>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimGeoAnnotationMultiEllipseObject.h>
#include <vector>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationMultiPolyObject.h>
#include <ossim/imaging/ossimAnnotationMultiPolyLineObject.h>
#include <ossim/imaging/ossimGeoAnnotationMultiPolyLineObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolyLine.h>


#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimGeoPolygon.h>
#include <ossim/imaging/ossimAnnotationMultiPolyObject.h>
#include <ossim/imaging/ossimGeoAnnotationMultiPolyObject.h>


#include <ossim/imaging/ossimAnnotationObject.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/imaging/ossimImageGeometry.h>
#include <ossim/imaging/ossimGeoAnnotationObject.h>


#include <ossim/base/ossimGpt.h>
#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimGeoAnnotationPolyLineObject.h>


#include <vector>
#include <ossim/base/ossimGpt.h>
#include <ossim/imaging/ossimGeoAnnotationObject.h>
#include <ossim/imaging/ossimAnnotationPolyObject.h>
#include <ossim/imaging/ossimGeoAnnotationPolyObject.h>


#include <iostream>
#include <ossim/imaging/ossimAnnotationSource.h>
#include <ossim/imaging/ossimGeoAnnotationSource.h>
#include <ossim/imaging/ossimImageGeometry.h>
#include <ossim/base/ossimViewInterface.h>


#include <ossim/imaging/ossimGridRemapEngineFactory.h>


#include <vector>
#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/imaging/ossimGridRemapEngine.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimGridRemapSource.h>
#include <vector>
#include <ossim/imaging/ossimGridRemapEngine.h>
#include <ossim/base/ossimFilename.h>



#include <ossim/imaging/ossimImageSourceHistogramFilter.h>
#include <ossim/imaging/ossimHistogramEqualization.h>

#include <vector>




#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimHistogramEqualization.h>
#include <ossim/imaging/ossimHistogramMatchFilter.h>




#include <ossim/imaging/ossimTableRemapper.h>
#include <ossim/imaging/ossimHistogramRemapper.h>
#include <ossim/base/ossimMultiResLevelHistogram.h>




#include <ossim/imaging/ossimImageSourceHistogramFilter.h>
#include <ossim/imaging/ossimHistogramThreshholdFilter.h>



        
#include <ossim/base/ossimOutputSource.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimProcessInterface.h>
#include <ossim/base/ossimObjectEvents.h>
#include <ossim/base/ossimProcessProgressEvent.h>
#include <ossim/base/ossimProcessListener.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimConnectionEvent.h>
#include <ossim/base/ossimHistogramSource.h>
#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimHistogramWriter.h>
#include <ossim/imaging/ossimImageHistogramSource.h>

#include <fstream>




#include <vector>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimHistoMatchRemapper.h>



#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimHsiRemapper.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimHsiToRgbSource.h>


#include <ossim/imaging/ossimGridRemapEngine.h>
#include <ossim/imaging/ossimHsvGridRemapEngine.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimHsvToRgbSource.h>


#include <ossim/imaging/ossimIgenGenerator.h>


#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimImageCacheBase.h>
#include <ossim/support_data/ossimRpfFrameEntry.h>


#include <ossim/imaging/ossimImageCacheBase.h>
#include <ossim/imaging/ossimImageCacheTileSource.h>



#include <vector>
#include <map>
        
#include <ossim/base/ossimId.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimConnectableContainerInterface.h>

#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimImageChain.h>



#include <vector>
#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimImageCombiner.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimPropertyEvent.h>


#include <ossim/imaging/ossimImageData.h>
#include <ossim/imaging/ossimImageDataHelper.h>
#include <ossim/base/ossimPolyArea2d.h>
#include <ossim/base/ossimRgbVector.h>


#include <vector>
#include <iosfwd> /* for ostream */
#include <ossim/imaging/ossimImageData.h>
#include <ossim/base/ossimMultiBandHistogram.h>



#include <fstream>
#include <ossim/base/ossimIoStream.h>
#include <ossim/imaging/ossimImageWriter.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimProcessInterface.h>
#include <ossim/base/ossimObjectEvents.h>
#include <ossim/base/ossimProcessProgressEvent.h>
#include <ossim/base/ossimViewController.h>
#include <ossim/imaging/ossimImageFileWriter.h>



#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimConvolutionFilter1D.h>
#include <ossim/imaging/ossimImageGaussianFilter.h>



#include <ossim/imaging/ossimImageGeometryFactoryBase.h>
#include <ossim/imaging/ossimImageGeometryFactory.h>
#include <ossim/base/ossim2dTo2dTransform.h>
#include <ossim/imaging/ossimNitfTileSource.h>
#include <ossim/projection/ossimProjection.h>




#include <vector>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/projection/ossimProjection.h>
#include <ossim/base/ossim2dTo2dTransform.h>

#include <ossim/imaging/ossimImageGeometry.h>




#include <ossim/base/ossimConstants.h>
#include <ossim/imaging/ossimImageGeometryFactoryBase.h>
#include <ossim/imaging/ossimImageGeometry.h>
#include <ossim/base/ossimFactoryListInterface.h>
#include <ossim/imaging/ossimImageGeometryRegistry.h>



#include <ossim/imaging/ossimImageHandlerFactoryBase.h>



#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimImageMetaData.h>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimNBandLutDataObject.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/imaging/ossimFilterResampler.h>
#include <ossim/imaging/ossimImageHandler.h>

#include <vector>



#include <ossim/imaging/ossimImageMetaData.h>



#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimObjectFactory.h>
#include <ossim/imaging/ossimMetadataFileWriter.h>
#include <ossim/imaging/ossimImageMetaDataWriterFactoryBase.h>




#include <ossim/base/ossimRefPtr.h>
#include <ossim/base/ossimObjectFactory.h>
#include <ossim/imaging/ossimMetadataFileWriter.h>

#include <ossim/imaging/ossimImageMetaDataWriterFactory.h>
#include <ossim/imaging/ossimImageMetaDataWriterFactoryBase.h>




#include <ossim/base/ossimRefPtr.h>

#include <ossim/imaging/ossimImageMetaDataWriterFactoryBase.h>
#include <ossim/imaging/ossimMetadataFileWriter.h>
#include <ossim/imaging/ossimImageMetaDataWriterRegistry.h>




#include <vector>

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimObject.h>
#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/imaging/ossimImageModel.h>




#include <vector>

#include <ossim/imaging/ossimImageCombiner.h>
#include <ossim/imaging/ossimImageData.h>
#include <ossim/imaging/ossimImageMosaic.h>



#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimConvolutionSource.h>
#include <ossim/imaging/ossimImageSharpenFilter.h>



#include <ossim/base/ossimObjectFactory.h>
#include <ossim/imaging/ossimImageSourceFactoryBase.h>
#include <ossim/imaging/ossimImageSource.h>




#include <ossim/imaging/ossimImageSourceFactoryBase.h>
#include <ossim/imaging/ossimImageSourceFactory.h>




#include <ossim/imaging/ossimImageSourceFactoryBase.h>
#include <ossim/imaging/ossimImageSourceFactoryRegistry.h>




#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimConnectionEvent.h>




#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimImageSourceHistogramFilter.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimMultiResLevelHistogram.h>




#include <ossim/base/ossimConstants.h>
#include <ossim/imaging/ossimImageData.h>
#include <ossim/imaging/ossimImageGeometry.h>
#include <ossim/imaging/ossimImageSource.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimRefPtr.h>




#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimImageSourceSequencer.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimConnectableObjectListener.h>



#include <ossim/base/ossimSource.h>
#include <ossim/imaging/ossimImageStatisticsSource.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimImageToPlaneNormalFilter.h>



#include <ossim/base/ossimObjectFactory.h>
#include <ossim/base/ossimString.h>
#include <ossim/imaging/ossimImageFileWriter.h>
#include <ossim/imaging/ossimImageWriterFactoryBase.h>
#include <vector>




#include <ossim/imaging/ossimImageWriterFactoryBase.h>
#include <ossim/imaging/ossimImageWriterFactory.h>




#include <ossim/base/ossimObjectFactory.h>
#include <ossim/imaging/ossimImageWriterFactoryBase.h>
#include <ossim/imaging/ossimImageWriterFactoryRegistry.h>
#include <ossim/base/ossimFactoryListInterface.h>
#include <vector>
#include <iosfwd>
#include <ossim/base/ossimCommon.h>



#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimAppFixedTileCache.h>
#include <ossim/imaging/ossimJpegTileSource.h>


#include <ossim/imaging/ossimJpegWriter.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimJpegYCbCrToRgbSource.h>


#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimMaskedImageHandler.h>
#include <ossim/imaging/ossimMaskFilter.h>
#include <ossim/base/ossimIrect.h>


#include <ossim/imaging/ossimImageCombiner.h>
#include <ossim/imaging/ossimMaskFilter.h>


#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimMaskTileSource.h>


#include <vector>
#include <ossim/imaging/ossimImageCombiner.h>
#include <ossim/imaging/ossimMaxMosaic.h>


        
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimConnectableObject.h>
#include <ossim/base/ossimProcessInterface.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimObjectEvents.h>
#include <ossim/base/ossimProcessProgressEvent.h>

#include <ossim/imaging/ossimMetadataFileWriter.h>



#include <ossim/base/ossimConstants.h>
#include <ossim/imaging/ossimNormalizedRemapTable.h>


#include <ossim/imaging/ossimNormalizedRemapTable.h>
#include <ossim/imaging/ossimNormalizedS16RemapTable.h>
#include <ossim/base/ossimCommon.h> /* for round */


#include <ossim/imaging/ossimNormalizedRemapTable.h>
#include <ossim/imaging/ossimNormalizedU11RemapTable.h>
#include <ossim/base/ossimCommon.h> /* for round */


#include <ossim/imaging/ossimNormalizedRemapTable.h>
#include <ossim/imaging/ossimNormalizedU16RemapTable.h>
#include <ossim/base/ossimCommon.h> /* for round */


#include <ossim/imaging/ossimNormalizedRemapTable.h>
#include <ossim/imaging/ossimNormalizedU8RemapTable.h>
#include <ossim/base/ossimCommon.h> /* for round */


#include <ossim/base/ossimSource.h>
#include <ossim/base/ossimProcessInterface.h>
#include <ossim/base/ossimConnectableObjectListener.h>
#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/base/ossimRtti.h>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/imaging/ossimBitMaskWriter.h>
#include <ossim/imaging/ossimMaskFilter.h>
#include <ossim/imaging/ossimOverviewBuilderBase.h>


#include <vector>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimObjectFactory.h>
#include <ossim/imaging/ossimOverviewBuilderFactoryBase.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/imaging/ossimOverviewBuilderFactoryBase.h>
#include <ossim/imaging/ossimOverviewBuilderFactory.h>


#include <vector>

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/imaging/ossimOverviewBuilderFactoryBase.h>
#include <ossim/imaging/ossimOverviewBuilderBase.h>
#include <ossim/base/ossimFactoryListInterface.h>
#include <ossim/imaging/ossimOverviewBuilderFactoryRegistry.h>


#include <ossim/base/ossimReferenced.h>
#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimMultiBandHistogram.h>
#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/imaging/ossimFilterResampler.h>
#include <ossim/imaging/ossimBitMaskWriter.h>
#include <ossim/imaging/ossimMaskFilter.h>
#include <ossim/imaging/ossimOverviewSequencer.h>
#include <string>
#include <vector>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimPixelFlipper.h>
#include <ossim/base/ossimPolygon.h>
#include <OpenThreads/ReentrantMutex>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/base/ossimPolygon.h>
#include <ossim/imaging/ossimImageDataHelper.h>
#include <ossim/imaging/ossimPolyCutter.h>
#include <vector>


#include <ossim/imaging/ossimNitfTileSource.h>
#include <ossim/imaging/ossimQuickbirdNitfTileSource.h>
#include <ossim/base/ossim2dTo2dTransform.h>


#include <ossim/imaging/ossimTiffTileSource.h>
#include <ossim/imaging/ossimQuickbirdTiffTileSource.h>
#include <ossim/base/ossim2dTo2dShiftTransform.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRectangleCutFilter.h>


#include <ossim/imaging/ossimGridRemapEngine.h>
#include <ossim/imaging/ossimRgbGridRemapEngine.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRgbToGreyFilter.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRgbToHsiSource.h>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRgbToHsvSource.h>


#include <ossim/base/ossimRgbVector.h>
#include <ossim/base/ossimRgbLutDataObject.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRgbToIndexFilter.h>
#include <vector>


#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimRgbToJpegYCbCrSource.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimString.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/imaging/ossimImageSourceFilter.h>
#include <ossim/imaging/ossimWatermarkFilter.h>


#include <ossim/imaging/ossimMetadataFileWriter.h>
#include <ossim/imaging/ossimWorldFileWriter.h>


#include <ossim/projection/ossimProjection.h>
#include <ossim/projection/ossimAffineProjection.h>
#include <ossim/base/ossimIpt.h>
#include <iosfwd>
#include <ossim/base/ossim2dTo2dTransform.h>
#include <ossim/base/ossimRefPtr.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimAlbersProjection.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimBonneProjection.h>


#include <ossim/projection/ossimSensorModel.h>
#include <ossim/projection/ossimSmacCallibrationSystem.h>
#include <ossim/projection/ossimUtmProjection.h>
#include <ossim/projection/ossimBuckeyeSensor.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimCassiniProjection.h>


#include <ossim/projection/ossimProjectionFactoryBase.h>
#include <ossim/projection/ossimEpsgProjectionDatabase.h>
#include <ossim/base/ossimFilename.h>
#include <fstream>
#include <ossim/projection/ossimMapProjection.h>


#include <ossim/projection/ossimEpsgProjectionDatabase.h>
#include <ossim/projection/ossimEpsgProjectionFactory.h>
#include <ossim/projection/ossimProjectionFactoryBase.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimRefPtr.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimGnomonicProjection.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/projection/ossimRpcModel.h>
#include <ossim/projection/ossimIkonosRpcModel.h>
#include <ossim/support_data/ossimIkonosMetaData.h>


#include <ossim/projection/ossimImageProjectionModel.h>


#include <ossim/projection/ossimImageViewAffineTransform.h>


#include <ossim/projection/ossimImageViewProjectionTransform.h>


#include <ossim/projection/ossimImageViewTransformFactory.h>


#include <ossim/projection/ossimImageViewTransform.h>


#include <ossim/projection/ossimLandSatModel.h>


#include <ossim/projection/ossimMapProjectionFactory.h>


#include <ossim/projection/ossimMapProjection.h>


#include <ossim/projection/ossimMapProjectionInfo.h>


#include <ossim/projection/ossimMercatorProjection.h>


#include <ossim/projection/ossimSensorModel.h>
#include <ossim/projection/ossimNitfMapModel.h>
#include <ossim/base/ossimFilename.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimDpt.h>
#include <iostream>


#include <vector>
#include <ossim/projection/ossimProjectionFactoryBase.h>
#include <ossim/projection/ossimNitfProjectionFactory.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/projection/ossimRpcModel.h>
#include <ossim/projection/ossimNitfRpcModel.h>


#include <ossim/projection/ossimObliqueMercatorProjection.h>


#include <ossim/projection/ossimOrthoGraphicProjection.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimPolyconicProjection.h>


#include <ossim/projection/ossimProjection.h>
#include <ossim/projection/ossimPolynomProjection.h>
#include <ossim/projection/ossimOptimizableProjection.h>
#include <ossim/base/ossimIpt.h>
#include <ossim/base/ossimPolynom.h>


#include <ossim/base/ossimDpt.h>
#include <ossim/base/ossimEcefPoint.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimLsrVector.h>
#include <ossim/base/ossimColumnVector3d.h>
#include <ossim/base/ossimMatrix3x3.h>
#include <ossim/matrix/newmat.h>
#include <ossim/matrix/newmatap.h>
#include <ossim/matrix/newmatio.h>
#include <ossim/projection/ossimPositionQualityEvaluator.h>


#include <ossim/projection/ossimProjectionFactoryBase.h>


#include <ossim/projection/ossimProjectionFactoryRegistry.h>


#include <ossim/projection/ossimProjection.h>


#include <ossim/projection/ossimProjectionViewControllerFactory.h>


#include <ossim/projection/ossimProjection.h>
#include <ossim/projection/ossimQuadProjection.h>
#include <ossim/base/ossimIrect.h>
#include <ossim/base/ossimDblGrid.h>


#include <ossim/projection/ossimSensorModelFactory.h>


#include <ossim/projection/ossimSensorModel.h>


#include <ossim/projection/ossimSensorModelTuple.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimSpaceObliqueMercatorProjection.h>


#include <ostream>

#include <ossim/base/ossimConstants.h> /* for OSSIM_DLL macro */
#include <ossim/base/ossimDms.h>
#include <ossim/base/ossimGpt.h>
#include <ossim/base/ossimString.h>
#include <ossim/projection/ossimStatePlaneProjectionInfo.h>


#include <ossim/projection/ossimProjectionFactoryBase.h>
#include <ossim/projection/ossimTiffProjectionFactory.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimTransCylEquAreaProjection.h>


#include <ossim/projection/ossimTransMercatorProjection.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimUpsProjection.h>


#include <ossim/projection/ossimUpspt.h>


#include <ossim/projection/ossimMapProjection.h>
#include <ossim/projection/ossimUtmProjection.h>


#include <ossim/base/ossimConstants.h>
#include <ossim/projection/ossimUtmpt.h>



#include <map>
#include <vector>

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimReferenced.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/imaging/ossimImageSource.h>
#include <ossim/imaging/ossimSingleImageChain.h>
#include <ossim/projection/ossimMapProjection.h>
#include <ossim/util/ossimElevUtil.h>




#include <string>
#include <vector>
#include <ossim/base/ossimCallback2wRet.h>
#include <ossim/base/ossimConstants.h>
#include <ossim/util/ossimFileWalker.h>




#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimKeywordlist.h>
#include <ossim/base/ossimReferenced.h>
#include <ossim/base/ossimRefPtr.h>
#include <ossim/imaging/ossimImageHandler.h>
#include <ossim/util/ossimInfo.h>

#include <ostream>




#include <ossim/base/ossimReferenced.h>
#include <ossim/imaging/ossimImageGeometry.h> 
#include <ossim/util/ossimRpfUtil.h>




#include <iosfwd>

#include <ossim/base/ossimConstants.h>
#include <ossim/base/ossimReferenced.h>
#include <ossim/support_data/ossimInfoBase.h>


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_ossimInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimInit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimInit" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimInit_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimInit *)ossimInit::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimInit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_addOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  ossimArgumentParser *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInit_addOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_addOptions" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimArgumentParser,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInit_addOptions" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInit_addOptions" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  arg2 = reinterpret_cast< ossimArgumentParser * >(argp2);
  {
    try
    {
      (arg1)->addOptions(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initialize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  int *arg2 = 0 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInit_initialize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initialize" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInit_initialize" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInit_initialize" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInit_initialize" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  {
    try
    {
      (arg1)->initialize(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initialize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  ossimArgumentParser *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInit_initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initialize" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimArgumentParser,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInit_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInit_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  arg2 = reinterpret_cast< ossimArgumentParser * >(argp2);
  {
    try
    {
      (arg1)->initialize(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initialize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initialize" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initialize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInit_initialize__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimArgumentParser, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInit_initialize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_char, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInit_initialize__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInit_initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInit::initialize(int &,char **)\n"
    "    ossimInit::initialize(ossimArgumentParser &)\n"
    "    ossimInit::initialize()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInit_finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_finalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_finalize" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->finalize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_usage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_usage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_usage" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->usage();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_getElevEnabledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_getElevEnabledFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_getElevEnabledFlag" "', argument " "1"" of type '" "ossimInit const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      result = (bool)((ossimInit const *)arg1)->getElevEnabledFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_setElevEnabledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInit_setElevEnabledFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_setElevEnabledFlag" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInit_setElevEnabledFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setElevEnabledFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_setPluginLoaderEnabledFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInit_setPluginLoaderEnabledFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_setPluginLoaderEnabledFlag" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInit_setPluginLoaderEnabledFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setPluginLoaderEnabledFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_loadPlugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  ossimFilename *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInit_loadPlugins",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_loadPlugins" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInit_loadPlugins" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInit_loadPlugins" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInit_loadPlugins" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      (arg1)->loadPlugins((ossimFilename const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_loadPlugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInit_loadPlugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_loadPlugins" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInit_loadPlugins" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInit_loadPlugins" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->loadPlugins((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_loadPlugins(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInit_loadPlugins__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInit_loadPlugins__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInit_loadPlugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInit::loadPlugins(ossimFilename const &,char const *)\n"
    "    ossimInit::loadPlugins(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInit_initializePlugins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_initializePlugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initializePlugins" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->initializePlugins();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initializeDefaultFactories(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_initializeDefaultFactories",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initializeDefaultFactories" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->initializeDefaultFactories();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initializeElevation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_initializeElevation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initializeElevation" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->initializeElevation();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_initializeLogFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_initializeLogFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_initializeLogFile" "', argument " "1"" of type '" "ossimInit *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      (arg1)->initializeLogFile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_version",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_version" "', argument " "1"" of type '" "ossimInit const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      result = ((ossimInit const *)arg1)->version();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInit_appName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInit *arg1 = (ossimInit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInit_appName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInit_appName" "', argument " "1"" of type '" "ossimInit const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInit * >(argp1);
  {
    try
    {
      result = ((ossimInit const *)arg1)->appName();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimInit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimInit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimDtedElevationDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimDtedElevationDatabase")) SWIG_fail;
  {
    try
    {
      result = (ossimDtedElevationDatabase *)new ossimDtedElevationDatabase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDtedElevationDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDtedElevationDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDtedElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDtedElevationDatabase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDtedElevationDatabase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDtedElevationDatabase" "', argument " "1"" of type '" "ossimDtedElevationDatabase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDtedElevationDatabase" "', argument " "1"" of type '" "ossimDtedElevationDatabase const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  {
    try
    {
      result = (ossimDtedElevationDatabase *)new ossimDtedElevationDatabase((ossimDtedElevationDatabase const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDtedElevationDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDtedElevationDatabase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimDtedElevationDatabase__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDtedElevationDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDtedElevationDatabase__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimDtedElevationDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDtedElevationDatabase::ossimDtedElevationDatabase()\n"
    "    ossimDtedElevationDatabase::ossimDtedElevationDatabase(ossimDtedElevationDatabase const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimDtedElevationDatabase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDtedElevationDatabase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDtedElevationDatabase" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_dup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDtedElevationDatabase_dup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_dup" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  {
    try
    {
      result = (ossimObject *)((ossimDtedElevationDatabase const *)arg1)->dup();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_open" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->open((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_pointHasCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_pointHasCoverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_pointHasCoverage" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_pointHasCoverage" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_pointHasCoverage" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimDtedElevationDatabase const *)arg1)->pointHasCoverage((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_getAccuracyLE90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_getAccuracyLE90",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_getAccuracyLE90" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_getAccuracyLE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_getAccuracyLE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)((ossimDtedElevationDatabase const *)arg1)->getAccuracyLE90((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_getAccuracyCE90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_getAccuracyCE90",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_getAccuracyCE90" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_getAccuracyCE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_getAccuracyCE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)((ossimDtedElevationDatabase const *)arg1)->getAccuracyCE90((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_getHeightAboveMSL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_getHeightAboveMSL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_getHeightAboveMSL" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_getHeightAboveMSL" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_getHeightAboveMSL" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)(arg1)->getHeightAboveMSL((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_getHeightAboveEllipsoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_getHeightAboveEllipsoid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_getHeightAboveEllipsoid" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_getHeightAboveEllipsoid" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_getHeightAboveEllipsoid" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)(arg1)->getHeightAboveEllipsoid((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_createId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_createId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_createId" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_createId" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_createId" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (ossim_uint64)((ossimDtedElevationDatabase const *)arg1)->createId((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDtedElevationDatabase_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "1"" of type '" "ossimDtedElevationDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDtedElevationDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDtedElevationDatabase_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDtedElevationDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDtedElevationDatabase_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDtedElevationDatabase_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDtedElevationDatabase::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimDtedElevationDatabase::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDtedElevationDatabase_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimDtedElevationDatabase const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDtedElevationDatabase *arg1 = (ossimDtedElevationDatabase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDtedElevationDatabase_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDtedElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "1"" of type '" "ossimDtedElevationDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDtedElevationDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDtedElevationDatabase_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimDtedElevationDatabase const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDtedElevationDatabase_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDtedElevationDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDtedElevationDatabase_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDtedElevationDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDtedElevationDatabase_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDtedElevationDatabase_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDtedElevationDatabase::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimDtedElevationDatabase::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimDtedElevationDatabase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDtedElevationDatabase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimElevationDatabaseFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimElevationDatabaseFactory")) SWIG_fail;
  {
    try
    {
      result = (ossimElevationDatabaseFactory *)new ossimElevationDatabaseFactory();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabaseFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimElevationDatabaseFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimElevationDatabaseFactory *)ossimElevationDatabaseFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseFactory_createDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseFactory const *)arg1)->createDatabase((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimElevationDatabaseFactory_createDatabase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseFactory const *)arg1)->createDatabase((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseFactory_createDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseFactory_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseFactory const *)arg1)->createDatabase((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_createDatabase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimElevationDatabaseFactory_createDatabase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevationDatabaseFactory_createDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevationDatabaseFactory::createDatabase(ossimString const &) const\n"
    "    ossimElevationDatabaseFactory::createDatabase(ossimKeywordlist const &,char const *) const\n"
    "    ossimElevationDatabaseFactory::createDatabase(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseFactory_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseFactory_open" "', argument " "1"" of type '" "ossimElevationDatabaseFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseFactory_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseFactory_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseFactory const *)arg1)->open((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseFactory_getTypeNameList" "', argument " "1"" of type '" "ossimElevationDatabaseFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimElevationDatabaseFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimElevationDatabaseFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseFactory *arg1 = (ossimElevationDatabaseFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimElevationDatabaseFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimElevationDatabaseFactory" "', argument " "1"" of type '" "ossimElevationDatabaseFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimElevationDatabaseFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimElevationDatabaseFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimElevationDatabaseRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimElevationDatabaseRegistry")) SWIG_fail;
  {
    try
    {
      result = (ossimElevationDatabaseRegistry *)new ossimElevationDatabaseRegistry();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabaseRegistry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimElevationDatabaseRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimElevationDatabaseRegistry *)ossimElevationDatabaseRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseRegistry_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseRegistry_getTypeNameList" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimElevationDatabaseRegistry const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseRegistry_createDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseRegistry const *)arg1)->createDatabase((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimElevationDatabaseRegistry_createDatabase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseRegistry const *)arg1)->createDatabase((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseRegistry_createDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseRegistry_createDatabase" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevationDatabaseRegistry const *)arg1)->createDatabase((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_createDatabase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevationDatabaseRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimElevationDatabaseRegistry_createDatabase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevationDatabaseRegistry_createDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevationDatabaseRegistry::createDatabase(ossimString const &) const\n"
    "    ossimElevationDatabaseRegistry::createDatabase(ossimKeywordlist const &,char const *) const\n"
    "    ossimElevationDatabaseRegistry::createDatabase(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevationDatabaseRegistry_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevationDatabaseRegistry_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevationDatabaseRegistry_open" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevationDatabaseRegistry_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevationDatabaseRegistry_open" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimElevationDatabase *)(arg1)->open((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimElevationDatabaseRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevationDatabaseRegistry *arg1 = (ossimElevationDatabaseRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimElevationDatabaseRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevationDatabaseRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimElevationDatabaseRegistry" "', argument " "1"" of type '" "ossimElevationDatabaseRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevationDatabaseRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimElevationDatabaseRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimElevationDatabaseRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimElevCellHandlerFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevCellHandlerFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimElevCellHandlerFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimElevCellHandlerFactory *)ossimElevCellHandlerFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevCellHandlerFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevCellHandlerFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevCellHandlerFactory *arg1 = (ossimElevCellHandlerFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevCellHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevCellHandlerFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevCellHandlerFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevCellHandlerFactory_create" "', argument " "1"" of type '" "ossimElevCellHandlerFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevCellHandlerFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevCellHandlerFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevCellHandlerFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimElevCellHandler *)((ossimElevCellHandlerFactory const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevCellHandler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevCellHandlerFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevCellHandlerFactory *arg1 = (ossimElevCellHandlerFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimElevCellHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimElevCellHandlerFactory_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevCellHandlerFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevCellHandlerFactory_create" "', argument " "1"" of type '" "ossimElevCellHandlerFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevCellHandlerFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevCellHandlerFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevCellHandlerFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimElevCellHandlerFactory_create" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimElevCellHandler *)((ossimElevCellHandlerFactory const *)arg1)->create((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevCellHandler, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevCellHandlerFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevCellHandlerFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevCellHandlerFactory_create__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevCellHandlerFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimElevCellHandlerFactory_create__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevCellHandlerFactory_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevCellHandlerFactory::create(ossimString const &) const\n"
    "    ossimElevCellHandlerFactory::create(ossimKeywordlist const &,char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevCellHandlerFactory_getList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevCellHandlerFactory *arg1 = (ossimElevCellHandlerFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::list< ossimString > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevCellHandlerFactory_getList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevCellHandlerFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevCellHandlerFactory_getList" "', argument " "1"" of type '" "ossimElevCellHandlerFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevCellHandlerFactory * >(argp1);
  {
    try
    {
      result = ((ossimElevCellHandlerFactory const *)arg1)->getList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< ossimString >(static_cast< const std::list< ossimString >& >(result))), SWIGTYPE_p_std__listT_ossimString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimElevCellHandlerFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevCellHandlerFactory *arg1 = (ossimElevCellHandlerFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimElevCellHandlerFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevCellHandlerFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimElevCellHandlerFactory" "', argument " "1"" of type '" "ossimElevCellHandlerFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevCellHandlerFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimElevCellHandlerFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimElevCellHandlerFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimElevManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimElevManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimElevManager" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimElevManager_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimElevManager *)ossimElevManager::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevManager, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getHeightAboveEllipsoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getHeightAboveEllipsoid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getHeightAboveEllipsoid" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_getHeightAboveEllipsoid" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_getHeightAboveEllipsoid" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)(arg1)->getHeightAboveEllipsoid((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getHeightAboveMSL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getHeightAboveMSL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getHeightAboveMSL" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_getHeightAboveMSL" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_getHeightAboveMSL" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)(arg1)->getHeightAboveMSL((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getAccuracyLE90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getAccuracyLE90",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getAccuracyLE90" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_getAccuracyLE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_getAccuracyLE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)((ossimElevManager const *)arg1)->getAccuracyLE90((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getAccuracyCE90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getAccuracyCE90",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getAccuracyCE90" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_getAccuracyCE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_getAccuracyCE90" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (double)((ossimElevManager const *)arg1)->getAccuracyCE90((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_pointHasCoverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_pointHasCoverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_pointHasCoverage" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_pointHasCoverage" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_pointHasCoverage" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimElevManager const *)arg1)->pointHasCoverage((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getMeanSpacingMeters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getMeanSpacingMeters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getMeanSpacingMeters" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (double)((ossimElevManager const *)arg1)->getMeanSpacingMeters();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getNumberOfElevationDatabases(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getNumberOfElevationDatabases",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getNumberOfElevationDatabases" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimElevManager const *)arg1)->getNumberOfElevationDatabases();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getElevationDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getElevationDatabase" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimElevManager_getElevationDatabase" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimElevationDatabase *)(arg1)->getElevationDatabase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimElevationDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getElevationDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getElevationDatabase" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimElevManager_getElevationDatabase" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimElevationDatabase *)((ossimElevManager const *)arg1)->getElevationDatabase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimElevManager_getElevationDatabase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimElevManager_getElevationDatabase__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevManager_getElevationDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevManager::getElevationDatabase(ossim_uint32)\n"
    "    ossimElevManager::getElevationDatabase(ossim_uint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabaseList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimElevManager::ElevationDatabaseListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getElevationDatabaseList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getElevationDatabaseList" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (ossimElevManager::ElevationDatabaseListType *) &(arg1)->getElevationDatabaseList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabaseList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimElevManager::ElevationDatabaseListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getElevationDatabaseList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getElevationDatabaseList" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (ossimElevManager::ElevationDatabaseListType *) &((ossimElevManager const *)arg1)->getElevationDatabaseList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationDatabaseList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimElevManager_getElevationDatabaseList__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimElevManager_getElevationDatabaseList__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevManager_getElevationDatabaseList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevManager::getElevationDatabaseList()\n"
    "    ossimElevManager::getElevationDatabaseList() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_addDatabase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimElevationDatabase *arg2 = (ossimElevationDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_addDatabase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_addDatabase" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimElevationDatabase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_addDatabase" "', argument " "2"" of type '" "ossimElevationDatabase *""'"); 
  }
  arg2 = reinterpret_cast< ossimElevationDatabase * >(argp2);
  {
    try
    {
      (arg1)->addDatabase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_loadElevationPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_loadElevationPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_loadElevationPath" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_loadElevationPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_loadElevationPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadElevationPath((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_setDefaultHeightAboveEllipsoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_setDefaultHeightAboveEllipsoid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_setDefaultHeightAboveEllipsoid" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimElevManager_setDefaultHeightAboveEllipsoid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setDefaultHeightAboveEllipsoid(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_setElevationOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_setElevationOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_setElevationOffset" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimElevManager_setElevationOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setElevationOffset(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getElevationOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getElevationOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getElevationOffset" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (double)((ossimElevManager const *)arg1)->getElevationOffset();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getOpenCellList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_getOpenCellList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getOpenCellList" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_getOpenCellList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_getOpenCellList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp2);
  {
    try
    {
      ((ossimElevManager const *)arg1)->getOpenCellList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_setUseGeoidIfNullFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_setUseGeoidIfNullFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_setUseGeoidIfNullFlag" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimElevManager_setUseGeoidIfNullFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setUseGeoidIfNullFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_getUseGeoidIfNullFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_getUseGeoidIfNullFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_getUseGeoidIfNullFlag" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      result = (bool)((ossimElevManager const *)arg1)->getUseGeoidIfNullFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevManager_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_clear" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimElevManager_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_saveState" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimElevManager_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimElevManager const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_saveState" "', argument " "1"" of type '" "ossimElevManager const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimElevManager const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevManager_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimElevManager_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevManager_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevManager::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimElevManager::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimElevManager_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_loadState" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimElevManager_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevManager *arg1 = (ossimElevManager *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevManager_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevManager_loadState" "', argument " "1"" of type '" "ossimElevManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevManager_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevManager_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevManager_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevManager_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimElevManager_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevManager_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevManager::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimElevManager::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimElevManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimElevManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossim2dLinearRegression *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossim2dLinearRegression,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossim2dLinearRegression const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossim2dLinearRegression const &""'"); 
  }
  arg2 = reinterpret_cast< ossim2dLinearRegression * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossim2dLinearRegression const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossim2dLinearRegression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossim2dLinearRegression")) SWIG_fail;
  {
    try
    {
      result = (ossim2dLinearRegression *)new ossim2dLinearRegression();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dLinearRegression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dLinearRegression_getEquation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossim2dLinearRegression_getEquation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dLinearRegression_getEquation" "', argument " "1"" of type '" "ossim2dLinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossim2dLinearRegression_getEquation" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dLinearRegression_getEquation" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossim2dLinearRegression_getEquation" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dLinearRegression_getEquation" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try
    {
      (arg1)->getEquation(*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dLinearRegression_addPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossim2dLinearRegression_addPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dLinearRegression_addPoint" "', argument " "1"" of type '" "ossim2dLinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossim2dLinearRegression_addPoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dLinearRegression_addPoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->addPoint((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dLinearRegression_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossim2dLinearRegression_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dLinearRegression_clear" "', argument " "1"" of type '" "ossim2dLinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dLinearRegression_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossim2dLinearRegression_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dLinearRegression_solve" "', argument " "1"" of type '" "ossim2dLinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  {
    try
    {
      (arg1)->solve();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dLinearRegression_getNumberOfPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossim2dLinearRegression_getNumberOfPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dLinearRegression_getNumberOfPoints" "', argument " "1"" of type '" "ossim2dLinearRegression const *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossim2dLinearRegression const *)arg1)->getNumberOfPoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossim2dLinearRegression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dLinearRegression *arg1 = (ossim2dLinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossim2dLinearRegression",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dLinearRegression, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossim2dLinearRegression" "', argument " "1"" of type '" "ossim2dLinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dLinearRegression * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossim2dLinearRegression_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossim2dLinearRegression, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossim2dTo2dTransformFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossim2dTo2dTransformFactory")) SWIG_fail;
  {
    try
    {
      result = (ossim2dTo2dTransformFactory *)new ossim2dTo2dTransformFactory();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dTo2dTransformFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dTo2dTransformFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossim2dTo2dTransformFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossim2dTo2dTransformFactory *)ossim2dTo2dTransformFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dTo2dTransformFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dTo2dTransformFactory_createTransform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *arg1 = (ossim2dTo2dTransformFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim2dTo2dTransform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossim2dTo2dTransformFactory_createTransform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dTo2dTransformFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "1"" of type '" "ossim2dTo2dTransformFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dTo2dTransformFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossim2dTo2dTransform *)((ossim2dTo2dTransformFactory const *)arg1)->createTransform((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dTo2dTransform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dTo2dTransformFactory_createTransform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *arg1 = (ossim2dTo2dTransformFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossim2dTo2dTransform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossim2dTo2dTransformFactory_createTransform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dTo2dTransformFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "1"" of type '" "ossim2dTo2dTransformFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dTo2dTransformFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossim2dTo2dTransformFactory_createTransform" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossim2dTo2dTransform *)((ossim2dTo2dTransformFactory const *)arg1)->createTransform((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dTo2dTransform, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossim2dTo2dTransformFactory_createTransform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossim2dTo2dTransformFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossim2dTo2dTransformFactory_createTransform__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossim2dTo2dTransformFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossim2dTo2dTransformFactory_createTransform__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossim2dTo2dTransformFactory_createTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossim2dTo2dTransformFactory::createTransform(ossimString const &) const\n"
    "    ossim2dTo2dTransformFactory::createTransform(ossimKeywordlist const &,char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossim2dTo2dTransformFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *arg1 = (ossim2dTo2dTransformFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossim2dTo2dTransformFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dTo2dTransformFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossim2dTo2dTransformFactory_getTypeNameList" "', argument " "1"" of type '" "ossim2dTo2dTransformFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dTo2dTransformFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossim2dTo2dTransformFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossim2dTo2dTransformFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossim2dTo2dTransformFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossim2dTo2dTransformFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim2dTo2dTransformFactory *arg1 = (ossim2dTo2dTransformFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossim2dTo2dTransformFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossim2dTo2dTransformFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossim2dTo2dTransformFactory" "', argument " "1"" of type '" "ossim2dTo2dTransformFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossim2dTo2dTransformFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossim2dTo2dTransformFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossim2dTo2dTransformFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimAdjustableParameterInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimAdjustableParameterInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimAdjustableParameterInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimAdjustableParameterInfo const &""'"); 
  }
  arg2 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimAdjustableParameterInfo const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAdjustableParameterInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimAdjustableParameterInfo")) SWIG_fail;
  {
    try
    {
      result = (ossimAdjustableParameterInfo *)new ossimAdjustableParameterInfo();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAdjustableParameterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAdjustableParameterInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimAdjustableParameterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimAdjustableParameterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimAdjustableParameterInfo,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAdjustableParameterInfo" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAdjustableParameterInfo" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const &""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (ossimAdjustableParameterInfo *)new ossimAdjustableParameterInfo((ossimAdjustableParameterInfo const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAdjustableParameterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAdjustableParameterInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimAdjustableParameterInfo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimAdjustableParameterInfo__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimAdjustableParameterInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAdjustableParameterInfo::ossimAdjustableParameterInfo()\n"
    "    ossimAdjustableParameterInfo::ossimAdjustableParameterInfo(ossimAdjustableParameterInfo const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getParameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getParameter" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimAdjustableParameterInfo const *)arg1)->getParameter();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setParameter" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setParameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setParameter(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getSigma" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimAdjustableParameterInfo const *)arg1)->getSigma();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setSigma" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setSigma(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getDescription" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimAdjustableParameterInfo const *)arg1)->getDescription();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setDescription" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAdjustableParameterInfo_setDescription" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_setDescription" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setDescription((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getUnit" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (ossimUnitType)((ossimAdjustableParameterInfo const *)arg1)->getUnit();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimUnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setUnit" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setUnit" "', argument " "2"" of type '" "ossimUnitType""'");
  } 
  arg2 = static_cast< ossimUnitType >(val2);
  {
    try
    {
      (arg1)->setUnit(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getUnitAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getUnitAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getUnitAsString" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = ((ossimAdjustableParameterInfo const *)arg1)->getUnitAsString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setCenter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setCenter" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setCenter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setCenter(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getCenter" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimAdjustableParameterInfo const *)arg1)->getCenter();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setOffset" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setOffset" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      (arg1)->setOffset(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_computeOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_computeOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_computeOffset" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimAdjustableParameterInfo const *)arg1)->computeOffset();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_setLockFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_setLockFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_setLockFlag" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAdjustableParameterInfo_setLockFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setLockFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_getLockFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAdjustableParameterInfo_getLockFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_getLockFlag" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      result = (bool)((ossimAdjustableParameterInfo const *)arg1)->getLockFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimAdjustableParameterInfo_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimAdjustableParameterInfo_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimAdjustableParameterInfo_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimAdjustableParameterInfo_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAdjustableParameterInfo::loadState(ossimKeywordlist const &,ossimString const &)\n"
    "    ossimAdjustableParameterInfo::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimAdjustableParameterInfo_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (bool)((ossimAdjustableParameterInfo const *)arg1)->saveState(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAdjustableParameterInfo_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "1"" of type '" "ossimAdjustableParameterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAdjustableParameterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimAdjustableParameterInfo const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAdjustableParameterInfo_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimAdjustableParameterInfo_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimAdjustableParameterInfo_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimAdjustableParameterInfo_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAdjustableParameterInfo::saveState(ossimKeywordlist &,ossimString const &) const\n"
    "    ossimAdjustableParameterInfo::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimAdjustableParameterInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAdjustableParameterInfo *arg1 = (ossimAdjustableParameterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimAdjustableParameterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAdjustableParameterInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimAdjustableParameterInfo" "', argument " "1"" of type '" "ossimAdjustableParameterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimAdjustableParameterInfo * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimAdjustableParameterInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimAdjustableParameterInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimCsvFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimCsvFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimCsvFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimCsvFile" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimCsvFile" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimCsvFile *)new ossimCsvFile((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimCsvFile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimCsvFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimCsvFile")) SWIG_fail;
  {
    try
    {
      result = (ossimCsvFile *)new ossimCsvFile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimCsvFile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimCsvFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimCsvFile__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimCsvFile__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimCsvFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimCsvFile::ossimCsvFile(ossimString const &)\n"
    "    ossimCsvFile::ossimCsvFile()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimCsvFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimCsvFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimCsvFile" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_open__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimCsvFile_open",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_open" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimCsvFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimCsvFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimCsvFile_open" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimCsvFile_open" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->open((ossimFilename const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_open__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimCsvFile_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_open" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimCsvFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimCsvFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->open((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_open(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimCsvFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimCsvFile_open__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimCsvFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimCsvFile_open__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimCsvFile_open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimCsvFile::open(ossimFilename const &,ossimString const &)\n"
    "    ossimCsvFile::open(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimCsvFile_close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_close" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  {
    try
    {
      (arg1)->close();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_readHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimCsvFile_readHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_readHeader" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->readHeader();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_nextRecord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ossimRefPtr< ossimCsvFile::Record > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimCsvFile_nextRecord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_nextRecord" "', argument " "1"" of type '" "ossimCsvFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  {
    try
    {
      result = (arg1)->nextRecord();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimCsvFile::Record >(static_cast< const ossimRefPtr< ossimCsvFile::Record >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimCsvFile__Record_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_fieldHeaderList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimCsvFile::StringListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimCsvFile_fieldHeaderList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_fieldHeaderList" "', argument " "1"" of type '" "ossimCsvFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  {
    try
    {
      result = (ossimCsvFile::StringListType *) &((ossimCsvFile const *)arg1)->fieldHeaderList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_indexOfField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimCsvFile *arg1 = (ossimCsvFile *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimCsvFile_indexOfField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimCsvFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimCsvFile_indexOfField" "', argument " "1"" of type '" "ossimCsvFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimCsvFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimCsvFile_indexOfField" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimCsvFile_indexOfField" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossim_int32)((ossimCsvFile const *)arg1)->indexOfField((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ossimCsvFile_INVALID_INDEX_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimCsvFile::INVALID_INDEX""' of type '""ossim_int32""'");
    }
    ossimCsvFile::INVALID_INDEX = static_cast< ossim_int32 >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimCsvFile_INVALID_INDEX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimCsvFile::INVALID_INDEX));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_INVALID_INDEX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimCsvFile_INVALID_INDEX_get();
}


SWIGINTERN PyObject *_wrap_ossimCsvFile_INVALID_INDEX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimCsvFile_INVALID_INDEX_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *ossimCsvFile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimCsvFile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try
    {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try
    {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try
    {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try
    {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try
    {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try
    {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try
    {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorossimString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_iterator" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_ossimString_Sg__iterator(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___nonzero__" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_ossimString_Sg____nonzero__((std::vector< ossimString > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___bool__" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_ossimString_Sg____bool__((std::vector< ossimString > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___len__" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_ossimString_Sg____len__((std::vector< ossimString > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_pop" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_ossimString_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ossimString >::value_type(static_cast< const std::vector< ossimString >::value_type& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  std::vector< ossimString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___getslice__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___getslice__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorossimString___getslice__" "', argument " "3"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimString >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< ossimString,std::allocator< ossimString > > *)std_vector_Sl_ossimString_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  std::vector< ossimString >::difference_type arg3 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorossimString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___setslice__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___setslice__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorossimString___setslice__" "', argument " "3"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimString >::difference_type >(val3);
  {
    std::vector<ossimString,std::allocator< ossimString > > *ptr = (std::vector<ossimString,std::allocator< ossimString > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorossimString___setslice__" "', argument " "4"" of type '" "std::vector< ossimString,std::allocator< ossimString > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString___setslice__" "', argument " "4"" of type '" "std::vector< ossimString,std::allocator< ossimString > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< ossimString,std::allocator< ossimString > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  std::vector< ossimString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___setslice__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___setslice__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorossimString___setslice__" "', argument " "3"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimString >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorossimString___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorossimString___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::__setslice__(std::vector< ossimString >::difference_type,std::vector< ossimString >::difference_type,std::vector< ossimString,std::allocator< ossimString > > const &)\n"
    "    std::vector< ossimString >::__setslice__(std::vector< ossimString >::difference_type,std::vector< ossimString >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  std::vector< ossimString >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___delslice__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___delslice__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorossimString___delslice__" "', argument " "3"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimString >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___delitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___delitem__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___getitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< ossimString,std::allocator< ossimString > > *)std_vector_Sl_ossimString_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___setitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<ossimString,std::allocator< ossimString > > *ptr = (std::vector<ossimString,std::allocator< ossimString > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorossimString___setitem__" "', argument " "3"" of type '" "std::vector< ossimString,std::allocator< ossimString > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString___setitem__" "', argument " "3"" of type '" "std::vector< ossimString,std::allocator< ossimString > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ossimString,std::allocator< ossimString > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___setitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___delitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorossimString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorossimString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::__delitem__(std::vector< ossimString >::difference_type)\n"
    "    std::vector< ossimString >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimString >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___getitem__" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___getitem__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< ossimString >::value_type *) &std_vector_Sl_ossimString_Sg____getitem____SWIG_1((std::vector< ossimString > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorossimString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorossimString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::__getitem__(PySliceObject *)\n"
    "    std::vector< ossimString >::__getitem__(std::vector< ossimString >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::difference_type arg2 ;
  std::vector< ossimString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString___setitem__" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString___setitem__" "', argument " "2"" of type '" "std::vector< ossimString >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorossimString___setitem__" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString___setitem__" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_ossimString_Sg____setitem____SWIG_2(arg1,arg2,(ossimString const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorossimString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorossimString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorossimString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::__setitem__(PySliceObject *,std::vector< ossimString,std::allocator< ossimString > > const &)\n"
    "    std::vector< ossimString >::__setitem__(PySliceObject *)\n"
    "    std::vector< ossimString >::__setitem__(std::vector< ossimString >::difference_type,std::vector< ossimString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_append" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorossimString_append" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_append" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_ossimString_Sg__append(arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorossimString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorossimString")) SWIG_fail;
  {
    try
    {
      result = (std::vector< ossimString > *)new std::vector< ossimString >();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorossimString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorossimString",&obj0)) SWIG_fail;
  {
    std::vector<ossimString,std::allocator< ossimString > > *ptr = (std::vector<ossimString,std::allocator< ossimString > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorossimString" "', argument " "1"" of type '" "std::vector< ossimString > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorossimString" "', argument " "1"" of type '" "std::vector< ossimString > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< ossimString > *)new std::vector< ossimString >((std::vector< ossimString > const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_empty" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< ossimString > const *)arg1)->empty();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_size" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimString > const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_clear" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_swap" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorossimString_swap" "', argument " "2"" of type '" "std::vector< ossimString > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_swap" "', argument " "2"" of type '" "std::vector< ossimString > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< ossimString > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_get_allocator" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimString > const *)arg1)->get_allocator();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ossimString >::allocator_type(static_cast< const std::vector< ossimString >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_ossimString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_begin" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_end" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_rbegin" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_rend" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorossimString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorossimString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorossimString" "', argument " "1"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ossimString >::size_type >(val1);
  {
    try
    {
      result = (std::vector< ossimString > *)new std::vector< ossimString >(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_pop_back" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_resize" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString_resize" "', argument " "2"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimString >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_erase" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::iterator arg2 ;
  std::vector< ossimString >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimString >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_erase" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "3"" of type '" "std::vector< ossimString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_erase" "', argument " "3"" of type '" "std::vector< ossimString >::iterator""'");
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorossimString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorossimString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::erase(std::vector< ossimString >::iterator)\n"
    "    std::vector< ossimString >::erase(std::vector< ossimString >::iterator,std::vector< ossimString >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorossimString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString >::size_type arg1 ;
  std::vector< ossimString >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimString > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorossimString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorossimString" "', argument " "1"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ossimString >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorossimString" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorossimString" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< ossimString > *)new std::vector< ossimString >(arg1,(std::vector< ossimString >::value_type const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorossimString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorossimString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorossimString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorossimString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorossimString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorossimString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::vector()\n"
    "    std::vector< ossimString >::vector(std::vector< ossimString > const &)\n"
    "    std::vector< ossimString >::vector(std::vector< ossimString >::size_type)\n"
    "    std::vector< ossimString >::vector(std::vector< ossimString >::size_type,std::vector< ossimString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_push_back" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorossimString_push_back" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_push_back" "', argument " "2"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< ossimString >::value_type const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_front" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (std::vector< ossimString >::value_type *) &((std::vector< ossimString > const *)arg1)->front();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_back" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = (std::vector< ossimString >::value_type *) &((std::vector< ossimString > const *)arg1)->back();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::size_type arg2 ;
  std::vector< ossimString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_assign" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString_assign" "', argument " "2"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorossimString_assign" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_assign" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< ossimString >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::size_type arg2 ;
  std::vector< ossimString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_resize" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString_resize" "', argument " "2"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorossimString_resize" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_resize" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< ossimString >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorossimString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorossimString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::resize(std::vector< ossimString >::size_type)\n"
    "    std::vector< ossimString >::resize(std::vector< ossimString >::size_type,std::vector< ossimString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::iterator arg2 ;
  std::vector< ossimString >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimString >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorossimString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_insert" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_insert" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_insert" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorossimString_insert" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_insert" "', argument " "3"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp3);
  {
    try
    {
      result = (arg1)->insert(arg2,(std::vector< ossimString >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimString >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::iterator arg2 ;
  std::vector< ossimString >::size_type arg3 ;
  std::vector< ossimString >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorossimString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_insert" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_insert" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorossimString_insert" "', argument " "2"" of type '" "std::vector< ossimString >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorossimString_insert" "', argument " "3"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ossimString >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorossimString_insert" "', argument " "4"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorossimString_insert" "', argument " "4"" of type '" "std::vector< ossimString >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ossimString >::value_type * >(argp4);
  {
    try
    {
      (arg1)->insert(arg2,arg3,(std::vector< ossimString >::value_type const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorossimString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimString,std::allocator< ossimString > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimString >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimString, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorossimString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorossimString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimString >::insert(std::vector< ossimString >::iterator,std::vector< ossimString >::value_type const &)\n"
    "    std::vector< ossimString >::insert(std::vector< ossimString >::iterator,std::vector< ossimString >::size_type,std::vector< ossimString >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorossimString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  std::vector< ossimString >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorossimString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_reserve" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorossimString_reserve" "', argument " "2"" of type '" "std::vector< ossimString >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimString >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorossimString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorossimString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorossimString_capacity" "', argument " "1"" of type '" "std::vector< ossimString > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimString > const *)arg1)->capacity();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorossimString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimString > *arg1 = (std::vector< ossimString > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorossimString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorossimString" "', argument " "1"" of type '" "std::vector< ossimString > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimString > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorossimString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimDatumFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDatumFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDatumFactory" "', argument " "1"" of type '" "ossimDatumFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_create" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDatumFactory_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_create" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDatumFactory_create" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->create((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_create__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_create" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->create((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_create__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  ossimDatum *arg2 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_create" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_create" "', argument " "2"" of type '" "ossimDatum const *""'"); 
  }
  arg2 = reinterpret_cast< ossimDatum * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->create((ossimDatum const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactory_create__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactory_create__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimDatum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactory_create__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDatumFactory_create__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDatumFactory_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDatumFactory::create(ossimString const &) const\n"
    "    ossimDatumFactory::create(ossimKeywordlist const &,char const *) const\n"
    "    ossimDatumFactory::create(ossimKeywordlist const &) const\n"
    "    ossimDatumFactory::create(ossimDatum const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimDatumFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimDatumFactory *)ossimDatumFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_wgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatumFactory_wgs84",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_wgs84" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->wgs84();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_wgs72(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatumFactory_wgs72",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_wgs72" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactory const *)arg1)->wgs72();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_getList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< ossimString,std::allocator< ossimString > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatumFactory_getList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_getList" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  {
    try
    {
      result = ((ossimDatumFactory const *)arg1)->getList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<ossimString,std::allocator< ossimString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_getList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactory_getList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_getList" "', argument " "1"" of type '" "ossimDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactory_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimDatumFactory const *)arg1)->getList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_getList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimDatumFactory_getList__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactory_getList__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDatumFactory_getList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDatumFactory::getList() const\n"
    "    ossimDatumFactory::getList(std::vector< ossimString,std::allocator< ossimString > > &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactory_writeCStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactory *arg1 = (ossimDatumFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactory_writeCStructure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactory_writeCStructure" "', argument " "1"" of type '" "ossimDatumFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactory_writeCStructure" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactory_writeCStructure" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->writeCStructure((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDatumFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDatumFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimDatumFactoryRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDatumFactoryRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDatumFactoryRegistry" "', argument " "1"" of type '" "ossimDatumFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimDatumFactoryRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimDatumFactoryRegistry *)ossimDatumFactoryRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_registerFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  ossimDatumFactoryInterface *arg2 = (ossimDatumFactoryInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactoryRegistry_registerFactory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactoryRegistry_registerFactory" "', argument " "1"" of type '" "ossimDatumFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDatumFactoryInterface, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactoryRegistry_registerFactory" "', argument " "2"" of type '" "ossimDatumFactoryInterface *""'"); 
  }
  arg2 = reinterpret_cast< ossimDatumFactoryInterface * >(argp2);
  {
    try
    {
      (arg1)->registerFactory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactoryRegistry_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "1"" of type '" "ossimDatumFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactoryRegistry const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDatumFactoryRegistry_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "1"" of type '" "ossimDatumFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactoryRegistry const *)arg1)->create((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_create__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactoryRegistry_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "1"" of type '" "ossimDatumFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactoryRegistry_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimDatumFactoryRegistry const *)arg1)->create((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactoryRegistry_create__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDatumFactoryRegistry_create__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDatumFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDatumFactoryRegistry_create__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDatumFactoryRegistry_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDatumFactoryRegistry::create(ossimString const &) const\n"
    "    ossimDatumFactoryRegistry::create(ossimKeywordlist const &,char const *) const\n"
    "    ossimDatumFactoryRegistry::create(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDatumFactoryRegistry_getList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatumFactoryRegistry *arg1 = (ossimDatumFactoryRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatumFactoryRegistry_getList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatumFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatumFactoryRegistry_getList" "', argument " "1"" of type '" "ossimDatumFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatumFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatumFactoryRegistry_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatumFactoryRegistry_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimDatumFactoryRegistry const *)arg1)->getList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDatumFactoryRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDatumFactoryRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimDatum_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_shift" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimDatum const *)arg1)->shift((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_shiftToWgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum_shiftToWgs84",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_shiftToWgs84" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum_shiftToWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatum_shiftToWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimDatum const *)arg1)->shiftToWgs84((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_shiftFromWgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum_shiftFromWgs84",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_shiftFromWgs84" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum_shiftFromWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatum_shiftFromWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimDatum const *)arg1)->shiftFromWgs84((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_isTheSameAs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimDatum *arg2 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum_isTheSameAs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_isTheSameAs" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum_isTheSameAs" "', argument " "2"" of type '" "ossimDatum const *""'"); 
  }
  arg2 = reinterpret_cast< ossimDatum * >(argp2);
  {
    try
    {
      result = (bool)((ossimDatum const *)arg1)->isTheSameAs((ossimDatum const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_code" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimDatum const *)arg1)->code();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_name" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimDatum const *)arg1)->name();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_epsgCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_epsgCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_epsgCode" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimDatum const *)arg1)->epsgCode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_ellipsoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_ellipsoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_ellipsoid" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossimEllipsoid *)((ossimDatum const *)arg1)->ellipsoid();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_sigmaX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_sigmaX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_sigmaX" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->sigmaX();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_sigmaY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_sigmaY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_sigmaY" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->sigmaY();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_sigmaZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_sigmaZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_sigmaZ" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->sigmaZ();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_westLongitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_westLongitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_westLongitude" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->westLongitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_eastLongitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_eastLongitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_eastLongitude" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->eastLongitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_southLatitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_southLatitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_southLatitude" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->southLatitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_northLatitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_northLatitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_northLatitude" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->northLatitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param1" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param1();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param2" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param2();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param3" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param3();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param4" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param4();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param5",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param5" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param5();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param6",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param6" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param6();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_param7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDatum_param7",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_param7" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimDatum const *)arg1)->param7();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum_isInside(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossim_float64 arg2 ;
  ossim_float64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDatum_isInside",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum_isInside" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDatum_isInside" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimDatum_isInside" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  arg3 = static_cast< ossim_float64 >(val3);
  {
    try
    {
      result = (bool)((ossimDatum const *)arg1)->isInside(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimDatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum___eq__" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDatum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum___eq__" "', argument " "2"" of type '" "ossimDatum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatum___eq__" "', argument " "2"" of type '" "ossimDatum const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDatum * >(argp2);
  {
    try
    {
      result = (bool)((ossimDatum const *)arg1)->operator ==((ossimDatum const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDatum___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDatum *arg1 = (ossimDatum *) 0 ;
  ossimDatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDatum___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDatum___ne__" "', argument " "1"" of type '" "ossimDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDatum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDatum___ne__" "', argument " "2"" of type '" "ossimDatum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDatum___ne__" "', argument " "2"" of type '" "ossimDatum const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDatum * >(argp2);
  {
    try
    {
      result = (bool)((ossimDatum const *)arg1)->operator !=((ossimDatum const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDatum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDatum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimDirectoryData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDirectoryData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDirectoryData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDirectoryData" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDirectoryData" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimDirectoryData *)new ossimDirectoryData((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDirectoryData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimDirectoryData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDirectoryData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDirectoryData" "', argument " "1"" of type '" "ossimDirectoryData *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectoryData_isOk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDirectoryData_isOk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectoryData_isOk" "', argument " "1"" of type '" "ossimDirectoryData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  {
    try
    {
      result = (bool)((ossimDirectoryData const *)arg1)->isOk();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectoryData_setFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDirectoryData_setFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectoryData_setFlags" "', argument " "1"" of type '" "ossimDirectoryData *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDirectoryData_setFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setFlags(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectoryData_getFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDirectoryData_getFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectoryData_getFlags" "', argument " "1"" of type '" "ossimDirectoryData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  {
    try
    {
      result = (int)((ossimDirectoryData const *)arg1)->getFlags();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectoryData_rewind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDirectoryData_rewind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectoryData_rewind" "', argument " "1"" of type '" "ossimDirectoryData *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  {
    try
    {
      (arg1)->rewind();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectoryData_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectoryData *arg1 = (ossimDirectoryData *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDirectoryData_read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectoryData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectoryData_read" "', argument " "1"" of type '" "ossimDirectoryData *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectoryData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectoryData_read" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectoryData_read" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->read(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDirectoryData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDirectoryData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimDirectory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimDirectory")) SWIG_fail;
  {
    try
    {
      result = (ossimDirectory *)new ossimDirectory();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDirectory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDirectory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDirectory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDirectory" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDirectory" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimDirectory *)new ossimDirectory((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDirectory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDirectory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimDirectory__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDirectory__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimDirectory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDirectory::ossimDirectory()\n"
    "    ossimDirectory::ossimDirectory(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDirectory" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDirectory_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_open" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->open((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_isOpened(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDirectory_isOpened",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_isOpened" "', argument " "1"" of type '" "ossimDirectory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  {
    try
    {
      result = (bool)((ossimDirectory const *)arg1)->isOpened();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_getFirst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDirectory_getFirst",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_getFirst" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_getFirst" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_getFirst" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimDirectory_getFirst" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)(arg1)->getFirst(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_getFirst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDirectory_getFirst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_getFirst" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_getFirst" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_getFirst" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->getFirst(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_getFirst(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDirectory_getFirst__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimDirectory_getFirst__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDirectory_getFirst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDirectory::getFirst(ossimFilename &,int)\n"
    "    ossimDirectory::getFirst(ossimFilename &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_getNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDirectory_getNext",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_getNext" "', argument " "1"" of type '" "ossimDirectory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_getNext" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_getNext" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)((ossimDirectory const *)arg1)->getNext(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findAllFilesThatMatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimDirectory_findAllFilesThatMatch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      (arg1)->findAllFilesThatMatch(*arg2,(ossimString const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findAllFilesThatMatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDirectory_findAllFilesThatMatch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findAllFilesThatMatch" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      (arg1)->findAllFilesThatMatch(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findAllFilesThatMatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDirectory_findAllFilesThatMatch__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimDirectory_findAllFilesThatMatch__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDirectory_findAllFilesThatMatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDirectory::findAllFilesThatMatch(std::vector< ossimFilename,std::allocator< ossimFilename > > &,ossimString const &,int)\n"
    "    ossimDirectory::findAllFilesThatMatch(std::vector< ossimFilename,std::allocator< ossimFilename > > &,ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findCaseInsensitiveEquivalents__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimDirectory_findCaseInsensitiveEquivalents",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (bool)(arg1)->findCaseInsensitiveEquivalents((ossimFilename const &)*arg2,*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findCaseInsensitiveEquivalents__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDirectory *arg1 = (ossimDirectory *) 0 ;
  ossimFilename *arg2 = 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDirectory_findCaseInsensitiveEquivalents",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDirectory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "1"" of type '" "ossimDirectory *""'"); 
  }
  arg1 = reinterpret_cast< ossimDirectory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDirectory_findCaseInsensitiveEquivalents" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->findCaseInsensitiveEquivalents((ossimFilename const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDirectory_findCaseInsensitiveEquivalents(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimDirectory_findCaseInsensitiveEquivalents__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDirectory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimDirectory_findCaseInsensitiveEquivalents__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDirectory_findCaseInsensitiveEquivalents'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDirectory::findCaseInsensitiveEquivalents(ossimFilename const &,std::vector< ossimFilename,std::allocator< ossimFilename > > &,bool)\n"
    "    ossimDirectory::findCaseInsensitiveEquivalents(ossimFilename const &,std::vector< ossimFilename,std::allocator< ossimFilename > > &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimDirectory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDirectory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimDpt3d",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimDpt3d" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimDpt3d" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimDpt3d",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimDpt3d" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((double const &)*arg1,(double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt3d",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((double const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimDpt3d")) SWIG_fail;
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((ossimIpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimColumnVector3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt3d" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimColumnVector3d * >(argp1);
  {
    try
    {
      result = (ossimDpt3d *)new ossimDpt3d((ossimColumnVector3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt3d(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimDpt3d__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt3d__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt3d__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt3d__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ossimDpt3d__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimDpt3d__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimDpt3d__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimDpt3d'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt3d::ossimDpt3d(double const &,double const &,double const &)\n"
    "    ossimDpt3d::ossimDpt3d(double const &,double const &)\n"
    "    ossimDpt3d::ossimDpt3d(double const &)\n"
    "    ossimDpt3d::ossimDpt3d()\n"
    "    ossimDpt3d::ossimDpt3d(ossimDpt const &)\n"
    "    ossimDpt3d::ossimDpt3d(ossimIpt const &)\n"
    "    ossimDpt3d::ossimDpt3d(ossimColumnVector3d const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___cmp__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___cmp__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___cmp__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (bool)((ossimDpt3d const *)arg1)->operator ==((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___ne__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___ne__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___ne__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (bool)((ossimDpt3d const *)arg1)->operator !=((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_makeNan" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_hasNans" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (bool)((ossimDpt3d const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_length" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (double)((ossimDpt3d const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_length2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_length2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_length2" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (double)((ossimDpt3d const *)arg1)->length2();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___add__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___add__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___add__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->operator +((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt3d(static_cast< const ossimDpt3d& >(result))), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___sub__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___sub__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___sub__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->operator -((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt3d(static_cast< const ossimDpt3d& >(result))), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___iadd__" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___iadd__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___iadd__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (ossimDpt3d *) &(arg1)->operator +=((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___isub__" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___isub__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___isub__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (ossimDpt3d *) &(arg1)->operator -=((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___mul__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->operator *((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt3d(static_cast< const ossimDpt3d& >(result))), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___div__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->operator /((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt3d(static_cast< const ossimDpt3d& >(result))), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___idiv__" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->operator /=(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___imul__" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->operator *=(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___mul__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___mul__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___mul__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (double)((ossimDpt3d const *)arg1)->operator *((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt3d___mul____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimDpt3d___mul____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d___xor__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d___xor__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d___xor__" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d___xor__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d___xor__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->operator ^((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt3d(static_cast< const ossimDpt3d& >(result))), SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_toString" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d_toString" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->toString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_toString" "', argument " "1"" of type '" "ossimDpt3d const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = ((ossimDpt3d const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimDpt3d_toString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimDpt3d_toString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDpt3d_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt3d::toString(ossim_uint32) const\n"
    "    ossimDpt3d::toString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_toPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d_toPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_toPoint" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt3d_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt3d_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->toPoint((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_x_set" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_x_get" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_y_set" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_y_get" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt3d_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_z_set" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt3d_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt3d_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt3d_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt3d_z_get" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  result = (double) ((arg1)->z);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimDpt3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = (ossimDpt3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDpt3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt3d, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDpt3d" "', argument " "1"" of type '" "ossimDpt3d *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDpt3d_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDpt3d, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimDpt")) SWIG_fail;
  {
    try
    {
      result = (ossimDpt *)new ossimDpt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimDpt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimDpt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimFpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt((ossimFpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt((ossimIpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt((ossimDpt3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimDpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *)new ossimDpt((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimDpt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimDpt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimDpt__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimDpt__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimDpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt::ossimDpt()\n"
    "    ossimDpt::ossimDpt(double,double)\n"
    "    ossimDpt::ossimDpt(ossimDpt const &)\n"
    "    ossimDpt::ossimDpt(ossimFpt const &)\n"
    "    ossimDpt::ossimDpt(ossimIpt const &)\n"
    "    ossimDpt::ossimDpt(ossimDpt3d const &)\n"
    "    ossimDpt::ossimDpt(ossimGpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___set__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator =((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimFpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___set__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator =((ossimFpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___set__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator =((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___set__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimDpt3d const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt3d * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator =((ossimDpt3d const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___set__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___set__" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator =((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___set__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt___set____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt___set____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt___set____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt___set____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt___set____SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDpt___set__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt::operator =(ossimDpt const &)\n"
    "    ossimDpt::operator =(ossimFpt const &)\n"
    "    ossimDpt::operator =(ossimIpt const &)\n"
    "    ossimDpt::operator =(ossimDpt3d const &)\n"
    "    ossimDpt::operator =(ossimGpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDpt___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___cmp__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___cmp__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___cmp__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimDpt const *)arg1)->operator ==((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___ne__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___ne__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___ne__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimDpt const *)arg1)->operator !=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_makeNan" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_hasNans" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimDpt const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_isNan" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimDpt const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_length" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (double)((ossimDpt const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___add__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___add__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___add__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = ((ossimDpt const *)arg1)->operator +((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___sub__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___sub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___sub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = ((ossimDpt const *)arg1)->operator -((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___iadd__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___iadd__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___iadd__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator +=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___isub__" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt___isub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt___isub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator -=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___mul__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimDpt const *)arg1)->operator *((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt___div__" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimDpt const *)arg1)->operator /((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_ossimDpt_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  std::ostream *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimDpt_ossimDpt_print",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_ossimDpt_print" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt_ossimDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt_ossimDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimDpt_ossimDpt_print" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (std::ostream *) &((ossimDpt const *)arg1)->print(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_ossimDpt_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt_ossimDpt_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_ossimDpt_print" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt_ossimDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt_ossimDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimDpt const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_ossimDpt_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimDpt_ossimDpt_print__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimDpt_ossimDpt_print__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDpt_ossimDpt_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt::print(std::ostream &,ossim_uint32) const\n"
    "    ossimDpt::print(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_toString" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimDpt_toString" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimDpt const *)arg1)->toString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimDpt_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_toString" "', argument " "1"" of type '" "ossimDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = ((ossimDpt const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimDpt_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimDpt_toString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimDpt_toString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimDpt_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimDpt::toString(ossim_uint32) const\n"
    "    ossimDpt::toString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimDpt_toPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimDpt_toPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimDpt_toPoint" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimDpt_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimDpt_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->toPoint((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (std::istream *) &operator >>(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimDpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimDpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimDpt" "', argument " "1"" of type '" "ossimDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimDpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimDpt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimEbcdicToAscii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEbcdicToAscii *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimEbcdicToAscii")) SWIG_fail;
  {
    try
    {
      result = (ossimEbcdicToAscii *)new ossimEbcdicToAscii();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEbcdicToAscii, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEbcdicToAscii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEbcdicToAscii *arg1 = (ossimEbcdicToAscii *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEbcdicToAscii",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEbcdicToAscii, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEbcdicToAscii" "', argument " "1"" of type '" "ossimEbcdicToAscii *""'"); 
  }
  arg1 = reinterpret_cast< ossimEbcdicToAscii * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEbcdicToAscii_asciiToEbcdic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEbcdicToAscii *arg1 = (ossimEbcdicToAscii *) 0 ;
  ossim_uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint8 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEbcdicToAscii_asciiToEbcdic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEbcdicToAscii, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEbcdicToAscii_asciiToEbcdic" "', argument " "1"" of type '" "ossimEbcdicToAscii const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEbcdicToAscii * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEbcdicToAscii_asciiToEbcdic" "', argument " "2"" of type '" "ossim_uint8""'");
  } 
  arg2 = static_cast< ossim_uint8 >(val2);
  {
    try
    {
      result = (ossim_uint8)((ossimEbcdicToAscii const *)arg1)->asciiToEbcdic(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEbcdicToAscii_ebcdicToAscii__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEbcdicToAscii *arg1 = (ossimEbcdicToAscii *) 0 ;
  ossim_uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint8 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEbcdicToAscii_ebcdicToAscii",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEbcdicToAscii, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEbcdicToAscii_ebcdicToAscii" "', argument " "1"" of type '" "ossimEbcdicToAscii const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEbcdicToAscii * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEbcdicToAscii_ebcdicToAscii" "', argument " "2"" of type '" "ossim_uint8""'");
  } 
  arg2 = static_cast< ossim_uint8 >(val2);
  {
    try
    {
      result = (ossim_uint8)((ossimEbcdicToAscii const *)arg1)->ebcdicToAscii(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEbcdicToAscii_ebcdicToAscii__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEbcdicToAscii *arg1 = (ossimEbcdicToAscii *) 0 ;
  char *arg2 = (char *) 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEbcdicToAscii_ebcdicToAscii",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEbcdicToAscii, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEbcdicToAscii_ebcdicToAscii" "', argument " "1"" of type '" "ossimEbcdicToAscii const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEbcdicToAscii * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEbcdicToAscii_ebcdicToAscii" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEbcdicToAscii_ebcdicToAscii" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      ((ossimEbcdicToAscii const *)arg1)->ebcdicToAscii(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEbcdicToAscii_ebcdicToAscii(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEbcdicToAscii, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEbcdicToAscii_ebcdicToAscii__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEbcdicToAscii, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimEbcdicToAscii_ebcdicToAscii__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEbcdicToAscii_ebcdicToAscii'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEbcdicToAscii::ebcdicToAscii(ossim_uint8) const\n"
    "    ossimEbcdicToAscii::ebcdicToAscii(char *,ossim_uint32) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimEbcdicToAscii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEbcdicToAscii, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimEcefPoint")) SWIG_fail;
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint((ossimEcefPoint const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimEcefPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimEcefPoint" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimEcefPoint" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimColumnVector3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimColumnVector3d * >(argp1);
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint((ossimColumnVector3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefPoint" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (ossimEcefPoint *)new ossimEcefPoint((ossimDpt3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimEcefPoint__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefPoint__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefPoint__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefPoint__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefPoint__SWIG_5(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimEcefPoint__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimEcefPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::ossimEcefPoint()\n"
    "    ossimEcefPoint::ossimEcefPoint(ossimEcefPoint const &)\n"
    "    ossimEcefPoint::ossimEcefPoint(ossimGpt const &)\n"
    "    ossimEcefPoint::ossimEcefPoint(double const &,double const &,double const &)\n"
    "    ossimEcefPoint::ossimEcefPoint(ossimColumnVector3d const &)\n"
    "    ossimEcefPoint::ossimEcefPoint(ossimDpt3d const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_makeNan" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_hasNans" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (bool)((ossimEcefPoint const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_isNan" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (bool)((ossimEcefPoint const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___sub__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___sub__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___sub__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = ((ossimEcefPoint const *)arg1)->operator -((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___add__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___add__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___add__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = ((ossimEcefPoint const *)arg1)->operator +((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefPoint(static_cast< const ossimEcefPoint& >(result))), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___sub__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___sub__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___sub__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = ((ossimEcefPoint const *)arg1)->operator -((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefPoint(static_cast< const ossimEcefPoint& >(result))), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefPoint___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefPoint___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___set__" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___set__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___set__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (ossimEcefPoint *) &(arg1)->operator =((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___cmp__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___cmp__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___cmp__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (bool)((ossimEcefPoint const *)arg1)->operator ==((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___ne__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint___ne__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint___ne__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (bool)((ossimEcefPoint const *)arg1)->operator !=((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_x__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_x" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_x__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_x" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_x(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_x__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_x__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_x'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::x() const\n"
    "    ossimEcefPoint::x()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_y__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_y" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_y__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_y" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_y(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_y__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_y__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_y'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::y() const\n"
    "    ossimEcefPoint::y()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_z__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_z" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_z__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_z" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_z(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_z__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_z__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_z'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::z() const\n"
    "    ossimEcefPoint::z()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___getitem__" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefPoint___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (double *) &(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint___getitem__" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefPoint___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (double *) &((ossimEcefPoint const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefPoint___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefPoint___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::operator [](int)\n"
    "    ossimEcefPoint::operator [](int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_data" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &((ossimEcefPoint const *)arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_data" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &(arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_data__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_data__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::data() const\n"
    "    ossimEcefPoint::data()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_getMagnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_getMagnitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_getMagnitude" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->getMagnitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_magnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_magnitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_magnitude" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->magnitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_length" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefPoint const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_normalize" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (double)(arg1)->normalize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_toString" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefPoint_toString" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimEcefPoint const *)arg1)->toString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_toString" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = ((ossimEcefPoint const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_toString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefPoint_toString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::toString(ossim_uint32) const\n"
    "    ossimEcefPoint::toString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_toPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint_toPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_toPoint" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->toPoint((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_ossimEcefPoint_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefPoint_ossimEcefPoint_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_ossimEcefPoint_print" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefPoint_ossimEcefPoint_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefPoint_ossimEcefPoint_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      ((ossimEcefPoint const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_ossimEcefPoint_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefPoint_ossimEcefPoint_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefPoint_ossimEcefPoint_print" "', argument " "1"" of type '" "ossimEcefPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      ((ossimEcefPoint const *)arg1)->print();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefPoint_ossimEcefPoint_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefPoint_ossimEcefPoint_print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefPoint_ossimEcefPoint_print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefPoint_ossimEcefPoint_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefPoint::print(std::ostream &) const\n"
    "    ossimEcefPoint::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEcefPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = (ossimEcefPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEcefPoint" "', argument " "1"" of type '" "ossimEcefPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEcefPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEcefPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimEcefVector")) SWIG_fail;
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimEcefVector const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector((ossimEcefVector const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimEcefVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimEcefVector" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector((ossimEcefPoint const &)*arg1,(ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimEcefVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimEcefVector" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector((ossimGpt const &)*arg1,(ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimEcefVector",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimEcefVector" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimEcefVector" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimColumnVector3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEcefVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEcefVector" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimColumnVector3d * >(argp1);
  {
    try
    {
      result = (ossimEcefVector *)new ossimEcefVector((ossimColumnVector3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEcefVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimEcefVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefVector__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEcefVector__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimEcefVector__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimEcefVector__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimEcefVector__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimEcefVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::ossimEcefVector()\n"
    "    ossimEcefVector::ossimEcefVector(ossimEcefVector const &)\n"
    "    ossimEcefVector::ossimEcefVector(ossimEcefPoint const &,ossimEcefPoint const &)\n"
    "    ossimEcefVector::ossimEcefVector(ossimGpt const &,ossimGpt const &)\n"
    "    ossimEcefVector::ossimEcefVector(double const &,double const &,double const &)\n"
    "    ossimEcefVector::ossimEcefVector(ossimColumnVector3d const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_makeNan" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_hasNans" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (bool)((ossimEcefVector const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_isNan" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (bool)((ossimEcefVector const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector___sub__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___sub__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator -();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___add__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___add__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___add__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator +((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___sub__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___sub__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___sub__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator -((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector___sub____SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefVector___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___add__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___add__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___add__" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator +((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefPoint(static_cast< const ossimEcefPoint& >(result))), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefVector___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefVector___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___mul__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefVector___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator *((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___div__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefVector___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->operator /((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___cmp__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___cmp__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___cmp__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (bool)((ossimEcefVector const *)arg1)->operator ==((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___ne__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___ne__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___ne__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (bool)((ossimEcefVector const *)arg1)->operator !=((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___set__" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector___set__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector___set__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (ossimEcefVector *) &(arg1)->operator =((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_dot" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector_dot" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector_dot" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->dot((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_angleTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_angleTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_angleTo" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector_angleTo" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector_angleTo" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->angleTo((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_cross" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector_cross" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector_cross" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->cross((ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_unitVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_unitVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_unitVector" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->unitVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_magnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_magnitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_magnitude" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->magnitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_norm2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_norm2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_norm2" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->norm2();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_length" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_normalize" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)(arg1)->normalize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_x__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_x" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_x__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_x" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_x(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_x__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_x__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_x'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::x() const\n"
    "    ossimEcefVector::x()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_y__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_y" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_y__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_y" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_y(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_y__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_y__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_y'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::y() const\n"
    "    ossimEcefVector::y()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_z__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_z" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double)((ossimEcefVector const *)arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_z__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_z" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_z(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_z__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_z__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_z'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::z() const\n"
    "    ossimEcefVector::z()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___getitem__" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefVector___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (double *) &(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector___getitem__" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefVector___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (double *) &((ossimEcefVector const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::operator [](int)\n"
    "    ossimEcefVector::operator [](int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_data" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &((ossimEcefVector const *)arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_data" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &(arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_data__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_data__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::data() const\n"
    "    ossimEcefVector::data()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_toString" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEcefVector_toString" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->toString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_toString" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      result = ((ossimEcefVector const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_toString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEcefVector_toString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::toString(ossim_uint32) const\n"
    "    ossimEcefVector::toString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_toPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_toPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_toPoint" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->toPoint((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_ossimEcefVector_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEcefVector_ossimEcefVector_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_ossimEcefVector_print" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEcefVector_ossimEcefVector_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEcefVector_ossimEcefVector_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try
    {
      ((ossimEcefVector const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_ossimEcefVector_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEcefVector_ossimEcefVector_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEcefVector_ossimEcefVector_print" "', argument " "1"" of type '" "ossimEcefVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      ((ossimEcefVector const *)arg1)->print();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEcefVector_ossimEcefVector_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEcefVector_ossimEcefVector_print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEcefVector_ossimEcefVector_print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEcefVector_ossimEcefVector_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEcefVector::print(ostream &) const\n"
    "    ossimEcefVector::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *arg1 = 0 ;
  ossimEcefVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  arg1 = reinterpret_cast< ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  {
    try
    {
      result = (ostream *) &operator <<(*arg1,(ossimEcefVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEcefVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = (ossimEcefVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEcefVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEcefVector" "', argument " "1"" of type '" "ossimEcefVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEcefVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEcefVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimEllipsoidFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *arg1 = (ossimEllipsoidFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEllipsoidFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoidFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEllipsoidFactory" "', argument " "1"" of type '" "ossimEllipsoidFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoidFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoidFactory_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *arg1 = (ossimEllipsoidFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoidFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoidFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoidFactory_create" "', argument " "1"" of type '" "ossimEllipsoidFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoidFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoidFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoidFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimEllipsoid *)((ossimEllipsoidFactory const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoidFactory_wgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *arg1 = (ossimEllipsoidFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoidFactory_wgs84",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoidFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoidFactory_wgs84" "', argument " "1"" of type '" "ossimEllipsoidFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoidFactory * >(argp1);
  {
    try
    {
      result = (ossimEllipsoid *)((ossimEllipsoidFactory const *)arg1)->wgs84();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoidFactory_wgs72(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *arg1 = (ossimEllipsoidFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoidFactory_wgs72",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoidFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoidFactory_wgs72" "', argument " "1"" of type '" "ossimEllipsoidFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoidFactory * >(argp1);
  {
    try
    {
      result = (ossimEllipsoid *)((ossimEllipsoidFactory const *)arg1)->wgs72();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoidFactory_findEpsgCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *arg1 = (ossimEllipsoidFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoidFactory_findEpsgCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoidFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoidFactory_findEpsgCode" "', argument " "1"" of type '" "ossimEllipsoidFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoidFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoidFactory_findEpsgCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoidFactory_findEpsgCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossim_uint32)((ossimEllipsoidFactory const *)arg1)->findEpsgCode((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoidFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoidFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimEllipsoidFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimEllipsoidFactory *)ossimEllipsoidFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoidFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEllipsoidFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEllipsoidFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimEllipsoid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimEllipsoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEllipsoid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimEllipsoid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimEllipsoid const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (ossimEllipsoid *)new ossimEllipsoid((ossimEllipsoid const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEllipsoid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  ossim_uint32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimEllipsoid",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimEllipsoid" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEllipsoid" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimEllipsoid" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimEllipsoid" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimEllipsoid" "', argument " "5"" of type '" "ossim_uint32""'");
  } 
  arg5 = static_cast< ossim_uint32 >(val5);
  {
    try
    {
      result = (ossimEllipsoid *)new ossimEllipsoid((ossimString const &)*arg1,(ossimString const &)*arg2,(double const &)*arg3,(double const &)*arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEllipsoid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimEllipsoid",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimEllipsoid" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimEllipsoid" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimEllipsoid" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimEllipsoid" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  {
    try
    {
      result = (ossimEllipsoid *)new ossimEllipsoid((ossimString const &)*arg1,(ossimString const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEllipsoid__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimEllipsoid",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimEllipsoid" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimEllipsoid" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (ossimEllipsoid *)new ossimEllipsoid((double const &)*arg1,(double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEllipsoid__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimEllipsoid")) SWIG_fail;
  {
    try
    {
      result = (ossimEllipsoid *)new ossimEllipsoid();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimEllipsoid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimEllipsoid__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimEllipsoid__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimEllipsoid__SWIG_3(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimEllipsoid__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimEllipsoid__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimEllipsoid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEllipsoid::ossimEllipsoid(ossimEllipsoid const &)\n"
    "    ossimEllipsoid::ossimEllipsoid(ossimString const &,ossimString const &,double const &,double const &,ossim_uint32)\n"
    "    ossimEllipsoid::ossimEllipsoid(ossimString const &,ossimString const &,double const &,double const &)\n"
    "    ossimEllipsoid::ossimEllipsoid(double const &,double const &)\n"
    "    ossimEllipsoid::ossimEllipsoid()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimEllipsoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEllipsoid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEllipsoid" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_name" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimEllipsoid const *)arg1)->name();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_code" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimEllipsoid const *)arg1)->code();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_a",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_a" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double *) &((ossimEllipsoid const *)arg1)->a();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_b",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_b" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double *) &((ossimEllipsoid const *)arg1)->b();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_getA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_getA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_getA" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double *) &((ossimEllipsoid const *)arg1)->getA();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_getB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_getB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_getB" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double *) &((ossimEllipsoid const *)arg1)->getB();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_getFlattening(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_getFlattening",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_getFlattening" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double *) &((ossimEllipsoid const *)arg1)->getFlattening();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_setA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_setA",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_setA" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_setA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setA(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_setB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_setB",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_setB" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_setB" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setB(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_setAB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_setAB",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_setAB" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_setAB" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEllipsoid_setAB" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setAB(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_setEpsgCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_setEpsgCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_setEpsgCode" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_setEpsgCode" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setEpsgCode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_eccentricitySquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_eccentricitySquared",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_eccentricitySquared" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double)((ossimEllipsoid const *)arg1)->eccentricitySquared();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_flattening(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_flattening",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_flattening" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double)((ossimEllipsoid const *)arg1)->flattening();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_eccentricity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_eccentricity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_eccentricity" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (double)((ossimEllipsoid const *)arg1)->eccentricity();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_getEpsgCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEllipsoid_getEpsgCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_getEpsgCode" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimEllipsoid const *)arg1)->getEpsgCode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_nearestIntersection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefRay *arg2 = 0 ;
  ossimEcefPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_nearestIntersection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "2"" of type '" "ossimEcefRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "2"" of type '" "ossimEcefRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefRay * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimEcefPoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "3"" of type '" "ossimEcefPoint &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "3"" of type '" "ossimEcefPoint &""'"); 
  }
  arg3 = reinterpret_cast< ossimEcefPoint * >(argp3);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->nearestIntersection((ossimEcefRay const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_nearestIntersection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefRay *arg2 = 0 ;
  double *arg3 = 0 ;
  ossimEcefPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimEllipsoid_nearestIntersection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "2"" of type '" "ossimEcefRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "2"" of type '" "ossimEcefRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefRay * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimEcefPoint,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "4"" of type '" "ossimEcefPoint &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_nearestIntersection" "', argument " "4"" of type '" "ossimEcefPoint &""'"); 
  }
  arg4 = reinterpret_cast< ossimEcefPoint * >(argp4);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->nearestIntersection((ossimEcefRay const &)*arg2,(double const &)*arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_nearestIntersection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefRay, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEllipsoid_nearestIntersection__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefRay, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimEllipsoid_nearestIntersection__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEllipsoid_nearestIntersection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEllipsoid::nearestIntersection(ossimEcefRay const &,ossimEcefPoint &) const\n"
    "    ossimEllipsoid::nearestIntersection(ossimEcefRay const &,double const &,ossimEcefPoint &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_evaluate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_evaluate" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_evaluate" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_evaluate" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = (double)((ossimEllipsoid const *)arg1)->evaluate((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_gradient__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  ossimEcefVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_gradient",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_gradient" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_gradient" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_gradient" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimEcefVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_gradient" "', argument " "3"" of type '" "ossimEcefVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_gradient" "', argument " "3"" of type '" "ossimEcefVector &""'"); 
  }
  arg3 = reinterpret_cast< ossimEcefVector * >(argp3);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->gradient((ossimEcefPoint const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_gradient__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_gradient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_gradient" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_gradient" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_gradient" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  {
    try
    {
      result = ((ossimEllipsoid const *)arg1)->gradient((ossimEcefPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_gradient(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEllipsoid_gradient__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimEcefVector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEllipsoid_gradient__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEllipsoid_gradient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEllipsoid::gradient(ossimEcefPoint const &,ossimEcefVector &) const\n"
    "    ossimEllipsoid::gradient(ossimEcefPoint const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_prinRadiiOfCurv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimEllipsoid_prinRadiiOfCurv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_prinRadiiOfCurv" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->prinRadiiOfCurv((ossimEcefPoint const &)*arg2,*arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_jacobianWrtEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  NEWMAT::Matrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_jacobianWrtEcef",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_jacobianWrtEcef" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_jacobianWrtEcef" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_jacobianWrtEcef" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_jacobianWrtEcef" "', argument " "3"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_jacobianWrtEcef" "', argument " "3"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg3 = reinterpret_cast< NEWMAT::Matrix * >(argp3);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->jacobianWrtEcef((ossimEcefPoint const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_jacobianWrtGeo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEcefPoint *arg2 = 0 ;
  NEWMAT::Matrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_jacobianWrtGeo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_jacobianWrtGeo" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_jacobianWrtGeo" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_jacobianWrtGeo" "', argument " "2"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_jacobianWrtGeo" "', argument " "3"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_jacobianWrtGeo" "', argument " "3"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg3 = reinterpret_cast< NEWMAT::Matrix * >(argp3);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->jacobianWrtGeo((ossimEcefPoint const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_geodeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_geodeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_geodeticRadius" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_geodeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (double)((ossimEllipsoid const *)arg1)->geodeticRadius((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_geodeticRadii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double *arg2 = 0 ;
  ossimDpt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_geodeticRadii",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_geodeticRadii" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_geodeticRadii" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimDpt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_geodeticRadii" "', argument " "3"" of type '" "ossimDpt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_geodeticRadii" "', argument " "3"" of type '" "ossimDpt &""'"); 
  }
  arg3 = reinterpret_cast< ossimDpt * >(argp3);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->geodeticRadii((double const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_latLonHeightToXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ossimEllipsoid_latLonHeightToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_latLonHeightToXYZ" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->latLonHeightToXYZ(arg2,arg3,arg4,*arg5,*arg6,*arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_XYZToLatLonHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ossimEllipsoid_XYZToLatLonHeight",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_XYZToLatLonHeight" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->XYZToLatLonHeight(arg2,arg3,arg4,*arg5,*arg6,*arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_computeLocalToWorldTransformFromXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ossimMatrix4x4 *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimEllipsoid_computeLocalToWorldTransformFromXYZ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimMatrix4x4,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "5"" of type '" "ossimMatrix4x4 &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_computeLocalToWorldTransformFromXYZ" "', argument " "5"" of type '" "ossimMatrix4x4 &""'"); 
  }
  arg5 = reinterpret_cast< ossimMatrix4x4 * >(argp5);
  {
    try
    {
      ((ossimEllipsoid const *)arg1)->computeLocalToWorldTransformFromXYZ(arg2,arg3,arg4,*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEllipsoid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid___cmp__" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEllipsoid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid___cmp__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid___cmp__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEllipsoid * >(argp2);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->operator ==((ossimEllipsoid const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEllipsoid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid___ne__" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEllipsoid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid___ne__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid___ne__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEllipsoid * >(argp2);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->operator !=((ossimEllipsoid const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_loadState" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_loadState" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEllipsoid_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEllipsoid_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEllipsoid_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEllipsoid::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimEllipsoid::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEllipsoid_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_saveState" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEllipsoid_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid_saveState" "', argument " "1"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimEllipsoid const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEllipsoid_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEllipsoid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEllipsoid_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEllipsoid_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEllipsoid::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimEllipsoid::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEllipsoid___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEllipsoid *arg1 = (ossimEllipsoid *) 0 ;
  ossimEllipsoid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimEllipsoid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEllipsoid___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEllipsoid___set__" "', argument " "1"" of type '" "ossimEllipsoid *""'"); 
  }
  arg1 = reinterpret_cast< ossimEllipsoid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEllipsoid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEllipsoid___set__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEllipsoid___set__" "', argument " "2"" of type '" "ossimEllipsoid const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEllipsoid * >(argp2);
  {
    try
    {
      result = (ossimEllipsoid *) &(arg1)->operator =((ossimEllipsoid const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEllipsoid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEllipsoid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimEnvironmentUtility_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimEnvironmentUtility *)ossimEnvironmentUtility::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getEnvironmentVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_getEnvironmentVariable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getEnvironmentVariable" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_getEnvironmentVariable" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_getEnvironmentVariable" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getEnvironmentVariable((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getUserDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getUserDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getUserDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getUserDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getUserName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getUserName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getUserName" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getUserName();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getUserOssimSupportDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getUserOssimSupportDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getUserOssimSupportDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getUserOssimSupportDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getUserOssimPreferences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getUserOssimPreferences",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getUserOssimPreferences" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getUserOssimPreferences();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getUserOssimPluginDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getUserOssimPluginDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getUserOssimPluginDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getUserOssimPluginDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getInstalledOssimSupportDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getInstalledOssimSupportDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getInstalledOssimSupportDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getInstalledOssimSupportDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getInstalledOssimPluginDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getInstalledOssimPluginDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getInstalledOssimPluginDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getInstalledOssimPluginDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getInstalledOssimPreferences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getInstalledOssimPreferences",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getInstalledOssimPreferences" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getInstalledOssimPreferences();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getCurrentWorkingDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getCurrentWorkingDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getCurrentWorkingDir" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->getCurrentWorkingDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_searchAllPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_searchAllPaths",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_searchAllPaths" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_searchAllPaths" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_searchAllPaths" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->searchAllPaths((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_findPlugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_findPlugin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_findPlugin" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_findPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_findPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->findPlugin((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_findData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_findData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_findData" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_findData" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_findData" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = ((ossimEnvironmentUtility const *)arg1)->findData((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_addDataSearchPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_addDataSearchPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_addDataSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_addDataSearchPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_addDataSearchPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->addDataSearchPath((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_addDataSearchPathToFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_addDataSearchPathToFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_addDataSearchPathToFront" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_addDataSearchPathToFront" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_addDataSearchPathToFront" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->addDataSearchPathToFront((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_addPluginSearchPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_addPluginSearchPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_addPluginSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_addPluginSearchPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_addPluginSearchPath" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->addPluginSearchPath((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_addPluginSearchPathToFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEnvironmentUtility_addPluginSearchPathToFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_addPluginSearchPathToFront" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEnvironmentUtility_addPluginSearchPathToFront" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEnvironmentUtility_addPluginSearchPathToFront" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->addPluginSearchPathToFront((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getPluginSearchPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEnvironmentUtility::FilenameListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getPluginSearchPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getPluginSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = (ossimEnvironmentUtility::FilenameListType *) &(arg1)->getPluginSearchPath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getPluginSearchPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEnvironmentUtility::FilenameListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getPluginSearchPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getPluginSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = (ossimEnvironmentUtility::FilenameListType *) &((ossimEnvironmentUtility const *)arg1)->getPluginSearchPath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getPluginSearchPath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEnvironmentUtility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEnvironmentUtility_getPluginSearchPath__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEnvironmentUtility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEnvironmentUtility_getPluginSearchPath__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEnvironmentUtility_getPluginSearchPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEnvironmentUtility::getPluginSearchPath()\n"
    "    ossimEnvironmentUtility::getPluginSearchPath() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getDataSearchPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEnvironmentUtility::FilenameListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getDataSearchPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getDataSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = (ossimEnvironmentUtility::FilenameListType *) &(arg1)->getDataSearchPath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getDataSearchPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEnvironmentUtility::FilenameListType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEnvironmentUtility_getDataSearchPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEnvironmentUtility_getDataSearchPath" "', argument " "1"" of type '" "ossimEnvironmentUtility const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      result = (ossimEnvironmentUtility::FilenameListType *) &((ossimEnvironmentUtility const *)arg1)->getDataSearchPath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEnvironmentUtility_getDataSearchPath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEnvironmentUtility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEnvironmentUtility_getDataSearchPath__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEnvironmentUtility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimEnvironmentUtility_getDataSearchPath__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEnvironmentUtility_getDataSearchPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEnvironmentUtility::getDataSearchPath()\n"
    "    ossimEnvironmentUtility::getDataSearchPath() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimEnvironmentUtility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEnvironmentUtility *arg1 = (ossimEnvironmentUtility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEnvironmentUtility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEnvironmentUtility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEnvironmentUtility" "', argument " "1"" of type '" "ossimEnvironmentUtility *""'"); 
  }
  arg1 = reinterpret_cast< ossimEnvironmentUtility * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEnvironmentUtility_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEnvironmentUtility, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimEpsgDatumFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimEpsgDatumFactory *)ossimEpsgDatumFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEpsgDatumFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEpsgDatumFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEpsgDatumFactory" "', argument " "1"" of type '" "ossimEpsgDatumFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_create" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimEpsgDatumFactory const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEpsgDatumFactory_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_create" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEpsgDatumFactory_create" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimDatum *)((ossimEpsgDatumFactory const *)arg1)->create((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_create__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_create" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimDatum *)((ossimEpsgDatumFactory const *)arg1)->create((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_getList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_getList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_getList" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgDatumFactory_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgDatumFactory_getList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimEpsgDatumFactory const *)arg1)->getList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_create__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_create" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEpsgDatumFactory_create" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimDatum *)((ossimEpsgDatumFactory const *)arg1)->create(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgDatumFactory_create__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgDatumFactory_create__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEpsgDatumFactory_create__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgDatumFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEpsgDatumFactory_create__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEpsgDatumFactory_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEpsgDatumFactory::create(ossimString const &) const\n"
    "    ossimEpsgDatumFactory::create(ossimKeywordlist const &,char const *) const\n"
    "    ossimEpsgDatumFactory::create(ossimKeywordlist const &) const\n"
    "    ossimEpsgDatumFactory::create(ossim_uint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_findEpsgCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_findEpsgCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_findEpsgCode" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgDatumFactory_findEpsgCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgDatumFactory_findEpsgCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossim_uint32)((ossimEpsgDatumFactory const *)arg1)->findEpsgCode((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgDatumFactory_findAlphaCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgDatumFactory *arg1 = (ossimEpsgDatumFactory *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgDatumFactory_findAlphaCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgDatumFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgDatumFactory_findAlphaCode" "', argument " "1"" of type '" "ossimEpsgDatumFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgDatumFactory * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEpsgDatumFactory_findAlphaCode" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimEpsgDatumFactory const *)arg1)->findAlphaCode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEpsgDatumFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEpsgDatumFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimErrorCodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimErrorCodes *arg1 = (ossimErrorCodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimErrorCodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimErrorCodes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimErrorCodes" "', argument " "1"" of type '" "ossimErrorCodes *""'"); 
  }
  arg1 = reinterpret_cast< ossimErrorCodes * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimErrorCodes_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimErrorCodes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimErrorCodes_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimErrorCodes *)ossimErrorCodes::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimErrorCodes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimErrorCodes_getErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimErrorCodes *arg1 = (ossimErrorCodes *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimErrorCode result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimErrorCodes_getErrorCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimErrorCodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimErrorCodes_getErrorCode" "', argument " "1"" of type '" "ossimErrorCodes const *""'"); 
  }
  arg1 = reinterpret_cast< ossimErrorCodes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimErrorCodes_getErrorCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimErrorCodes_getErrorCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimErrorCode)((ossimErrorCodes const *)arg1)->getErrorCode((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimErrorCodes_getErrorString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimErrorCodes *arg1 = (ossimErrorCodes *) 0 ;
  ossimErrorCode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimErrorCodes_getErrorString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimErrorCodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimErrorCodes_getErrorString" "', argument " "1"" of type '" "ossimErrorCodes const *""'"); 
  }
  arg1 = reinterpret_cast< ossimErrorCodes * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimErrorCodes_getErrorString" "', argument " "2"" of type '" "ossimErrorCode""'");
  } 
  arg2 = static_cast< ossimErrorCode >(val2);
  {
    try
    {
      result = ((ossimErrorCodes const *)arg1)->getErrorString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_OK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_OK is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_OK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_OK));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_NO_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_NO_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_NO_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_NO_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_WARNING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_WARNING is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_WARNING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_WARNING));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ERROR_STD_PARALLEL_1));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_LAT_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_LAT_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_LAT_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_LAT_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_LON_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_LON_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_LON_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_LON_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_NORTHING_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_NORTHING_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_NORTHING_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_NORTHING_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ORIGIN_LAT_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_CENT_MER_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_CENT_MER_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_CENT_MER_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_CENT_MER_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_A_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_A_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_A_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_A_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_B_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_B_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_B_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_B_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_A_LESS_B_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_A_LESS_B_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_A_LESS_B_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_A_LESS_B_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_FIRST_STDP_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_FIRST_STDP_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_FIRST_STDP_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_FIRST_STDP_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_SEC_STDP_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_SEC_STDP_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_SEC_STDP_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_SEC_STDP_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_FIRST_SECOND_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_HEMISPHERE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_HEMISPHERE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_HEMISPHERE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_HEMISPHERE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_EASTING_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_EASTING_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_EASTING_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_EASTING_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_RADIUS_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_RADIUS_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_RADIUS_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_RADIUS_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ORIGIN_LON_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ORIENTATION_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ORIENTATION_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ORIENTATION_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ORIENTATION_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_SCALE_FACTOR_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ZONE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ZONE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ZONE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ZONE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ZONE_OVERRIDE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_INVALID_FILE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_INVALID_FILE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_INVALID_FILE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_INVALID_FILE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_OPEN_FILE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_OPEN_FILE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_OPEN_FILE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_OPEN_FILE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_WRITE_FILE_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_WRITE_FILE_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_WRITE_FILE_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_WRITE_FILE_ERROR));
  return pyobj;
}


SWIGINTERN int Swig_var_ossimErrorCodes_OSSIM_ERROR_UNKNOWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimErrorCodes_OSSIM_ERROR_UNKNOWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimErrorCodes_OSSIM_ERROR_UNKNOWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(ossimErrorCodes::OSSIM_ERROR_UNKNOWN));
  return pyobj;
}


SWIGINTERN PyObject *ossimErrorCodes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimErrorCodes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimException")) SWIG_fail;
  {
    try
    {
      result = (ossimException *)new ossimException();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  ossimException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (ossimException *)new ossimException((std::string const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimException__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimException__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimException::ossimException()\n"
    "    ossimException::ossimException(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimException *arg1 = (ossimException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimException" "', argument " "1"" of type '" "ossimException *""'"); 
  }
  arg1 = reinterpret_cast< ossimException * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimException *arg1 = (ossimException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimException_what",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimException_what" "', argument " "1"" of type '" "ossimException const *""'"); 
  }
  arg1 = reinterpret_cast< ossimException * >(argp1);
  {
    try
    {
      result = (char *)((ossimException const *)arg1)->what();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimFilename__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimFilename")) SWIG_fail;
  {
    try
    {
      result = (ossimFilename *)new ossimFilename();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFilename__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFilename" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFilename" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimFilename *)new ossimFilename((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFilename__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimFilename *)new ossimFilename((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFilename__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimFilename",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFilename" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ossimFilename *)new ossimFilename((char const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFilename(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimFilename__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimFilename__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimFilename__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimFilename__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimFilename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilename::ossimFilename()\n"
    "    ossimFilename::ossimFilename(ossimFilename const &)\n"
    "    ossimFilename::ossimFilename(ossimString const &)\n"
    "    ossimFilename::ossimFilename(char const *)\n");
  return 0;
}


SWIGINTERN int Swig_var_ossimFilename_NIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ossimFilename_NIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFilename_NIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ossimFilename::NIL), SWIGTYPE_p_ossimFilename,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFilename___cmp____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename___cmp__" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename___cmp__" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename___cmp__" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->operator ==((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename___cmp____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename___cmp__" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename___cmp__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename___cmp__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->operator ==((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename___cmp____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename___cmp__" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename___cmp__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->operator ==((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename___cmp__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilename___cmp____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilename___cmp____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilename___cmp____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimFilename_convertBackToForwardSlashes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_convertBackToForwardSlashes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_convertBackToForwardSlashes" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      (arg1)->convertBackToForwardSlashes();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_convertForwardToBackSlashes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_convertForwardToBackSlashes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_convertForwardToBackSlashes" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      (arg1)->convertForwardToBackSlashes();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_setTimes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimLocalTm *arg2 = (ossimLocalTm *) 0 ;
  ossimLocalTm *arg3 = (ossimLocalTm *) 0 ;
  ossimLocalTm *arg4 = (ossimLocalTm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimFilename_setTimes",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_setTimes" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_setTimes" "', argument " "2"" of type '" "ossimLocalTm *""'"); 
  }
  arg2 = reinterpret_cast< ossimLocalTm * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilename_setTimes" "', argument " "3"" of type '" "ossimLocalTm *""'"); 
  }
  arg3 = reinterpret_cast< ossimLocalTm * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilename_setTimes" "', argument " "4"" of type '" "ossimLocalTm *""'"); 
  }
  arg4 = reinterpret_cast< ossimLocalTm * >(argp4);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->setTimes(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_getTimes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimLocalTm *arg2 = (ossimLocalTm *) 0 ;
  ossimLocalTm *arg3 = (ossimLocalTm *) 0 ;
  ossimLocalTm *arg4 = (ossimLocalTm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimFilename_getTimes",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_getTimes" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_getTimes" "', argument " "2"" of type '" "ossimLocalTm *""'"); 
  }
  arg2 = reinterpret_cast< ossimLocalTm * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilename_getTimes" "', argument " "3"" of type '" "ossimLocalTm *""'"); 
  }
  arg3 = reinterpret_cast< ossimLocalTm * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ossimLocalTm, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilename_getTimes" "', argument " "4"" of type '" "ossimLocalTm *""'"); 
  }
  arg4 = reinterpret_cast< ossimLocalTm * >(argp4);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->getTimes(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_touch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_touch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_touch" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->touch();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_expand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_expand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_expand" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->expand();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_exists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_exists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_exists" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->exists();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isFile" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isFile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isDir" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isReadable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isReadable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isReadable" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isReadable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isWriteable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isWriteable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isWriteable" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isWriteable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isExecutable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isExecutable" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isExecutable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_fileSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_fileSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_fileSize" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossim_int64)((ossimFilename const *)arg1)->fileSize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_ext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_ext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_ext" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->ext();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_path",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_path" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->path();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_drive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_drive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_drive" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->drive();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_file" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->file();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_fileNoExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_fileNoExtension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_fileNoExtension" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->fileNoExtension();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_noExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_noExtension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_noExtension" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->noExtension();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_setExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_setExtension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_setExtension" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_setExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_setExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimFilename *) &(arg1)->setExtension((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_setDrive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_setDrive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_setDrive" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_setDrive" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_setDrive" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimFilename *) &(arg1)->setDrive((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_setPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_setPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_setPath" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_setPath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_setPath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimFilename *) &(arg1)->setPath((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_setFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_setFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_setFile" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_setFile" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_setFile" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimFilename *) &(arg1)->setFile((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_split(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  ossimString *arg4 = 0 ;
  ossimString *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimFilename_split",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_split" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_split" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_split" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilename_split" "', argument " "3"" of type '" "ossimString &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_split" "', argument " "3"" of type '" "ossimString &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilename_split" "', argument " "4"" of type '" "ossimString &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_split" "', argument " "4"" of type '" "ossimString &""'"); 
  }
  arg4 = reinterpret_cast< ossimString * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimFilename_split" "', argument " "5"" of type '" "ossimString &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_split" "', argument " "5"" of type '" "ossimString &""'"); 
  }
  arg5 = reinterpret_cast< ossimString * >(argp5);
  {
    try
    {
      ((ossimFilename const *)arg1)->split(*arg2,*arg3,*arg4,*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  ossimString *arg4 = 0 ;
  ossimString *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimFilename_merge",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_merge" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_merge" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_merge" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilename_merge" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_merge" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilename_merge" "', argument " "4"" of type '" "ossimString const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_merge" "', argument " "4"" of type '" "ossimString const &""'"); 
  }
  arg4 = reinterpret_cast< ossimString * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimFilename_merge" "', argument " "5"" of type '" "ossimString const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_merge" "', argument " "5"" of type '" "ossimString const &""'"); 
  }
  arg5 = reinterpret_cast< ossimString * >(argp5);
  {
    try
    {
      (arg1)->merge((ossimString const &)*arg2,(ossimString const &)*arg3,(ossimString const &)*arg4,(ossimString const &)*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_dirCat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_dirCat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_dirCat" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_dirCat" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_dirCat" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = ((ossimFilename const *)arg1)->dirCat((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_createDirectory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilename_createDirectory",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_createDirectory" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilename_createDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimFilename_createDirectory" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->createDirectory(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_createDirectory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_createDirectory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_createDirectory" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilename_createDirectory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->createDirectory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_createDirectory__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_createDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_createDirectory" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->createDirectory();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_createDirectory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFilename_createDirectory__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimFilename_createDirectory__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimFilename_createDirectory__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilename_createDirectory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilename::createDirectory(bool,int) const\n"
    "    ossimFilename::createDirectory(bool) const\n"
    "    ossimFilename::createDirectory() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilename_remove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_remove" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_remove" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)ossimFilename::remove((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_wildcardRemove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_wildcardRemove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_wildcardRemove" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_wildcardRemove" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)ossimFilename::wildcardRemove((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_rename__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimFilename *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilename_rename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_rename" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_rename" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_rename" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimFilename_rename" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->rename((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_rename__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_rename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_rename" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_rename" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_rename" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->rename((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_rename(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilename_rename__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimFilename_rename__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilename_rename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilename::rename(ossimFilename const &,bool) const\n"
    "    ossimFilename::rename(ossimFilename const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilename_remove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_remove" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->remove();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_remove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFilename_remove__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFilename_remove__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilename_remove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilename::remove(ossimFilename const &)\n"
    "    ossimFilename::remove() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilename_wildcardRemove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_wildcardRemove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_wildcardRemove" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->wildcardRemove();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_wildcardRemove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFilename_wildcardRemove__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFilename_wildcardRemove__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilename_wildcardRemove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilename::wildcardRemove(ossimFilename const &)\n"
    "    ossimFilename::wildcardRemove() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilename_copyFileTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilename_copyFileTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_copyFileTo" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilename_copyFileTo" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilename_copyFileTo" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->copyFileTo((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_isRelative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_isRelative",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_isRelative" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->isRelative();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_needsExpansion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_needsExpansion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_needsExpansion" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (bool)((ossimFilename const *)arg1)->needsExpansion();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilename_getPathSeparator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilename_getPathSeparator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilename_getPathSeparator" "', argument " "1"" of type '" "ossimFilename const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (char)((ossimFilename const *)arg1)->getPathSeparator();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = (ossimFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilename, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimFilename" "', argument " "1"" of type '" "ossimFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimFilename_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimFilename, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimFontInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFontInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFontInformation * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimFontInformation const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimFontInformation")) SWIG_fail;
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  bool arg4 ;
  ossimDpt *arg5 = 0 ;
  double arg6 ;
  ossimDpt *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ossimFontInformation",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimFontInformation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  arg5 = reinterpret_cast< ossimDpt * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimFontInformation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ossimFontInformation" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  arg7 = reinterpret_cast< ossimDpt * >(argp7);
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimIpt const &)*arg3,arg4,(ossimDpt const &)*arg5,arg6,(ossimDpt const &)*arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  bool arg4 ;
  ossimDpt *arg5 = 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimFontInformation",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimFontInformation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  arg5 = reinterpret_cast< ossimDpt * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimFontInformation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimIpt const &)*arg3,arg4,(ossimDpt const &)*arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  bool arg4 ;
  ossimDpt *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimFontInformation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimFontInformation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  arg5 = reinterpret_cast< ossimDpt * >(argp5);
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimIpt const &)*arg3,arg4,(ossimDpt const &)*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimFontInformation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimFontInformation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimIpt const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimFontInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFontInformation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimFontInformation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimFontInformation" "', argument " "1"" of type '" "ossimFontInformation const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  {
    try
    {
      result = (ossimFontInformation *)new ossimFontInformation((ossimFontInformation const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimFontInformation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimFontInformation__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFontInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimFontInformation__SWIG_5(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimFontInformation__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimDpt, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ossimFontInformation__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimDpt, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ossimFontInformation__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimDpt, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_ossimDpt, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_ossimFontInformation__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimFontInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFontInformation::ossimFontInformation()\n"
    "    ossimFontInformation::ossimFontInformation(ossimString const &,ossimString const &,ossimIpt const &,bool,ossimDpt const &,double,ossimDpt const &)\n"
    "    ossimFontInformation::ossimFontInformation(ossimString const &,ossimString const &,ossimIpt const &,bool,ossimDpt const &,double)\n"
    "    ossimFontInformation::ossimFontInformation(ossimString const &,ossimString const &,ossimIpt const &,bool,ossimDpt const &)\n"
    "    ossimFontInformation::ossimFontInformation(ossimString const &,ossimString const &,ossimIpt const &,bool)\n"
    "    ossimFontInformation::ossimFontInformation(ossimFontInformation const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_isFixed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_isFixed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_isFixed" "', argument " "1"" of type '" "ossimFontInformation const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  {
    try
    {
      result = (bool)((ossimFontInformation const *)arg1)->isFixed();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFontInformation_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_saveState" "', argument " "1"" of type '" "ossimFontInformation const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFontInformation_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimFontInformation const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_saveState" "', argument " "1"" of type '" "ossimFontInformation const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimFontInformation const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFontInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFontInformation_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFontInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFontInformation_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFontInformation_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFontInformation::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimFontInformation::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFontInformation_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_loadState" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFontInformation_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_loadState" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFontInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFontInformation_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFontInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFontInformation_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFontInformation_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFontInformation::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimFontInformation::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimFontInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation___cmp__" "', argument " "1"" of type '" "ossimFontInformation const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFontInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation___cmp__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation___cmp__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFontInformation * >(argp2);
  {
    try
    {
      result = (bool)((ossimFontInformation const *)arg1)->operator ==((ossimFontInformation const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimFontInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation___ne__" "', argument " "1"" of type '" "ossimFontInformation const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFontInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation___ne__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation___ne__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFontInformation * >(argp2);
  {
    try
    {
      result = (bool)((ossimFontInformation const *)arg1)->operator !=((ossimFontInformation const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimFontInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFontInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation___set__" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFontInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation___set__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFontInformation___set__" "', argument " "2"" of type '" "ossimFontInformation const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFontInformation * >(argp2);
  {
    try
    {
      result = (ossimFontInformation *) &(arg1)->operator =((ossimFontInformation const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_FAMILY_NAME_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::FAMILY_NAME_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::FAMILY_NAME_KW = cptr;
    } else {
      ossimFontInformation::FAMILY_NAME_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_FAMILY_NAME_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::FAMILY_NAME_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_FAMILY_NAME_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_FAMILY_NAME_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_FAMILY_NAME_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_FAMILY_NAME_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_STYLE_NAME_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::STYLE_NAME_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::STYLE_NAME_KW = cptr;
    } else {
      ossimFontInformation::STYLE_NAME_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_STYLE_NAME_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::STYLE_NAME_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_STYLE_NAME_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_STYLE_NAME_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_STYLE_NAME_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_STYLE_NAME_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_POINT_SIZE_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::POINT_SIZE_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::POINT_SIZE_KW = cptr;
    } else {
      ossimFontInformation::POINT_SIZE_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_POINT_SIZE_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::POINT_SIZE_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_POINT_SIZE_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_POINT_SIZE_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_POINT_SIZE_X_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::POINT_SIZE_X_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::POINT_SIZE_X_KW = cptr;
    } else {
      ossimFontInformation::POINT_SIZE_X_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_POINT_SIZE_X_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::POINT_SIZE_X_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_X_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_POINT_SIZE_X_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_X_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_POINT_SIZE_X_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::POINT_SIZE_Y_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::POINT_SIZE_Y_KW = cptr;
    } else {
      ossimFontInformation::POINT_SIZE_Y_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::POINT_SIZE_Y_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_Y_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_POINT_SIZE_Y_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_FIXED_FLAG_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::FIXED_FLAG_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::FIXED_FLAG_KW = cptr;
    } else {
      ossimFontInformation::FIXED_FLAG_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_FIXED_FLAG_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::FIXED_FLAG_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_FIXED_FLAG_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_FIXED_FLAG_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_FIXED_FLAG_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_FIXED_FLAG_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SHEAR_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SHEAR_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SHEAR_KW = cptr;
    } else {
      ossimFontInformation::SHEAR_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SHEAR_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SHEAR_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SHEAR_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SHEAR_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SHEAR_X_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SHEAR_X_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SHEAR_X_KW = cptr;
    } else {
      ossimFontInformation::SHEAR_X_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SHEAR_X_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SHEAR_X_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_X_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SHEAR_X_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_X_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SHEAR_X_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SHEAR_Y_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SHEAR_Y_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SHEAR_Y_KW = cptr;
    } else {
      ossimFontInformation::SHEAR_Y_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SHEAR_Y_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SHEAR_Y_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_Y_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SHEAR_Y_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SHEAR_Y_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SHEAR_Y_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SCALE_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SCALE_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SCALE_KW = cptr;
    } else {
      ossimFontInformation::SCALE_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SCALE_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SCALE_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SCALE_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SCALE_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SCALE_X_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SCALE_X_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SCALE_X_KW = cptr;
    } else {
      ossimFontInformation::SCALE_X_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SCALE_X_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SCALE_X_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_X_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SCALE_X_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_X_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SCALE_X_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_SCALE_Y_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::SCALE_Y_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::SCALE_Y_KW = cptr;
    } else {
      ossimFontInformation::SCALE_Y_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_SCALE_Y_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::SCALE_Y_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_Y_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_SCALE_Y_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_SCALE_Y_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_SCALE_Y_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimFontInformation_ROTATION_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimFontInformation::ROTATION_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimFontInformation::ROTATION_KW = cptr;
    } else {
      ossimFontInformation::ROTATION_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimFontInformation_ROTATION_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimFontInformation::ROTATION_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_ROTATION_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimFontInformation_ROTATION_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_ROTATION_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimFontInformation_ROTATION_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theFamilyName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimString *arg2 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theFamilyName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theFamilyName_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_theFamilyName_set" "', argument " "2"" of type '" "ossimString *""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  if (arg1) (arg1)->theFamilyName = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theFamilyName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theFamilyName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theFamilyName_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (ossimString *)& ((arg1)->theFamilyName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theStyleName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimString *arg2 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theStyleName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theStyleName_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_theStyleName_set" "', argument " "2"" of type '" "ossimString *""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  if (arg1) (arg1)->theStyleName = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theStyleName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theStyleName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theStyleName_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (ossimString *)& ((arg1)->theStyleName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_thePointSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimIpt *arg2 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_thePointSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_thePointSize_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_thePointSize_set" "', argument " "2"" of type '" "ossimIpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  if (arg1) (arg1)->thePointSize = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_thePointSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_thePointSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_thePointSize_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (ossimIpt *)& ((arg1)->thePointSize);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theFixedFlag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theFixedFlag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theFixedFlag_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFontInformation_theFixedFlag_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->theFixedFlag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theFixedFlag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theFixedFlag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theFixedFlag_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (bool) ((arg1)->theFixedFlag);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theScale_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_theScale_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->theScale = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theScale_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (ossimDpt *)& ((arg1)->theScale);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theRotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theRotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theRotation_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFontInformation_theRotation_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theRotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theRotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theRotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theRotation_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (double) ((arg1)->theRotation);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theShear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFontInformation_theShear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theShear_set" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFontInformation_theShear_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->theShear = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFontInformation_theShear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFontInformation_theShear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFontInformation_theShear_get" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  result = (ossimDpt *)& ((arg1)->theShear);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimFontInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFontInformation *arg1 = (ossimFontInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimFontInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFontInformation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimFontInformation" "', argument " "1"" of type '" "ossimFontInformation *""'"); 
  }
  arg1 = reinterpret_cast< ossimFontInformation * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimFontInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimFontInformation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Set_Geocentric_Parameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Set_Geocentric_Parameters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Set_Geocentric_Parameters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Set_Geocentric_Parameters" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = (long)Set_Geocentric_Parameters(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Get_Geocentric_Parameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Get_Geocentric_Parameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Get_Geocentric_Parameters" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Get_Geocentric_Parameters" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try
    {
      Get_Geocentric_Parameters(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Convert_Geodetic_To_Geocentric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Convert_Geodetic_To_Geocentric",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Convert_Geodetic_To_Geocentric" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try
    {
      result = (long)Convert_Geodetic_To_Geocentric(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Convert_Geocentric_To_Geodetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Convert_Geocentric_To_Geodetic",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Convert_Geocentric_To_Geodetic" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try
    {
      Convert_Geocentric_To_Geodetic(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimGeoidNgsHeader *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoidNgsHeader,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimGeoidNgsHeader const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimGeoidNgsHeader const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoidNgsHeader * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimGeoidNgsHeader const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoidNgsHeader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoidNgsHeader")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoidNgsHeader *)new ossimGeoidNgsHeader();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoidNgsHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoidNgsHeader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  ossimByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoidNgsHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimGeoidNgsHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoidNgsHeader" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoidNgsHeader" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoidNgsHeader" "', argument " "2"" of type '" "ossimByteOrder""'");
  } 
  arg2 = static_cast< ossimByteOrder >(val2);
  {
    try
    {
      result = (ossimGeoidNgsHeader *)new ossimGeoidNgsHeader((ossimFilename const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoidNgsHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoidNgsHeader__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoidNgsHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoidNgsHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoidNgsHeader" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoidNgsHeader" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimGeoidNgsHeader *)new ossimGeoidNgsHeader((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoidNgsHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoidNgsHeader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimGeoidNgsHeader__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoidNgsHeader__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFilename, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimGeoidNgsHeader__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimGeoidNgsHeader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoidNgsHeader::ossimGeoidNgsHeader()\n"
    "    ossimGeoidNgsHeader::ossimGeoidNgsHeader(ossimFilename const &,ossimByteOrder)\n"
    "    ossimGeoidNgsHeader::ossimGeoidNgsHeader(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_initialize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossimByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoidNgsHeader_initialize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "1"" of type '" "ossimGeoidNgsHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "3"" of type '" "ossimByteOrder""'");
  } 
  arg3 = static_cast< ossimByteOrder >(val3);
  {
    try
    {
      result = (bool)(arg1)->initialize((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_initialize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoidNgsHeader_initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "1"" of type '" "ossimGeoidNgsHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoidNgsHeader_initialize" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->initialize((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_initialize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoidNgsHeader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoidNgsHeader_initialize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoidNgsHeader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimGeoidNgsHeader_initialize__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoidNgsHeader_initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoidNgsHeader::initialize(ossimFilename const &,ossimByteOrder)\n"
    "    ossimGeoidNgsHeader::initialize(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_southernMostLat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_southernMostLat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_southernMostLat" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimGeoidNgsHeader const *)arg1)->southernMostLat();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_westernMostLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_westernMostLon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_westernMostLon" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimGeoidNgsHeader const *)arg1)->westernMostLon();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_latDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_latDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_latDelta" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimGeoidNgsHeader const *)arg1)->latDelta();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_lonDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_lonDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_lonDelta" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimGeoidNgsHeader const *)arg1)->lonDelta();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_rows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_rows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_rows" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimGeoidNgsHeader const *)arg1)->rows();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_cols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_cols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_cols" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimGeoidNgsHeader const *)arg1)->cols();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_dataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_dataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_dataType" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimGeoidNgsHeader const *)arg1)->dataType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_pointWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoidNgsHeader_pointWithin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_pointWithin" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoidNgsHeader_pointWithin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoidNgsHeader_pointWithin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (bool)((ossimGeoidNgsHeader const *)arg1)->pointWithin(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_filename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_filename" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (ossimFilename *) &((ossimGeoidNgsHeader const *)arg1)->filename();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_headerSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_headerSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_headerSize" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimGeoidNgsHeader const *)arg1)->headerSize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_dataTypeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoidNgsHeader_dataTypeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_dataTypeSize" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimGeoidNgsHeader const *)arg1)->dataTypeSize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoidNgsHeader_getHeightDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoidNgsHeader_getHeightDelta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoidNgsHeader_getHeightDelta" "', argument " "1"" of type '" "ossimGeoidNgsHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoidNgsHeader_getHeightDelta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoidNgsHeader_getHeightDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (double)((ossimGeoidNgsHeader const *)arg1)->getHeightDelta(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoidNgsHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoidNgsHeader *arg1 = (ossimGeoidNgsHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoidNgsHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoidNgsHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoidNgsHeader" "', argument " "1"" of type '" "ossimGeoidNgsHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoidNgsHeader * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoidNgsHeader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoidNgsHeader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimGeoPolygon const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoPolygon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoPolygon")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoPolygon *)new ossimGeoPolygon();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoPolygon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoPolygon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoPolygon" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoPolygon" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  {
    try
    {
      result = (ossimGeoPolygon *)new ossimGeoPolygon((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoPolygon__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoPolygon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGeoPolygon,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoPolygon" "', argument " "1"" of type '" "ossimGeoPolygon const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoPolygon" "', argument " "1"" of type '" "ossimGeoPolygon const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (ossimGeoPolygon *)new ossimGeoPolygon((ossimGeoPolygon const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoPolygon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimGeoPolygon__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoPolygon__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoPolygon__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimGeoPolygon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::ossimGeoPolygon()\n"
    "    ossimGeoPolygon::ossimGeoPolygon(std::vector< ossimGpt,std::allocator< ossimGpt > > const &)\n"
    "    ossimGeoPolygon::ossimGeoPolygon(ossimGeoPolygon const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_addPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addPoint" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_addPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_addPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      (arg1)->addPoint((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ossimDatum *arg5 = (ossimDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimGeoPolygon_addPoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addPoint" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_addPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoPolygon_addPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimGeoPolygon_addPoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimGeoPolygon_addPoint" "', argument " "5"" of type '" "ossimDatum const *""'"); 
  }
  arg5 = reinterpret_cast< ossimDatum * >(argp5);
  {
    try
    {
      (arg1)->addPoint(arg2,arg3,arg4,(ossimDatum const *)arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimGeoPolygon_addPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addPoint" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_addPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoPolygon_addPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimGeoPolygon_addPoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try
    {
      (arg1)->addPoint(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addPoint__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoPolygon_addPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addPoint" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_addPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoPolygon_addPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->addPoint(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoPolygon_addPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimGeoPolygon_addPoint__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimGeoPolygon_addPoint__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_ossimDatum, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ossimGeoPolygon_addPoint__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoPolygon_addPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::addPoint(ossimGpt const &)\n"
    "    ossimGeoPolygon::addPoint(double,double,double,ossimDatum const *)\n"
    "    ossimGeoPolygon::addPoint(double,double,double)\n"
    "    ossimGeoPolygon::addPoint(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_addAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addAttribute" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_addAttribute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_addAttribute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->addAttribute((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_addHole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_addHole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_addHole" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_addHole" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_addHole" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  {
    try
    {
      (arg1)->addHole((ossimGeoPolygon const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon___getitem__" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (ossimGpt *) &(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon___getitem__" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (ossimGpt *) &((ossimGeoPolygon const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimGeoPolygon___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimGeoPolygon___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoPolygon___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::operator [](int)\n"
    "    ossimGeoPolygon::operator [](int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_getVertexList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_getVertexList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_getVertexList" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (std::vector< ossimGpt,std::allocator< ossimGpt > > *) &((ossimGeoPolygon const *)arg1)->getVertexList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_getAttributeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_getAttributeList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_getAttributeList" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (std::vector< ossimString,std::allocator< ossimString > > *) &(arg1)->getAttributeList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_getHoleList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimGeoPolygon,std::allocator< ossimGeoPolygon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_getHoleList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_getHoleList" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (std::vector< ossimGeoPolygon,std::allocator< ossimGeoPolygon > > *) &(arg1)->getHoleList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_clear" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_size" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeoPolygon const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_resize" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_resize" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___set____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon___set__" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon___set__" "', argument " "2"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon___set__" "', argument " "2"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp2);
  {
    try
    {
      result = (ossimGeoPolygon *) &(arg1)->operator =((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___set____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon___set__" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon___set__" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon___set__" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  {
    try
    {
      result = (ossimGeoPolygon *) &(arg1)->operator =((ossimGeoPolygon const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon___set__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoPolygon___set____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGeoPolygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoPolygon___set____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoPolygon___set__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::operator =(std::vector< ossimGpt,std::allocator< ossimGpt > > const &)\n"
    "    ossimGeoPolygon::operator =(ossimGeoPolygon const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_stretchOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoPolygon_stretchOut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_stretchOut" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_stretchOut" "', argument " "2"" of type '" "ossimGeoPolygon &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_stretchOut" "', argument " "2"" of type '" "ossimGeoPolygon &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoPolygon_stretchOut" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->stretchOut(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_area" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (double)((ossimGeoPolygon const *)arg1)->area();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_computeCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_computeCentroid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_computeCentroid" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = ((ossimGeoPolygon const *)arg1)->computeCentroid();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  int arg2 ;
  ossimGpt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoPolygon_vertex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_vertex" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimGpt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeoPolygon_vertex" "', argument " "3"" of type '" "ossimGpt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_vertex" "', argument " "3"" of type '" "ossimGpt &""'"); 
  }
  arg3 = reinterpret_cast< ossimGpt * >(argp3);
  {
    try
    {
      result = (bool)((ossimGeoPolygon const *)arg1)->vertex(arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_nextVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_nextVertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_nextVertex" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_nextVertex" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_nextVertex" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimGeoPolygon const *)arg1)->nextVertex(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_hasNans" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (bool)((ossimGeoPolygon const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_reverseOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_reverseOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_reverseOrder" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      (arg1)->reverseOrder();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoPolygon_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_saveState" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeoPolygon_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimGeoPolygon const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_saveState" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimGeoPolygon const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoPolygon_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimGeoPolygon_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoPolygon_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimGeoPolygon::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoPolygon_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_loadState" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeoPolygon_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_loadState" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoPolygon_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoPolygon_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeoPolygon_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimGeoPolygon_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeoPolygon_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoPolygon::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimGeoPolygon::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_checkOrdering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_checkOrdering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_checkOrdering" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      ((ossimGeoPolygon const *)arg1)->checkOrdering();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_getOrdering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimVertexOrdering result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoPolygon_getOrdering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_getOrdering" "', argument " "1"" of type '" "ossimGeoPolygon const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      result = (ossimVertexOrdering)((ossimGeoPolygon const *)arg1)->getOrdering();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoPolygon_setOrdering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  ossimVertexOrdering arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoPolygon_setOrdering",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoPolygon_setOrdering" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoPolygon_setOrdering" "', argument " "2"" of type '" "ossimVertexOrdering""'");
  } 
  arg2 = static_cast< ossimVertexOrdering >(val2);
  {
    try
    {
      (arg1)->setOrdering(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoPolygon *arg1 = (ossimGeoPolygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoPolygon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoPolygon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoPolygon" "', argument " "1"" of type '" "ossimGeoPolygon *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoPolygon * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoPolygon_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoPolygon, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimGeoref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimGeoref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoref" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoref" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoref" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try
    {
      result = (ossimGeoref *)new ossimGeoref((ossimString const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoref" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoref" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimGeoref *)new ossimGeoref((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoref__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoref")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoref *)new ossimGeoref();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoref(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimGeoref__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoref__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimGeoref__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimGeoref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoref::ossimGeoref(ossimString const &,long)\n"
    "    ossimGeoref::ossimGeoref(ossimGpt const &)\n"
    "    ossimGeoref::ossimGeoref()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoref_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoref *arg1 = (ossimGeoref *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoref_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoref_toString" "', argument " "1"" of type '" "ossimGeoref *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoref * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoref_toString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try
    {
      result = (arg1)->toString(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoref *arg1 = (ossimGeoref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoref, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoref" "', argument " "1"" of type '" "ossimGeoref *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoref * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoref_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoref, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimGeoTiffCoordTransformsLut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffCoordTransformsLut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoTiffCoordTransformsLut")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoTiffCoordTransformsLut *)new ossimGeoTiffCoordTransformsLut();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoTiffCoordTransformsLut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoTiffCoordTransformsLut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffCoordTransformsLut *arg1 = (ossimGeoTiffCoordTransformsLut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoTiffCoordTransformsLut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoTiffCoordTransformsLut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoTiffCoordTransformsLut" "', argument " "1"" of type '" "ossimGeoTiffCoordTransformsLut *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoTiffCoordTransformsLut * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoTiffCoordTransformsLut_getKeyword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffCoordTransformsLut *arg1 = (ossimGeoTiffCoordTransformsLut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimKeyword result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoTiffCoordTransformsLut_getKeyword",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoTiffCoordTransformsLut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoTiffCoordTransformsLut_getKeyword" "', argument " "1"" of type '" "ossimGeoTiffCoordTransformsLut const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoTiffCoordTransformsLut * >(argp1);
  {
    try
    {
      result = ((ossimGeoTiffCoordTransformsLut const *)arg1)->getKeyword();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimKeyword(static_cast< const ossimKeyword& >(result))), SWIGTYPE_p_ossimKeyword, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoTiffCoordTransformsLut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoTiffCoordTransformsLut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimGeoTiffDatumLut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffDatumLut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoTiffDatumLut")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoTiffDatumLut *)new ossimGeoTiffDatumLut();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoTiffDatumLut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoTiffDatumLut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffDatumLut *arg1 = (ossimGeoTiffDatumLut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoTiffDatumLut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoTiffDatumLut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoTiffDatumLut" "', argument " "1"" of type '" "ossimGeoTiffDatumLut *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoTiffDatumLut * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoTiffDatumLut_getKeyword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoTiffDatumLut *arg1 = (ossimGeoTiffDatumLut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimKeyword result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoTiffDatumLut_getKeyword",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoTiffDatumLut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoTiffDatumLut_getKeyword" "', argument " "1"" of type '" "ossimGeoTiffDatumLut const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoTiffDatumLut * >(argp1);
  {
    try
    {
      result = ((ossimGeoTiffDatumLut const *)arg1)->getKeyword();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimKeyword(static_cast< const ossimKeyword& >(result))), SWIGTYPE_p_ossimKeyword, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoTiffDatumLut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoTiffDatumLut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimIpt")) SWIG_fail;
  {
    try
    {
      result = (ossimIpt *)new ossimIpt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int32 arg1 ;
  ossim_int32 arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimIpt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossim_int32""'");
  } 
  arg1 = static_cast< ossim_int32 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIpt" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossimIpt *)new ossimIpt(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (ossimIpt *)new ossimIpt((ossimIpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimIpt *)new ossimIpt((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimFpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFpt * >(argp1);
  {
    try
    {
      result = (ossimIpt *)new ossimIpt((ossimFpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt3d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIpt" "', argument " "1"" of type '" "ossimDpt3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt3d * >(argp1);
  {
    try
    {
      result = (ossimIpt *)new ossimIpt((ossimDpt3d const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIpt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimIpt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIpt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIpt__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimFpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIpt__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIpt__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimIpt__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimIpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIpt::ossimIpt()\n"
    "    ossimIpt::ossimIpt(ossim_int32,ossim_int32)\n"
    "    ossimIpt::ossimIpt(ossimIpt const &)\n"
    "    ossimIpt::ossimIpt(ossimDpt const &)\n"
    "    ossimIpt::ossimIpt(ossimFpt const &)\n"
    "    ossimIpt::ossimIpt(ossimDpt3d const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIpt___set____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___set__" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIpt *) &(arg1)->operator =((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___set____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___set__" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimIpt *) &(arg1)->operator =((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___set____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimFpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___set__" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___set__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFpt * >(argp2);
  {
    try
    {
      result = (ossimIpt *) &(arg1)->operator =((ossimFpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___set__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIpt___set____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIpt___set____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIpt___set____SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIpt___set__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIpt::operator =(ossimIpt const &)\n"
    "    ossimIpt::operator =(ossimDpt const &)\n"
    "    ossimIpt::operator =(ossimFpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIpt___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___cmp__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___cmp__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___cmp__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimIpt const *)arg1)->operator ==((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___ne__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___ne__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___ne__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimIpt const *)arg1)->operator !=((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIpt_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_makeNan" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIpt_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_hasNans" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimIpt const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIpt_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_isNan" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimIpt const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_ossimIpt_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt_ossimIpt_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_ossimIpt_print" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt_ossimIpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt_ossimIpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimIpt const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIpt_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_toString" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = ((ossimIpt const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_toPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt_toPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_toPoint" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt_toPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->toPoint((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "ossimIpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "ossimIpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (std::istream *) &operator >>(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIpt_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt_length" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      result = (double)((ossimIpt const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___add__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___add__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___add__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = ((ossimIpt const *)arg1)->operator +((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___sub__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___sub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___sub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = ((ossimIpt const *)arg1)->operator -((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___iadd__" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___iadd__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___iadd__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIpt *) &(arg1)->operator +=((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___isub__" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIpt___isub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIpt___isub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIpt *) &(arg1)->operator -=((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___mul__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIpt___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimIpt const *)arg1)->operator *((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIpt___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIpt___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIpt___div__" "', argument " "1"" of type '" "ossimIpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIpt___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimIpt const *)arg1)->operator /((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimIpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = (ossimIpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimIpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimIpt" "', argument " "1"" of type '" "ossimIpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimIpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimIpt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimIrect")) SWIG_fail;
  {
    try
    {
      result = (ossimIrect *)new ossimIrect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt arg1 ;
  ossimIpt arg2 ;
  ossimCoordSysOrientMode arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimIrect",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt""'");
    } else {
      ossimIpt * temp = reinterpret_cast< ossimIpt * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt""'");
    } else {
      ossimIpt * temp = reinterpret_cast< ossimIpt * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg3 = static_cast< ossimCoordSysOrientMode >(val3);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect(arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt arg1 ;
  ossimIpt arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimIrect",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt""'");
    } else {
      ossimIpt * temp = reinterpret_cast< ossimIpt * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt""'");
    } else {
      ossimIpt * temp = reinterpret_cast< ossimIpt * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (ossimIrect *)new ossimIrect(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int32 arg1 ;
  ossim_int32 arg2 ;
  ossim_int32 arg3 ;
  ossim_int32 arg4 ;
  ossimCoordSysOrientMode arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimIrect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossim_int32""'");
  } 
  arg1 = static_cast< ossim_int32 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossim_int32""'");
  } 
  arg3 = static_cast< ossim_int32 >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossim_int32""'");
  } 
  arg4 = static_cast< ossim_int32 >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimIrect" "', argument " "5"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg5 = static_cast< ossimCoordSysOrientMode >(val5);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect(arg1,arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int32 arg1 ;
  ossim_int32 arg2 ;
  ossim_int32 arg3 ;
  ossim_int32 arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimIrect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossim_int32""'");
  } 
  arg1 = static_cast< ossim_int32 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossim_int32""'");
  } 
  arg3 = static_cast< ossim_int32 >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossim_int32""'");
  } 
  arg4 = static_cast< ossim_int32 >(val4);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect(arg1,arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIrect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIrect const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimIrect const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDrect *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIrect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDrect * >(argp1);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimDrect const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimIpt,std::allocator< ossimIpt > > *arg1 = 0 ;
  ossimCoordSysOrientMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimIrect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "std::vector< ossimIpt,std::allocator< ossimIpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "std::vector< ossimIpt,std::allocator< ossimIpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimIpt,std::allocator< ossimIpt > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg2 = static_cast< ossimCoordSysOrientMode >(val2);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((std::vector< ossimIpt,std::allocator< ossimIpt > > const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimIpt,std::allocator< ossimIpt > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIrect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "std::vector< ossimIpt,std::allocator< ossimIpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "std::vector< ossimIpt,std::allocator< ossimIpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimIpt,std::allocator< ossimIpt > > * >(argp1);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((std::vector< ossimIpt,std::allocator< ossimIpt > > const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  ossimIpt *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  ossimIpt *arg4 = 0 ;
  ossimCoordSysOrientMode arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimIrect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossimIpt const &""'"); 
  }
  arg4 = reinterpret_cast< ossimIpt * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimIrect" "', argument " "5"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg5 = static_cast< ossimCoordSysOrientMode >(val5);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimIpt const &)*arg1,(ossimIpt const &)*arg2,(ossimIpt const &)*arg3,(ossimIpt const &)*arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  ossimIpt *arg2 = 0 ;
  ossimIpt *arg3 = 0 ;
  ossimIpt *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimIrect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossimIpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIpt * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossimIpt const &""'"); 
  }
  arg4 = reinterpret_cast< ossimIpt * >(argp4);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimIpt const &)*arg1,(ossimIpt const &)*arg2,(ossimIpt const &)*arg3,(ossimIpt const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  ossim_uint32 arg2 ;
  ossim_uint32 arg3 ;
  ossimCoordSysOrientMode arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimIrect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimIrect" "', argument " "4"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg4 = static_cast< ossimCoordSysOrientMode >(val4);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimIpt const &)*arg1,arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIpt *arg1 = 0 ;
  ossim_uint32 arg2 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimIrect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimIrect" "', argument " "1"" of type '" "ossimIpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimIpt * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimIrect" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimIrect" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimIrect *)new ossimIrect((ossimIpt const &)*arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIrect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimIrect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIrect__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIrect__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIrect__SWIG_8(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimIrect__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimIrect__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimIrect__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimIrect__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimIpt, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimIrect__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimIrect__SWIG_11(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimIrect__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimIpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimIpt, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimIrect__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimIrect__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimIrect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::ossimIrect()\n"
    "    ossimIrect::ossimIrect(ossimIpt,ossimIpt,ossimCoordSysOrientMode)\n"
    "    ossimIrect::ossimIrect(ossimIpt,ossimIpt)\n"
    "    ossimIrect::ossimIrect(ossim_int32,ossim_int32,ossim_int32,ossim_int32,ossimCoordSysOrientMode)\n"
    "    ossimIrect::ossimIrect(ossim_int32,ossim_int32,ossim_int32,ossim_int32)\n"
    "    ossimIrect::ossimIrect(ossimIrect const &)\n"
    "    ossimIrect::ossimIrect(ossimDrect const &)\n"
    "    ossimIrect::ossimIrect(std::vector< ossimIpt,std::allocator< ossimIpt > > const &,ossimCoordSysOrientMode)\n"
    "    ossimIrect::ossimIrect(std::vector< ossimIpt,std::allocator< ossimIpt > > const &)\n"
    "    ossimIrect::ossimIrect(ossimIpt const &,ossimIpt const &,ossimIpt const &,ossimIpt const &,ossimCoordSysOrientMode)\n"
    "    ossimIrect::ossimIrect(ossimIpt const &,ossimIpt const &,ossimIpt const &,ossimIpt const &)\n"
    "    ossimIrect::ossimIrect(ossimIpt const &,ossim_uint32,ossim_uint32,ossimCoordSysOrientMode)\n"
    "    ossimIrect::ossimIrect(ossimIpt const &,ossim_uint32,ossim_uint32)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimIrect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimIrect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimIrect" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___set____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___set__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___set__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___set__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator =((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___set____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___set__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___set__" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___set__" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator =((ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___set__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___set____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___set____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect___set__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::operator =(ossimIrect const &)\n"
    "    ossimIrect::operator =(ossimDrect const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIrect___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___ne__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___ne__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___ne__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->operator !=((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___cmp__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___cmp__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___cmp__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->operator ==((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  ossimIrect *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = operator *(arg1,(ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___imul__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect___imul__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator *=(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___mul__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect___mul__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator *(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___imul__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator *=(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___mul__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator *(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___imul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___imul__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___imul__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___imul__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator *=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___imul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIrect___imul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIrect___imul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::operator *=(ossim_int32)\n"
    "    ossimIrect::operator *=(double)\n"
    "    ossimIrect::operator *=(ossimDpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIrect___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___mul__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___mul__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___mul__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator *((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIrect___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIrect___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimIrect___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___iadd__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___iadd__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___iadd__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator +=((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___isub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___isub__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___isub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___isub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator -=((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___add__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___add__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___add__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator +((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___sub__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___sub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___sub__" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator -((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___iadd__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___iadd__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___iadd__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator +=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::operator +=(ossimIpt const &)\n"
    "    ossimIrect::operator +=(ossimDpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIrect___isub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___isub__" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___isub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___isub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->operator -=((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___isub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___isub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___isub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect___isub__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::operator -=(ossimIpt const &)\n"
    "    ossimIrect::operator -=(ossimDpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIrect___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___add__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___add__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___add__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator +((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimIrect___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect___sub__" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect___sub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect___sub__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->operator -((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimIrect_ul(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_ul",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_ul" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimIpt *) &((ossimIrect const *)arg1)->ul();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_ur(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_ur",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_ur" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimIpt *) &((ossimIrect const *)arg1)->ur();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_lr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_lr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_lr" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimIpt *) &((ossimIrect const *)arg1)->lr();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_ll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_ll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_ll" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimIpt *) &((ossimIrect const *)arg1)->ll();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_changeOrientationMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimCoordSysOrientMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_changeOrientationMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_changeOrientationMode" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_changeOrientationMode" "', argument " "2"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg2 = static_cast< ossimCoordSysOrientMode >(val2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->changeOrientationMode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_getBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 *arg2 = 0 ;
  ossim_int32 *arg3 = 0 ;
  ossim_int32 *arg4 = 0 ;
  ossim_int32 *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimIrect_getBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_getBounds" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_getBounds" "', argument " "2"" of type '" "ossim_int32 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_getBounds" "', argument " "2"" of type '" "ossim_int32 &""'"); 
  }
  arg2 = reinterpret_cast< ossim_int32 * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIrect_getBounds" "', argument " "3"" of type '" "ossim_int32 &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_getBounds" "', argument " "3"" of type '" "ossim_int32 &""'"); 
  }
  arg3 = reinterpret_cast< ossim_int32 * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimIrect_getBounds" "', argument " "4"" of type '" "ossim_int32 &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_getBounds" "', argument " "4"" of type '" "ossim_int32 &""'"); 
  }
  arg4 = reinterpret_cast< ossim_int32 * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimIrect_getBounds" "', argument " "5"" of type '" "ossim_int32 &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_getBounds" "', argument " "5"" of type '" "ossim_int32 &""'"); 
  }
  arg5 = reinterpret_cast< ossim_int32 * >(argp5);
  {
    try
    {
      ((ossimIrect const *)arg1)->getBounds(*arg2,*arg3,*arg4,*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_getCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_getCenter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_getCenter" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_getCenter" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_getCenter" "', argument " "2"" of type '" "ossimDpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      ((ossimIrect const *)arg1)->getCenter(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_makeNan" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_hasNans" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_isNan" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_orientMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimCoordSysOrientMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_orientMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_orientMode" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimCoordSysOrientMode)((ossimIrect const *)arg1)->orientMode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_setOrientMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimCoordSysOrientMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_setOrientMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_setOrientMode" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_setOrientMode" "', argument " "2"" of type '" "ossimCoordSysOrientMode""'");
  } 
  arg2 = static_cast< ossimCoordSysOrientMode >(val2);
  {
    try
    {
      (arg1)->setOrientMode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_stretchToTileBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_stretchToTileBoundary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_stretchToTileBoundary" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_stretchToTileBoundary" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_stretchToTileBoundary" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->stretchToTileBoundary((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_toString" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->toString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_toRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_toRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_toRect" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_toRect" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_toRect" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->toRect((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_expand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_expand" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_expand" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_expand" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (ossimIrect *) &(arg1)->expand((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIrect, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_insureMinimumSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_insureMinimumSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_insureMinimumSize" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_insureMinimumSize" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_insureMinimumSize" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->insureMinimumSize((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_area" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimIrect const *)arg1)->area();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_ul(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_ul",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_ul" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_set_ul" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_set_ul" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->set_ul((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_ur(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_ur",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_ur" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_set_ur" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_set_ur" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->set_ur((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_lr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_lr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_lr" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_set_lr" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_set_lr" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->set_lr((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_ll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_ll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_ll" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_set_ll" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_set_ll" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->set_ll((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_ulx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_ulx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_ulx" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_ulx" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_ulx(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_uly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_uly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_uly" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_uly" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_uly(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_urx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_urx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_urx" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_urx" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_urx(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_ury(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_ury",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_ury" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_ury" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_ury(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_lrx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_lrx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_lrx" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_lrx" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_lrx(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_lry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_lry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_lry" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_lry" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_lry(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_llx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_llx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_llx" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_llx" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_llx(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_set_lly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_set_lly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_set_lly" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIrect_set_lly" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      (arg1)->set_lly(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_pointWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_pointWithin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_pointWithin" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_pointWithin" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_pointWithin" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->pointWithin((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_intersects" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_intersects" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_intersects" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->intersects((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_completely_within(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_completely_within",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_completely_within" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_completely_within" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_completely_within" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->completely_within((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_orientationMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimCoordSysOrientMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_orientationMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_orientationMode" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossimCoordSysOrientMode)((ossimIrect const *)arg1)->orientationMode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_height(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_height",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_height" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimIrect const *)arg1)->height();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_width" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimIrect const *)arg1)->width();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_size" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_clipToRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_clipToRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_clipToRect" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_clipToRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_clipToRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->clipToRect((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_midPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIrect_midPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_midPoint" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->midPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_ossimIrect_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_ossimIrect_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_ossimIrect_print" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_ossimIrect_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_ossimIrect_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      ((ossimIrect const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_combine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_combine" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_combine" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_combine" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = ((ossimIrect const *)arg1)->combine((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIrect_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_saveState" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIrect_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_saveState" "', argument " "1"" of type '" "ossimIrect const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimIrect const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIrect_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimIrect::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIrect_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIrect_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_loadState" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIrect_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIrect *arg1 = (ossimIrect *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIrect_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIrect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIrect_loadState" "', argument " "1"" of type '" "ossimIrect *""'"); 
  }
  arg1 = reinterpret_cast< ossimIrect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIrect_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIrect_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIrect_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIrect_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIrect, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIrect_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIrect_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIrect::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimIrect::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimIrect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimIrect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimLine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLine,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLine * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimLine const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLine" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLine" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimLine *)new ossimLine((ossimDpt const &)*arg1,(ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLine" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLine" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimLine *)new ossimLine((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLine__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimLine")) SWIG_fail;
  {
    try
    {
      result = (ossimLine *)new ossimLine();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimLine__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLine__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLine__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimLine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLine::ossimLine(ossimDpt const &,ossimDpt const &)\n"
    "    ossimLine::ossimLine(ossimDpt const &)\n"
    "    ossimLine::ossimLine()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLine_getVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_getVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_getVector" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  {
    try
    {
      result = ((ossimLine const *)arg1)->getVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_intersectInfinite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimLine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_intersectInfinite",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_intersectInfinite" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLine,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_intersectInfinite" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_intersectInfinite" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLine * >(argp2);
  {
    try
    {
      result = ((ossimLine const *)arg1)->intersectInfinite((ossimLine const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_intersectSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimLine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_intersectSegment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_intersectSegment" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLine,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_intersectSegment" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_intersectSegment" "', argument " "2"" of type '" "ossimLine const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLine * >(argp2);
  {
    try
    {
      result = ((ossimLine const *)arg1)->intersectSegment((ossimLine const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_midPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_midPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_midPoint" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  {
    try
    {
      result = ((ossimLine const *)arg1)->midPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_length" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  {
    try
    {
      result = (double)((ossimLine const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_normal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_normal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_normal" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  {
    try
    {
      result = ((ossimLine const *)arg1)->normal();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointWithin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimLine_isPointWithin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_isPointWithin" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimLine_isPointWithin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (bool)((ossimLine const *)arg1)->isPointWithin((ossimDpt const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointWithin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_isPointWithin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_isPointWithin" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimLine const *)arg1)->isPointWithin((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointWithin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLine_isPointWithin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimLine_isPointWithin__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLine_isPointWithin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLine::isPointWithin(ossimDpt const &,double) const\n"
    "    ossimLine::isPointWithin(ossimDpt const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointOnInfiniteLine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimLine_isPointOnInfiniteLine",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (bool)((ossimLine const *)arg1)->isPointOnInfiniteLine((ossimDpt const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointOnInfiniteLine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_isPointOnInfiniteLine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "1"" of type '" "ossimLine const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLine_isPointOnInfiniteLine" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimLine const *)arg1)->isPointOnInfiniteLine((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_isPointOnInfiniteLine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLine_isPointOnInfiniteLine__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimLine_isPointOnInfiniteLine__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLine_isPointOnInfiniteLine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLine::isPointOnInfiniteLine(ossimDpt const &,double) const\n"
    "    ossimLine::isPointOnInfiniteLine(ossimDpt const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLine_theP1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_theP1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_theP1_set" "', argument " "1"" of type '" "ossimLine *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_theP1_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->theP1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_theP1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_theP1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_theP1_get" "', argument " "1"" of type '" "ossimLine *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  result = (ossimDpt *)& ((arg1)->theP1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_theP2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLine_theP2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_theP2_set" "', argument " "1"" of type '" "ossimLine *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLine_theP2_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->theP2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLine_theP2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLine_theP2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLine_theP2_get" "', argument " "1"" of type '" "ossimLine *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  result = (ossimDpt *)& ((arg1)->theP2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLine *arg1 = (ossimLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimLine" "', argument " "1"" of type '" "ossimLine *""'"); 
  }
  arg1 = reinterpret_cast< ossimLine * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimLine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimLine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimLsrPoint")) SWIG_fail;
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLsrPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((ossimLsrPoint const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimColumnVector3d *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimColumnVector3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((ossimColumnVector3d const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  ossimLsrSpace *arg4 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimLsrPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimLsrPoint" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimLsrPoint" "', argument " "4"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "4"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg4 = reinterpret_cast< ossimLsrSpace * >(argp4);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(ossimLsrSpace const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((ossimLsrPoint const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((ossimGpt const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrPoint" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrPoint *)new ossimLsrPoint((ossimEcefPoint const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimLsrPoint__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLsrPoint__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrPoint__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrPoint__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrPoint__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrPoint__SWIG_6(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimLsrSpace, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimLsrPoint__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimLsrPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::ossimLsrPoint()\n"
    "    ossimLsrPoint::ossimLsrPoint(ossimLsrPoint const &)\n"
    "    ossimLsrPoint::ossimLsrPoint(ossimColumnVector3d const &,ossimLsrSpace const &)\n"
    "    ossimLsrPoint::ossimLsrPoint(double const &,double const &,double const &,ossimLsrSpace const &)\n"
    "    ossimLsrPoint::ossimLsrPoint(ossimLsrPoint const &,ossimLsrSpace const &)\n"
    "    ossimLsrPoint::ossimLsrPoint(ossimGpt const &,ossimLsrSpace const &)\n"
    "    ossimLsrPoint::ossimLsrPoint(ossimEcefPoint const &,ossimLsrSpace const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint___set__" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint___set__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint___set__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = (ossimLsrPoint *) &(arg1)->operator =((ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint___sub__" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint___sub__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint___sub__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = ((ossimLsrPoint const *)arg1)->operator -((ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint___add__" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint___add__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint___add__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = ((ossimLsrPoint const *)arg1)->operator +((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrPoint(static_cast< const ossimLsrPoint& >(result))), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint___cmp__" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint___cmp__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint___cmp__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrPoint const *)arg1)->operator ==((ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint___ne__" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint___ne__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint___ne__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrPoint const *)arg1)->operator !=((ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_ossimLsrPoint_ossimEcefPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_ossimLsrPoint_ossimEcefPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_ossimLsrPoint_ossimEcefPoint" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = ((ossimLsrPoint const *)arg1)->operator ossimEcefPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefPoint(static_cast< const ossimEcefPoint& >(result))), SWIGTYPE_p_ossimEcefPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_x__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_x" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrPoint const *)arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_x__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_x" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_x(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_x__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_x__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_x'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::x() const\n"
    "    ossimLsrPoint::x()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_y__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_y" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrPoint const *)arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_y__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_y" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_y(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_y__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_y__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_y'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::y() const\n"
    "    ossimLsrPoint::y()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_z__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_z" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrPoint const *)arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_z__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_z" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_z(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_z__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_z__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_z'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::z() const\n"
    "    ossimLsrPoint::z()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_data" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &(arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_data" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &((ossimLsrPoint const *)arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_data__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_data__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::data()\n"
    "    ossimLsrPoint::data() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_lsrSpace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_lsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_lsrSpace" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *) &(arg1)->lsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_lsrSpace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_lsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_lsrSpace" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *) &((ossimLsrPoint const *)arg1)->lsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_lsrSpace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_lsrSpace__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_lsrSpace__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_lsrSpace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::lsrSpace()\n"
    "    ossimLsrPoint::lsrSpace() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_hasNans" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      result = (bool)((ossimLsrPoint const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_makeNan" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_ossimLsrPoint_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrPoint_ossimLsrPoint_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_ossimLsrPoint_print" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrPoint_ossimLsrPoint_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrPoint_ossimLsrPoint_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try
    {
      ((ossimLsrPoint const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_ossimLsrPoint_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrPoint_ossimLsrPoint_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrPoint_ossimLsrPoint_print" "', argument " "1"" of type '" "ossimLsrPoint const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      ((ossimLsrPoint const *)arg1)->print();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrPoint_ossimLsrPoint_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrPoint_ossimLsrPoint_print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrPoint_ossimLsrPoint_print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrPoint_ossimLsrPoint_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrPoint::print(ostream &) const\n"
    "    ossimLsrPoint::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *arg1 = 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  arg1 = reinterpret_cast< ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = (ostream *) &operator <<(*arg1,(ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimLsrPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = (ossimLsrPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimLsrPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimLsrPoint" "', argument " "1"" of type '" "ossimLsrPoint *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimLsrPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimLsrPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimLsrRay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimLsrRay")) SWIG_fail;
  {
    try
    {
      result = (ossimLsrRay *)new ossimLsrRay();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrRay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLsrRay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrRay const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = (ossimLsrRay *)new ossimLsrRay((ossimLsrRay const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrRay__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrRay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (ossimLsrRay *)new ossimLsrRay((ossimLsrPoint const &)*arg1,(ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrRay__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrPoint *arg1 = 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrRay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = (ossimLsrRay *)new ossimLsrRay((ossimLsrPoint const &)*arg1,(ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrRay__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrRay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrRay const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrRay" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrRay *)new ossimLsrRay((ossimLsrRay const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrRay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimLsrRay__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrRay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLsrRay__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrRay__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrRay__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrRay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrRay__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimLsrRay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrRay::ossimLsrRay()\n"
    "    ossimLsrRay::ossimLsrRay(ossimLsrRay const &)\n"
    "    ossimLsrRay::ossimLsrRay(ossimLsrPoint const &,ossimLsrVector const &)\n"
    "    ossimLsrRay::ossimLsrRay(ossimLsrPoint const &,ossimLsrPoint const &)\n"
    "    ossimLsrRay::ossimLsrRay(ossimLsrRay const &,ossimLsrSpace const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  ossimLsrRay *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrRay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrRay___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay___set__" "', argument " "1"" of type '" "ossimLsrRay *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrRay___set__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrRay___set__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrRay * >(argp2);
  {
    try
    {
      result = (ossimLsrRay *) &(arg1)->operator =((ossimLsrRay const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  ossimLsrRay *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrRay___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay___cmp__" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrRay___cmp__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrRay___cmp__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrRay * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrRay const *)arg1)->operator ==((ossimLsrRay const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  ossimLsrRay *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrRay___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay___ne__" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrRay___ne__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrRay___ne__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrRay * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrRay const *)arg1)->operator !=((ossimLsrRay const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_origin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_origin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_origin" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = (ossimLsrPoint *) &((ossimLsrRay const *)arg1)->origin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_direction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_direction" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = (ossimLsrVector *) &((ossimLsrRay const *)arg1)->direction();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_lsrSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_lsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_lsrSpace" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *) &((ossimLsrRay const *)arg1)->lsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_ossimLsrRay_ossimEcefRay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefRay result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_ossimLsrRay_ossimEcefRay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_ossimLsrRay_ossimEcefRay" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = ((ossimLsrRay const *)arg1)->operator ossimEcefRay();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefRay(static_cast< const ossimEcefRay& >(result))), SWIGTYPE_p_ossimEcefRay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_hasNans" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      result = (bool)((ossimLsrRay const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_makeNan" "', argument " "1"" of type '" "ossimLsrRay *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_extend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrRay_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_extend" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimLsrRay_extend" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimLsrRay const *)arg1)->extend((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrPoint(static_cast< const ossimLsrPoint& >(result))), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_ossimLsrRay_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrRay_ossimLsrRay_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_ossimLsrRay_print" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrRay_ossimLsrRay_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrRay_ossimLsrRay_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try
    {
      ((ossimLsrRay const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_ossimLsrRay_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrRay_ossimLsrRay_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrRay_ossimLsrRay_print" "', argument " "1"" of type '" "ossimLsrRay const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      ((ossimLsrRay const *)arg1)->print();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrRay_ossimLsrRay_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrRay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrRay_ossimLsrRay_print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrRay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrRay_ossimLsrRay_print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrRay_ossimLsrRay_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrRay::print(ostream &) const\n"
    "    ossimLsrRay::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *arg1 = 0 ;
  ossimLsrRay *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  arg1 = reinterpret_cast< ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrRay,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrRay const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrRay * >(argp2);
  {
    try
    {
      result = (ostream *) &operator <<(*arg1,(ossimLsrRay const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimLsrRay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrRay *arg1 = (ossimLsrRay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimLsrRay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrRay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimLsrRay" "', argument " "1"" of type '" "ossimLsrRay *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrRay * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimLsrRay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimLsrRay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimLsrSpace")) SWIG_fail;
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimLsrSpace const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossimEcefVector *arg2 = 0 ;
  ossimEcefVector *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimLsrSpace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimLsrSpace" "', argument " "3"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "3"" of type '" "ossimEcefVector const &""'"); 
  }
  arg3 = reinterpret_cast< ossimEcefVector * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimLsrSpace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimEcefPoint const &)*arg1,(ossimEcefVector const &)*arg2,(ossimEcefVector const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossimEcefVector *arg2 = 0 ;
  int arg3 ;
  ossimEcefVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimLsrSpace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "ossimEcefVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimEcefVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimLsrSpace" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimLsrSpace" "', argument " "4"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "4"" of type '" "ossimEcefVector const &""'"); 
  }
  arg4 = reinterpret_cast< ossimEcefVector * >(argp4);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimEcefPoint const &)*arg1,(ossimEcefVector const &)*arg2,arg3,(ossimEcefVector const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  int arg2 ;
  ossimEcefVector *arg3 = 0 ;
  ossimEcefVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimLsrSpace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimLsrSpace" "', argument " "3"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "3"" of type '" "ossimEcefVector const &""'"); 
  }
  arg3 = reinterpret_cast< ossimEcefVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimLsrSpace" "', argument " "4"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "4"" of type '" "ossimEcefVector const &""'"); 
  }
  arg4 = reinterpret_cast< ossimEcefVector * >(argp4);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimEcefPoint const &)*arg1,arg2,(ossimEcefVector const &)*arg3,(ossimEcefVector const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrSpace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimGpt const &)*arg1,(double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  NEWMAT::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrSpace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrSpace" "', argument " "2"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::Matrix * >(argp2);
  {
    try
    {
      result = (ossimLsrSpace *)new ossimLsrSpace((ossimEcefPoint const &)*arg1,(NEWMAT::Matrix const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrSpace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimLsrSpace__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLsrSpace__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLsrSpace__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimLsrSpace__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NEWMAT__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrSpace__SWIG_7(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimEcefVector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimLsrSpace__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimEcefVector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimLsrSpace__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimEcefVector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimEcefVector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimLsrSpace__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimLsrSpace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrSpace::ossimLsrSpace()\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimLsrSpace const &)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimEcefPoint const &,ossimEcefVector const &,ossimEcefVector const &,int const)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimEcefPoint const &,ossimEcefVector const &,int const,ossimEcefVector const &)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimEcefPoint const &,int const,ossimEcefVector const &,ossimEcefVector const &)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimGpt const &,double const &)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimGpt const &)\n"
    "    ossimLsrSpace::ossimLsrSpace(ossimEcefPoint const &,NEWMAT::Matrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimLsrSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimLsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimLsrSpace" "', argument " "1"" of type '" "ossimLsrSpace *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrSpace___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace___cmp__" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrSpace___cmp__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrSpace___cmp__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrSpace const *)arg1)->operator ==((ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrSpace___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace___ne__" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrSpace___ne__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrSpace___ne__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrSpace const *)arg1)->operator !=((ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrSpace___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace___set__" "', argument " "1"" of type '" "ossimLsrSpace *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrSpace___set__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrSpace___set__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrSpace *) &(arg1)->operator =((ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_origin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrSpace_origin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_origin" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      result = (ossimEcefPoint *) &((ossimLsrSpace const *)arg1)->origin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEcefPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_lsrToEcefRotMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::Matrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrSpace_lsrToEcefRotMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_lsrToEcefRotMatrix" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      result = (NEWMAT::Matrix *) &((ossimLsrSpace const *)arg1)->lsrToEcefRotMatrix();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NEWMAT__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_ecefToLsrRotMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::Matrix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrSpace_ecefToLsrRotMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_ecefToLsrRotMatrix" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      result = ((ossimLsrSpace const *)arg1)->ecefToLsrRotMatrix();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new NEWMAT::Matrix(static_cast< const NEWMAT::Matrix& >(result))), SWIGTYPE_p_NEWMAT__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_lsrSpaceErrorMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrSpace_lsrSpaceErrorMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_lsrSpaceErrorMessage" "', argument " "1"" of type '" "ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrSpace_lsrSpaceErrorMessage" "', argument " "1"" of type '" "ostream &""'"); 
  }
  arg1 = reinterpret_cast< ostream * >(argp1);
  {
    try
    {
      result = (ostream *) &ossimLsrSpace::lsrSpaceErrorMessage(*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_lsrSpaceErrorMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimLsrSpace_lsrSpaceErrorMessage")) SWIG_fail;
  {
    try
    {
      result = (ostream *) &ossimLsrSpace::lsrSpaceErrorMessage();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_lsrSpaceErrorMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ossimLsrSpace_lsrSpaceErrorMessage__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrSpace_lsrSpaceErrorMessage__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrSpace_lsrSpaceErrorMessage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrSpace::lsrSpaceErrorMessage(ostream &)\n"
    "    ossimLsrSpace::lsrSpaceErrorMessage()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_ossimLsrSpace_print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrSpace_ossimLsrSpace_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_ossimLsrSpace_print" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrSpace_ossimLsrSpace_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrSpace_ossimLsrSpace_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try
    {
      ((ossimLsrSpace const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_ossimLsrSpace_print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrSpace *arg1 = (ossimLsrSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrSpace_ossimLsrSpace_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrSpace_ossimLsrSpace_print" "', argument " "1"" of type '" "ossimLsrSpace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrSpace * >(argp1);
  {
    try
    {
      ((ossimLsrSpace const *)arg1)->print();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrSpace_ossimLsrSpace_print(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrSpace_ossimLsrSpace_print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrSpace_ossimLsrSpace_print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrSpace_ossimLsrSpace_print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrSpace::print(ostream &) const\n"
    "    ossimLsrSpace::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ostream *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "ostream &""'"); 
  }
  arg1 = reinterpret_cast< ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ostream *) &operator <<(*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimLsrSpace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimLsrSpace, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimLsrVector")) SWIG_fail;
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimLsrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimLsrVector const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector((ossimLsrVector const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimColumnVector3d *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg1 = reinterpret_cast< ossimColumnVector3d * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector((ossimColumnVector3d const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  ossimLsrSpace *arg4 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimLsrVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimLsrVector" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimLsrVector" "', argument " "4"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "4"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg4 = reinterpret_cast< ossimLsrSpace * >(argp4);
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(ossimLsrSpace const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefVector *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimEcefVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimEcefVector const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector((ossimEcefVector const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = 0 ;
  ossimLsrSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimLsrVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "1"" of type '" "ossimLsrVector const &""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrSpace,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimLsrVector" "', argument " "2"" of type '" "ossimLsrSpace const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrSpace * >(argp2);
  {
    try
    {
      result = (ossimLsrVector *)new ossimLsrVector((ossimLsrVector const &)*arg1,(ossimLsrSpace const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimLsrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimLsrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimLsrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrVector__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrVector__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimLsrVector__SWIG_5(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimLsrSpace, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimLsrVector__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimLsrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::ossimLsrVector()\n"
    "    ossimLsrVector::ossimLsrVector(ossimLsrVector const &)\n"
    "    ossimLsrVector::ossimLsrVector(ossimColumnVector3d const &,ossimLsrSpace const &)\n"
    "    ossimLsrVector::ossimLsrVector(double const &,double const &,double const &,ossimLsrSpace const &)\n"
    "    ossimLsrVector::ossimLsrVector(ossimEcefVector const &,ossimLsrSpace const &)\n"
    "    ossimLsrVector::ossimLsrVector(ossimLsrVector const &,ossimLsrSpace const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___set__" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___set__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___set__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (ossimLsrVector *) &(arg1)->operator =((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector___sub__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___sub__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator -();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___add__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___add__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___add__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator +((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___sub__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___sub__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___sub__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator -((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector___sub____SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrVector___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrPoint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___add__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___add__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___add__" "', argument " "2"" of type '" "ossimLsrPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrPoint * >(argp2);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator +((ossimLsrPoint const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrPoint(static_cast< const ossimLsrPoint& >(result))), SWIGTYPE_p_ossimLsrPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrVector___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimLsrVector___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___mul__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimLsrVector___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator *((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___div__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimLsrVector___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator /((double const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___cmp__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___cmp__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___cmp__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrVector const *)arg1)->operator ==((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector___ne__" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector___ne__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector___ne__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (bool)((ossimLsrVector const *)arg1)->operator !=((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_ossimLsrVector_ossimEcefVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimEcefVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_ossimLsrVector_ossimEcefVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_ossimLsrVector_ossimEcefVector" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->operator ossimEcefVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimEcefVector(static_cast< const ossimEcefVector& >(result))), SWIGTYPE_p_ossimEcefVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_dot" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector_dot" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector_dot" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->dot((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_angleTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector_angleTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_angleTo" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector_angleTo" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector_angleTo" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->angleTo((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_cross" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector_cross" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector_cross" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->cross((ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_unitVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_unitVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_unitVector" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = ((ossimLsrVector const *)arg1)->unitVector();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimLsrVector(static_cast< const ossimLsrVector& >(result))), SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_magnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_magnitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_magnitude" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->magnitude();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_normalize" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      (arg1)->normalize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_x__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_x" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_x__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_x" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->x();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_x(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_x__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_x__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrVector_x'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::x() const\n"
    "    ossimLsrVector::x()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_y__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_y" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_y__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_y" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->y();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_y(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_y__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_y__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrVector_y'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::y() const\n"
    "    ossimLsrVector::y()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_z__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_z" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double)((ossimLsrVector const *)arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_z__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_z" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (double *) &(arg1)->z();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_z(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_z__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_z__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrVector_z'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::z() const\n"
    "    ossimLsrVector::z()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_hasNans" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (bool)((ossimLsrVector const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_makeNan" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_data" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &(arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_data" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (ossimColumnVector3d *) &((ossimLsrVector const *)arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimColumnVector3d, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_data__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_data__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrVector_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::data()\n"
    "    ossimLsrVector::data() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_lsrSpace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_lsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_lsrSpace" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *) &(arg1)->lsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_lsrSpace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimLsrSpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimLsrVector_lsrSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_lsrSpace" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      result = (ossimLsrSpace *) &((ossimLsrVector const *)arg1)->lsrSpace();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimLsrSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_lsrSpace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_lsrSpace__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimLsrVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimLsrVector_lsrSpace__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimLsrVector_lsrSpace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimLsrVector::lsrSpace()\n"
    "    ossimLsrVector::lsrSpace() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimLsrVector_ossimLsrVector_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimLsrVector_ossimLsrVector_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimLsrVector_ossimLsrVector_print" "', argument " "1"" of type '" "ossimLsrVector const *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimLsrVector_ossimLsrVector_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimLsrVector_ossimLsrVector_print" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimLsrVector const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimLsrVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimLsrVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimLsrVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimLsrVector * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimLsrVector const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimLsrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimLsrVector *arg1 = (ossimLsrVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimLsrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimLsrVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimLsrVector" "', argument " "1"" of type '" "ossimLsrVector *""'"); 
  }
  arg1 = reinterpret_cast< ossimLsrVector * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimLsrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimLsrVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNadconGridDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  ossimEllipsoid *arg4 = (ossimEllipsoid *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  ossimNadconGridDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:new_ossimNadconGridDatum",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimNadconGridDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimNadconGridDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimNadconGridDatum" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimNadconGridDatum" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimNadconGridDatum" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimNadconGridDatum" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimNadconGridDatum" "', argument " "4"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg4 = reinterpret_cast< ossimEllipsoid * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimNadconGridDatum" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimNadconGridDatum" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ossimNadconGridDatum" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ossimNadconGridDatum" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ossimNadconGridDatum" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_ossimNadconGridDatum" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_ossimNadconGridDatum" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_ossimNadconGridDatum" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_ossimNadconGridDatum" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_ossimNadconGridDatum" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    try
    {
      result = (ossimNadconGridDatum *)new ossimNadconGridDatum((ossimFilename const &)*arg1,(ossimString const &)*arg2,(ossimString const &)*arg3,(ossimEllipsoid const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNadconGridDatum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNadconGridDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridDatum *arg1 = (ossimNadconGridDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNadconGridDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridDatum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNadconGridDatum" "', argument " "1"" of type '" "ossimNadconGridDatum *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridDatum * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNadconGridDatum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNadconGridDatum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNadconGridFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNadconGridFile")) SWIG_fail;
  {
    try
    {
      result = (ossimNadconGridFile *)new ossimNadconGridFile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNadconGridFile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNadconGridFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNadconGridFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNadconGridFile" "', argument " "1"" of type '" "ossimNadconGridFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNadconGridFile_open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_open" "', argument " "1"" of type '" "ossimNadconGridFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNadconGridFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNadconGridFile_open" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->open((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridFile_close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_close" "', argument " "1"" of type '" "ossimNadconGridFile *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      (arg1)->close();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_getShiftAtLatLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimNadconGridFile_getShiftAtLatLon",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_getShiftAtLatLon" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNadconGridFile_getShiftAtLatLon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimNadconGridFile_getShiftAtLatLon" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (double)((ossimNadconGridFile const *)arg1)->getShiftAtLatLon(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_pointWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimNadconGridFile_pointWithin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_pointWithin" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNadconGridFile_pointWithin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimNadconGridFile_pointWithin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (bool)((ossimNadconGridFile const *)arg1)->pointWithin(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_getBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridFile_getBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_getBoundingRect" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      result = ((ossimNadconGridFile const *)arg1)->getBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDrect(static_cast< const ossimDrect& >(result))), SWIGTYPE_p_ossimDrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_getFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridFile_getFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_getFilename" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      result = (ossimFilename *) &((ossimNadconGridFile const *)arg1)->getFilename();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_getFileOkFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridFile_getFileOkFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_getFileOkFlag" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      result = (bool)((ossimNadconGridFile const *)arg1)->getFileOkFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridFile_getSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridFile *arg1 = (ossimNadconGridFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridFile_getSpacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridFile_getSpacing" "', argument " "1"" of type '" "ossimNadconGridFile const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridFile * >(argp1);
  {
    try
    {
      result = ((ossimNadconGridFile const *)arg1)->getSpacing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNadconGridFile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNadconGridFile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimNadconGridHeader *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimNadconGridHeader,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimNadconGridHeader const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimNadconGridHeader const &""'"); 
  }
  arg2 = reinterpret_cast< ossimNadconGridHeader * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimNadconGridHeader const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimNadconGridHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNadconGridHeader")) SWIG_fail;
  {
    try
    {
      result = (ossimNadconGridHeader *)new ossimNadconGridHeader();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNadconGridHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_readHeader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNadconGridHeader_readHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_readHeader" "', argument " "1"" of type '" "ossimNadconGridHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNadconGridHeader_readHeader" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNadconGridHeader_readHeader" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->readHeader((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_readHeader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNadconGridHeader_readHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_readHeader" "', argument " "1"" of type '" "ossimNadconGridHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNadconGridHeader_readHeader" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNadconGridHeader_readHeader" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->readHeader(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_readHeader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNadconGridHeader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNadconGridHeader_readHeader__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNadconGridHeader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNadconGridHeader_readHeader__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimNadconGridHeader_readHeader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimNadconGridHeader::readHeader(ossimFilename const &)\n"
    "    ossimNadconGridHeader::readHeader(std::istream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getStartOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getStartOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getStartOffset" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimNadconGridHeader const *)arg1)->getStartOffset();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getBytesPerRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getBytesPerRow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getBytesPerRow" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimNadconGridHeader const *)arg1)->getBytesPerRow();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getNumberOfRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getNumberOfRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getNumberOfRows" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimNadconGridHeader const *)arg1)->getNumberOfRows();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getNumberOfCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getNumberOfCols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getNumberOfCols" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (int)((ossimNadconGridHeader const *)arg1)->getNumberOfCols();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getDeltaX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getDeltaX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getDeltaX" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimNadconGridHeader const *)arg1)->getDeltaX();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getDeltaY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getDeltaY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getDeltaY" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimNadconGridHeader const *)arg1)->getDeltaY();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getBoundingRect" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = ((ossimNadconGridHeader const *)arg1)->getBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDrect(static_cast< const ossimDrect& >(result))), SWIGTYPE_p_ossimDrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getMinX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getMinX" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimNadconGridHeader const *)arg1)->getMinX();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getMinY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getMinY" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = (double)((ossimNadconGridHeader const *)arg1)->getMinY();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconGridHeader_getSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNadconGridHeader_getSpacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconGridHeader_getSpacing" "', argument " "1"" of type '" "ossimNadconGridHeader const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      result = ((ossimNadconGridHeader const *)arg1)->getSpacing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNadconGridHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconGridHeader *arg1 = (ossimNadconGridHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNadconGridHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconGridHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNadconGridHeader" "', argument " "1"" of type '" "ossimNadconGridHeader *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconGridHeader * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNadconGridHeader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNadconGridHeader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNadconNarDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimNadconNarDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimNadconNarDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimNadconNarDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimNadconNarDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimNadconNarDatum *)new ossimNadconNarDatum((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNadconNarDatum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconNarDatum_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconNarDatum *arg1 = (ossimNadconNarDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNadconNarDatum_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconNarDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconNarDatum_shift" "', argument " "1"" of type '" "ossimNadconNarDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconNarDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNadconNarDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNadconNarDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimNadconNarDatum const *)arg1)->shift((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNadconNarDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconNarDatum *arg1 = (ossimNadconNarDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNadconNarDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconNarDatum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNadconNarDatum" "', argument " "1"" of type '" "ossimNadconNarDatum *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconNarDatum * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNadconNarDatum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNadconNarDatum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNadconNasDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilename *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimNadconNasDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimNadconNasDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimNadconNasDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimNadconNasDatum" "', argument " "1"" of type '" "ossimFilename const &""'"); 
  }
  arg1 = reinterpret_cast< ossimFilename * >(argp1);
  {
    try
    {
      result = (ossimNadconNasDatum *)new ossimNadconNasDatum((ossimFilename const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNadconNasDatum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNadconNasDatum_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconNasDatum *arg1 = (ossimNadconNasDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNadconNasDatum_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconNasDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNadconNasDatum_shift" "', argument " "1"" of type '" "ossimNadconNasDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconNasDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNadconNasDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNadconNasDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimNadconNasDatum const *)arg1)->shift((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNadconNasDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNadconNasDatum *arg1 = (ossimNadconNasDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNadconNasDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNadconNasDatum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNadconNasDatum" "', argument " "1"" of type '" "ossimNadconNasDatum *""'"); 
  }
  arg1 = reinterpret_cast< ossimNadconNasDatum * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNadconNasDatum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNadconNasDatum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimStreamBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimStreamBase")) SWIG_fail;
  {
    try
    {
      result = (ossimStreamBase *)new ossimStreamBase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimStreamBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimStreamBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamBase *arg1 = (ossimStreamBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimStreamBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimStreamBase" "', argument " "1"" of type '" "ossimStreamBase *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamBase * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStreamBase_isCompressed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamBase *arg1 = (ossimStreamBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStreamBase_isCompressed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStreamBase_isCompressed" "', argument " "1"" of type '" "ossimStreamBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamBase * >(argp1);
  {
    try
    {
      result = (bool)((ossimStreamBase const *)arg1)->isCompressed();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimStreamBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimStreamBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimStreamFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimStreamFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimStreamFactory *)ossimStreamFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimStreamFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimStreamFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactory *arg1 = (ossimStreamFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimStreamFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimStreamFactory" "', argument " "1"" of type '" "ossimStreamFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStreamFactory_createNewIFStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactory *arg1 = (ossimStreamFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  std::ios_base::openmode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimRefPtr< ossimIFStream > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimStreamFactory_createNewIFStream",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStreamFactory_createNewIFStream" "', argument " "1"" of type '" "ossimStreamFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStreamFactory_createNewIFStream" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStreamFactory_createNewIFStream" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ios_base__openmode,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimStreamFactory_createNewIFStream" "', argument " "3"" of type '" "std::ios_base::openmode""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStreamFactory_createNewIFStream" "', argument " "3"" of type '" "std::ios_base::openmode""'");
    } else {
      std::ios_base::openmode * temp = reinterpret_cast< std::ios_base::openmode * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimStreamFactory const *)arg1)->createNewIFStream((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimIFStream >(static_cast< const ossimRefPtr< ossimIFStream >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimIFStream_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimStreamFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimStreamFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimStreamFactoryRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactoryRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimStreamFactoryRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimStreamFactoryRegistry *)ossimStreamFactoryRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimStreamFactoryRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimStreamFactoryRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactoryRegistry *arg1 = (ossimStreamFactoryRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimStreamFactoryRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamFactoryRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimStreamFactoryRegistry" "', argument " "1"" of type '" "ossimStreamFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamFactoryRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStreamFactoryRegistry_registerFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactoryRegistry *arg1 = (ossimStreamFactoryRegistry *) 0 ;
  ossimStreamFactoryBase *arg2 = (ossimStreamFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimStreamFactoryRegistry_registerFactory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStreamFactoryRegistry_registerFactory" "', argument " "1"" of type '" "ossimStreamFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimStreamFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStreamFactoryRegistry_registerFactory" "', argument " "2"" of type '" "ossimStreamFactoryBase *""'"); 
  }
  arg2 = reinterpret_cast< ossimStreamFactoryBase * >(argp2);
  {
    try
    {
      (arg1)->registerFactory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStreamFactoryRegistry_createNewIFStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStreamFactoryRegistry *arg1 = (ossimStreamFactoryRegistry *) 0 ;
  ossimFilename *arg2 = 0 ;
  std::ios_base::openmode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimRefPtr< ossimIFStream > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimStreamFactoryRegistry_createNewIFStream",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStreamFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStreamFactoryRegistry_createNewIFStream" "', argument " "1"" of type '" "ossimStreamFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStreamFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStreamFactoryRegistry_createNewIFStream" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStreamFactoryRegistry_createNewIFStream" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ios_base__openmode,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimStreamFactoryRegistry_createNewIFStream" "', argument " "3"" of type '" "std::ios_base::openmode""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStreamFactoryRegistry_createNewIFStream" "', argument " "3"" of type '" "std::ios_base::openmode""'");
    } else {
      std::ios_base::openmode * temp = reinterpret_cast< std::ios_base::openmode * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimStreamFactoryRegistry const *)arg1)->createNewIFStream((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimIFStream >(static_cast< const ossimRefPtr< ossimIFStream >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimIFStream_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimStreamFactoryRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimStreamFactoryRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimString")) SWIG_fail;
  {
    try
    {
      result = (ossimString *)new ossimString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (ossimString *)new ossimString((std::string const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimString",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ossimString *)new ossimString((char const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimString" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimString" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimString *)new ossimString((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string::size_type arg1 ;
  char arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimString",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimString" "', argument " "1"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimString" "', argument " "1"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimString" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = (ossimString *)new ossimString(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimString" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  {
    try
    {
      result = (ossimString *)new ossimString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimString__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ossimString__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimString__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimString__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__string__size_type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimString__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::ossimString()\n"
    "    ossimString::ossimString(std::string const &)\n"
    "    ossimString::ossimString(char const *)\n"
    "    ossimString::ossimString(ossimString const &)\n"
    "    ossimString::ossimString(std::string::size_type,char)\n"
    "    ossimString::ossimString(char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_contains" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_contains" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_contains" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->contains((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_contains" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_contains" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->contains((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::contains(ossimString const &) const\n"
    "    ossimString::contains(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_chars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_chars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_chars" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (char *)((ossimString const *)arg1)->chars();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (std::istream *) &operator >>(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getline" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getline" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getline" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  {
    try
    {
      result = (std::istream *) &getline(*arg1,*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getline",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getline" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getline" "', argument " "2"" of type '" "ossimString &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (std::istream *) &getline(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getline__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_getline__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getline(std::istream &,ossimString &,char)\n"
    "    getline(std::istream &,ossimString &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString___set____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___set__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___set__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___set__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (ossimString *) &(arg1)->operator =((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___set____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___set__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___set__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator =((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___set____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___set__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString___set__" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator =(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___set____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___set__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___set__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___set__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator =((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___set__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___set____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString___set____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___set____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___set____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString___set__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::operator =(std::string const &)\n"
    "    ossimString::operator =(char const *)\n"
    "    ossimString::operator =(char)\n"
    "    ossimString::operator =(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___iadd__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator +=((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___iadd__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (ossimString *) &(arg1)->operator +=((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___iadd____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___iadd__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator +=((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___iadd____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___iadd__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString___iadd__" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = (ossimString *) &(arg1)->operator +=(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString___iadd____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___iadd____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___iadd____SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::operator +=(ossimString const &)\n"
    "    ossimString::operator +=(std::string const &)\n"
    "    ossimString::operator +=(char const *)\n"
    "    ossimString::operator +=(char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_append" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_append" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_append" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimString *) &(arg1)->append((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_append" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_append" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_append" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (ossimString *) &(arg1)->append((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_append__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_append" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_append" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (ossimString *) &(arg1)->append((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_at__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_at" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_at" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_at" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (char *) &((ossimString const *)arg1)->at(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_at__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_at" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_at" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_at" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (char *) &(arg1)->at(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_at(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_at__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_at__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_at'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::at(std::string::size_type) const\n"
    "    ossimString::at(std::string::size_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_append__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_append",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_append" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_append" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_append" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimString_append" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  {
    try
    {
      result = (ossimString *) &(arg1)->append(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_append__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_append__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimString_append__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::append(ossimString const &)\n"
    "    ossimString::append(std::string const &)\n"
    "    ossimString::append(char const *)\n"
    "    ossimString::append(std::string::size_type,char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___add__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->operator +((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___add__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___add__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___add__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->operator +((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___add____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___add__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___add__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->operator +((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___add____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___add__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString___add__" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->operator +(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString___add____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___add____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___add____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ossimString *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = operator +((char const *)arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  ossimString *arg2 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__add__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "__add__" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = operator +(arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___add____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char arg1 ;
  ossimString *arg2 = 0 ;
  char val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__add__",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__add__" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = operator +(arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '__add__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +(char const *,ossimString const &)\n"
    "    operator +(std::string const,ossimString const &)\n"
    "    operator +(char,ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ossimString *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)operator ==((char const *)arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)operator ==((std::string const &)*arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '__eq__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator ==(char const *,ossimString const &)\n"
    "    operator ==(std::string const &,ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___eq__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___eq__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->operator ==((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___eq__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___eq__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->operator ==((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimString___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___ne__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___ne__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___ne__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->operator !=((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___ne__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___ne__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->operator !=((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ossimString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___getitem__" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___getitem__" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___getitem__" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (char *) &(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString___getitem__" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString___getitem__" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString___getitem__" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (char *) &((ossimString const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::operator [](std::string::size_type)\n"
    "    ossimString::operator [](std::string::size_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_insert" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_insert" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_insert" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_insert" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (std::string *) &(arg1)->insert(arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_push_back" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_push_back" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      (arg1)->push_back(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_substr",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_substr" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_substr" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substr" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_substr" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substr" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->substr(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_substr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_substr" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_substr" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substr" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->substr(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_substr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_substr" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->substr();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_substr__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_substr__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_substr__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_substr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::substr(std::string::size_type,std::string::size_type) const\n"
    "    ossimString::substr(std::string::size_type) const\n"
    "    ossimString::substr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_trim__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_trim",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_trim" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_trim" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_trim" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->trim((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_trim__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_trim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_trim" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->trim();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_trim__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_trim",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_trim" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_trim" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_trim" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimString *) &(arg1)->trim((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_trim__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_trim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_trim" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimString *) &(arg1)->trim();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_trim(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_trim__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_trim__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_trim__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_trim__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_trim'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::trim(ossimString const &) const\n"
    "    ossimString::trim() const\n"
    "    ossimString::trim(ossimString const &)\n"
    "    ossimString::trim()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_beforePos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_beforePos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_beforePos" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_beforePos" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_beforePos" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->beforePos(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_afterPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_afterPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_afterPos" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_afterPos" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_afterPos" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->afterPos(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substitute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_substitute",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_substitute" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_substitute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substitute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_substitute" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substitute" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimString_substitute" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = ((ossimString const *)arg1)->substitute((ossimString const &)*arg2,(ossimString const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substitute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_substitute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_substitute" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_substitute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substitute" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_substitute" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_substitute" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = ((ossimString const *)arg1)->substitute((ossimString const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_substitute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_substitute__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimString_substitute__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_substitute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::substitute(ossimString const &,ossimString const &,bool) const\n"
    "    ossimString::substitute(ossimString const &,ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_gsub__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_gsub",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_gsub" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_gsub" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_gsub" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_gsub" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_gsub" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimString_gsub" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (ossimString *) &(arg1)->gsub((ossimString const &)*arg2,(ossimString const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_gsub__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_gsub",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_gsub" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_gsub" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_gsub" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_gsub" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_gsub" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (ossimString *) &(arg1)->gsub((ossimString const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_gsub(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_gsub__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimString_gsub__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_gsub'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::gsub(ossimString const &,ossimString const &,bool)\n"
    "    ossimString::gsub(ossimString const &,ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_explode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< ossimString,std::allocator< ossimString > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_explode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_explode" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_explode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_explode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->explode((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<ossimString,std::allocator< ossimString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_expandEnvironmentVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_expandEnvironmentVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_expandEnvironmentVariable" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->expandEnvironmentVariable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_upcase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_upcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_upcase" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_upcase" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ossimString::upcase((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_downcase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_downcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_downcase" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_downcase" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ossimString::downcase((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_upcase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_upcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_upcase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimString *) &(arg1)->upcase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_upcase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_upcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_upcase" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->upcase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_upcase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_upcase__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_upcase__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_upcase__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_upcase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::upcase(ossimString const &)\n"
    "    ossimString::upcase()\n"
    "    ossimString::upcase() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_downcase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_downcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_downcase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimString *) &(arg1)->downcase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_downcase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_downcase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_downcase" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->downcase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_downcase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_downcase__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_downcase__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_downcase__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_downcase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::downcase(ossimString const &)\n"
    "    ossimString::downcase()\n"
    "    ossimString::downcase() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_c_str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_c_str" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (char *)((ossimString const *)arg1)->c_str();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_data" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (char *)((ossimString const *)arg1)->data();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_size" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_length" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->length();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_empty" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->empty();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_string" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (std::string *) &((ossimString const *)arg1)->string();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_string" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (std::string *) &(arg1)->string();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_string(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_string__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_string__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::string() const\n"
    "    ossimString::string()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_begin" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::iterator(static_cast< const std::string::iterator& >(result))), SWIGTYPE_p_std__string__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_end" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::iterator(static_cast< const std::string::iterator& >(result))), SWIGTYPE_p_std__string__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_begin" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->begin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::const_iterator(static_cast< const std::string::const_iterator& >(result))), SWIGTYPE_p_std__string__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::begin()\n"
    "    ossimString::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_end" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->end();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::const_iterator(static_cast< const std::string::const_iterator& >(result))), SWIGTYPE_p_std__string__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::end()\n"
    "    ossimString::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_clear" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_erase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::iterator""'");
    } else {
      std::string::iterator * temp = reinterpret_cast< std::string::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::iterator(static_cast< const std::string::iterator& >(result))), SWIGTYPE_p_std__string__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::iterator arg2 ;
  std::string::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_erase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::iterator""'");
    } else {
      std::string::iterator * temp = reinterpret_cast< std::string::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_erase" "', argument " "3"" of type '" "std::string::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "3"" of type '" "std::string::iterator""'");
    } else {
      std::string::iterator * temp = reinterpret_cast< std::string::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::iterator(static_cast< const std::string::iterator& >(result))), SWIGTYPE_p_std__string__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_erase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_erase" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = (std::string *) &(arg1)->erase(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_erase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_erase" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (std::string *) &(arg1)->erase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_erase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_erase" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (std::string *) &(arg1)->erase();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_erase__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_erase__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__iterator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::erase(std::string::iterator)\n"
    "    ossimString::erase(std::string::iterator,std::string::iterator)\n"
    "    ossimString::erase(std::string::size_type,std::string::size_type)\n"
    "    ossimString::erase(std::string::size_type)\n"
    "    ossimString::erase()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find((std::string const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  std::string::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_find",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimString_find" "', argument " "4"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "4"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find((char const *)arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find((char const *)arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_find__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_find__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_find__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__string__size_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimString_find__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::find(std::string const &,std::string::size_type) const\n"
    "    ossimString::find(std::string const &) const\n"
    "    ossimString::find(char const *,std::string::size_type,std::string::size_type) const\n"
    "    ossimString::find(char const *,std::string::size_type) const\n"
    "    ossimString::find(char const *) const\n"
    "    ossimString::find(char,std::string::size_type) const\n"
    "    ossimString::find(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_rfind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind((std::string const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_rfind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  std::string::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_rfind",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimString_rfind" "', argument " "4"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "4"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind((char const *)arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_rfind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind((char const *)arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_rfind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_rfind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_rfind" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_rfind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_rfind" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->rfind(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_rfind(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_rfind__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_rfind__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_rfind__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_rfind__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_rfind__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_rfind__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__string__size_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimString_rfind__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_rfind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::rfind(std::string const &,std::string::size_type) const\n"
    "    ossimString::rfind(std::string const &) const\n"
    "    ossimString::rfind(char const *,std::string::size_type,std::string::size_type) const\n"
    "    ossimString::rfind(char const *,std::string::size_type) const\n"
    "    ossimString::rfind(char const *) const\n"
    "    ossimString::rfind(char,std::string::size_type) const\n"
    "    ossimString::rfind(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find_first_of",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find_first_of" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find_first_of" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_of(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find_first_of",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_of(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_not_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find_first_not_of",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_not_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find_first_not_of" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find_first_not_of" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_not_of(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_not_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find_first_not_of",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_not_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_not_of(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find_first_of",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find_first_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find_first_of" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find_first_of" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_of((char const *)arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find_first_of",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find_first_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_of((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_of(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_find_first_of__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_find_first_of__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find_first_of__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find_first_of__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_find_first_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::find_first_of(char,std::string::size_type) const\n"
    "    ossimString::find_first_of(char) const\n"
    "    ossimString::find_first_of(char const *,std::string::size_type) const\n"
    "    ossimString::find_first_of(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_not_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find_first_not_of",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_not_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find_first_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find_first_not_of" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find_first_not_of" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_not_of((char const *)arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_not_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find_first_not_of",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_first_not_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_find_first_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find_first_not_of((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_first_not_of(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_find_first_not_of__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_find_first_not_of__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find_first_not_of__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find_first_not_of__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_find_first_not_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::find_first_not_of(char,std::string::size_type) const\n"
    "    ossimString::find_first_not_of(char) const\n"
    "    ossimString::find_first_not_of(char const *,std::string::size_type) const\n"
    "    ossimString::find_first_not_of(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_find_last_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_find_last_of",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_last_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_find_last_of" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_find_last_of" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->find_last_of(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_last_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_find_last_of",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_find_last_of" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ((ossimString const *)arg1)->find_last_of(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string::size_type(static_cast< const std::string::size_type& >(result))), SWIGTYPE_p_std__string__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_find_last_of(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_find_last_of__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_find_last_of__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_find_last_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::find_last_of(char,std::string::size_type) const\n"
    "    ossimString::find_last_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_assign" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_assign" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_assign" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimString_assign" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  {
    try
    {
      result = (std::string *) &(arg1)->assign(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  std::string::size_type arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_replace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replace" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      result = (std::string *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::iterator arg2 ;
  std::string::iterator arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_replace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replace" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::iterator""'");
    } else {
      std::string::iterator * temp = reinterpret_cast< std::string::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::iterator""'");
    } else {
      std::string::iterator * temp = reinterpret_cast< std::string::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      result = (std::string *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  std::string::size_type arg3 ;
  std::string *arg4 = 0 ;
  std::string::size_type arg5 ;
  std::string::size_type arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ossimString_replace",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replace" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimString_replace" "', argument " "5"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "5"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimString_replace" "', argument " "6"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_replace" "', argument " "6"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    try
    {
      result = (std::string *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimString_replace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__iterator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimString_replace__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__string__size_type, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__string__size_type, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ossimString_replace__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::replace(std::string::size_type,std::string::size_type,std::string const &)\n"
    "    ossimString::replace(std::string::iterator,std::string::iterator,std::string const &)\n"
    "    ossimString::replace(std::string::size_type,std::string::size_type,std::string const &,std::string::size_type,std::string::size_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::string::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_reserve" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_reserve" "', argument " "2"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_reserve" "', argument " "2"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_before__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_before",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_before" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_before" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_before" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_before" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_before" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->before((ossimString const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_before__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_before",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_before" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_before" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_before" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->before((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_before(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_before__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_before__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_before'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::before(ossimString const &,std::string::size_type) const\n"
    "    ossimString::before(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_after__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  std::string::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_after",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_after" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_after" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_after" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_after" "', argument " "3"" of type '" "std::string::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_after" "', argument " "3"" of type '" "std::string::size_type""'");
    } else {
      std::string::size_type * temp = reinterpret_cast< std::string::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimString const *)arg1)->after((ossimString const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_after__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_after",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_after" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_after" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_after" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->after((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_after(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_after__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_after__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_after'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::after(ossimString const &,std::string::size_type) const\n"
    "    ossimString::after(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_stringDup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_stringDup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_stringDup" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (char *)((ossimString const *)arg1)->stringDup();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toBool__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toBool",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toBool" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (bool)((ossimString const *)arg1)->toBool();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toBool__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toBool",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toBool" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toBool" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (bool)ossimString::toBool((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toBool(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toBool__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toBool__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toBool'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toBool() const\n"
    "    ossimString::toBool(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt8__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint8 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt8" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint8)((ossimString const *)arg1)->toUInt8();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt8__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint8 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt8" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toUInt8" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint8)ossimString::toUInt8((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt8(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt8__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt8__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toUInt8'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toUInt8() const\n"
    "    ossimString::toUInt8(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (int)((ossimString const *)arg1)->toInt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toInt" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (int)ossimString::toInt((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toInt() const\n"
    "    ossimString::toInt(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt16__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int16 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt16" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int16)((ossimString const *)arg1)->toInt16();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt16__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int16 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt16" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toInt16" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int16)ossimString::toInt16((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt16(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt16__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt16__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toInt16'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toInt16() const\n"
    "    ossimString::toInt16(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt16__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint16 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt16" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint16)((ossimString const *)arg1)->toUInt16();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt16__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint16 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt16" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toUInt16" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint16)ossimString::toUInt16((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt16(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt16__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt16__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toUInt16'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toUInt16() const\n"
    "    ossimString::toUInt16(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt32" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimString const *)arg1)->toInt32();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toInt32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int32)ossimString::toInt32((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt32__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt32__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toInt32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toInt32() const\n"
    "    ossimString::toInt32(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt32" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimString const *)arg1)->toUInt32();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toUInt32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint32)ossimString::toUInt32((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt32__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt32__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toUInt32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toUInt32() const\n"
    "    ossimString::toUInt32(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt64" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int64)((ossimString const *)arg1)->toInt64();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toInt64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toInt64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_int64)ossimString::toInt64((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toInt64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt64__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toInt64__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toInt64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toInt64() const\n"
    "    ossimString::toInt64(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt64" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimString const *)arg1)->toUInt64();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toUInt64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toUInt64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_uint64)ossimString::toUInt64((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toUInt64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt64__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toUInt64__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toUInt64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toUInt64() const\n"
    "    ossimString::toUInt64(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toLong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toLong" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (long)((ossimString const *)arg1)->toLong();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toLong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toLong" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toLong" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (long)ossimString::toLong((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toLong(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toLong__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toLong__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toLong() const\n"
    "    ossimString::toLong(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toULong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toULong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toULong" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (unsigned long)((ossimString const *)arg1)->toULong();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toULong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toULong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toULong" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toULong" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (unsigned long)ossimString::toULong((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toULong(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toULong__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toULong__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toULong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toULong() const\n"
    "    ossimString::toULong(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toFloat32" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_float32)((ossimString const *)arg1)->toFloat32();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toFloat32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toFloat32" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_float32)ossimString::toFloat32((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toFloat32__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toFloat32__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toFloat32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toFloat32() const\n"
    "    ossimString::toFloat32(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toFloat64" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimString const *)arg1)->toFloat64();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toFloat64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toFloat64" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossim_float64)ossimString::toFloat64((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toFloat64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toFloat64__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toFloat64__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toFloat64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toFloat64() const\n"
    "    ossimString::toFloat64(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toDouble" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (double)((ossimString const *)arg1)->toDouble();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_toDouble" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_toDouble" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (double)ossimString::toDouble((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toDouble__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimString_toDouble__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toDouble() const\n"
    "    ossimString::toDouble(ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int16 arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_int16""'");
  } 
  arg1 = static_cast< ossim_int16 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_uint16 arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_uint16""'");
  } 
  arg1 = static_cast< ossim_uint16 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int32 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_int32""'");
  } 
  arg1 = static_cast< ossim_int32 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_uint32 arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_uint32""'");
  } 
  arg1 = static_cast< ossim_uint32 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_int64 arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_int64""'");
  } 
  arg1 = static_cast< ossim_int64 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_uint64 arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_uint64""'");
  } 
  arg1 = static_cast< ossim_uint64 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float32 arg1 ;
  ossim_int32 arg2 ;
  bool arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_toString",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float32""'");
  } 
  arg1 = static_cast< ossim_float32 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_toString" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimString_toString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = ossimString::toString(arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float32 arg1 ;
  ossim_int32 arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float32""'");
  } 
  arg1 = static_cast< ossim_float32 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_toString" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = ossimString::toString(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float32 arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float32""'");
  } 
  arg1 = static_cast< ossim_float32 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float64 arg1 ;
  ossim_int32 arg2 ;
  bool arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_toString",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float64""'");
  } 
  arg1 = static_cast< ossim_float64 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_toString" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimString_toString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = ossimString::toString(arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float64 arg1 ;
  ossim_int32 arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float64""'");
  } 
  arg1 = static_cast< ossim_float64 >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_toString" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = ossimString::toString(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossim_float64 arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ossimString_toString" "', argument " "1"" of type '" "ossim_float64""'");
  } 
  arg1 = static_cast< ossim_float64 >(val1);
  {
    try
    {
      result = ossimString::toString(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_12(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ossimString_toString__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_toString__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimString_toString__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimString_toString__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimString_toString__SWIG_10(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::toString(bool)\n"
    "    ossimString::toString(ossim_int16)\n"
    "    ossimString::toString(ossim_uint16)\n"
    "    ossimString::toString(ossim_int32)\n"
    "    ossimString::toString(ossim_uint32)\n"
    "    ossimString::toString(ossim_int64)\n"
    "    ossimString::toString(ossim_uint64)\n"
    "    ossimString::toString(ossim_float32,ossim_int32,bool)\n"
    "    ossimString::toString(ossim_float32,ossim_int32)\n"
    "    ossimString::toString(ossim_float32)\n"
    "    ossimString::toString(ossim_float64,ossim_int32,bool)\n"
    "    ossimString::toString(ossim_float64,ossim_int32)\n"
    "    ossimString::toString(ossim_float64)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_stripLeading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_stripLeading",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_stripLeading" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_stripLeading" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimString_stripLeading" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try
    {
      result = ossimString::stripLeading((ossimString const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_split__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::vector< ossimString,std::allocator< ossimString::ossimString > > *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimString_split",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_split" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_split" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString::ossimString > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_split" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimString_split" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      ((ossimString const *)arg1)->split(*arg2,(ossimString const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_split__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::vector< ossimString,std::allocator< ossimString::ossimString > > *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_split" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_split" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString::ossimString > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_split" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      ((ossimString const *)arg1)->split(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_split__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< ossimString,std::allocator< ossimString > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_split" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_split" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimString_split" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = ((ossimString const *)arg1)->split((ossimString const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<ossimString,std::allocator< ossimString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_split__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< ossimString,std::allocator< ossimString > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_split",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_split" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_split" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_split" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimString const *)arg1)->split((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<ossimString,std::allocator< ossimString > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_split(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_split__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimString_split__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_split__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimString_split__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_split'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::split(std::vector< ossimString,std::allocator< ossimString::ossimString > > &,ossimString const &,bool) const\n"
    "    ossimString::split(std::vector< ossimString,std::allocator< ossimString::ossimString > > &,ossimString const &) const\n"
    "    ossimString::split(ossimString const &,bool) const\n"
    "    ossimString::split(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_join(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  std::vector< ossimString,std::allocator< ossimString::ossimString > > *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_join",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_join" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    std::vector<ossimString,std::allocator< ossimString > > *ptr = (std::vector<ossimString,std::allocator< ossimString > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_join" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_join" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString::ossimString > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_join" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimString_join" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (ossimString *) &(arg1)->join((std::vector< ossimString,std::allocator< ossimString::ossimString > > const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_beforeRegExp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_beforeRegExp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_beforeRegExp" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_beforeRegExp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->beforeRegExp((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_fromRegExp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_fromRegExp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_fromRegExp" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_fromRegExp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->fromRegExp((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_afterRegExp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_afterRegExp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_afterRegExp" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_afterRegExp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->afterRegExp((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_match" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_match" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->match((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceAllThatMatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_replaceAllThatMatch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replaceAllThatMatch" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replaceAllThatMatch" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_replaceAllThatMatch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = ((ossimString const *)arg1)->replaceAllThatMatch((char const *)arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceAllThatMatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_replaceAllThatMatch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replaceAllThatMatch" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replaceAllThatMatch" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->replaceAllThatMatch((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceAllThatMatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_replaceAllThatMatch__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_replaceAllThatMatch__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_replaceAllThatMatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::replaceAllThatMatch(char const *,char const *) const\n"
    "    ossimString::replaceAllThatMatch(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceStrThatMatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimString_replaceStrThatMatch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replaceStrThatMatch" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replaceStrThatMatch" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimString_replaceStrThatMatch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = ((ossimString const *)arg1)->replaceStrThatMatch((char const *)arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceStrThatMatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimString_replaceStrThatMatch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_replaceStrThatMatch" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimString_replaceStrThatMatch" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = ((ossimString const *)arg1)->replaceStrThatMatch((char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_replaceStrThatMatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimString_replaceStrThatMatch__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimString_replaceStrThatMatch__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimString_replaceStrThatMatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimString::replaceStrThatMatch(char const *,char const *) const\n"
    "    ossimString::replaceStrThatMatch(char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimString_urlEncode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_urlEncode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_urlEncode" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->urlEncode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimString_getOssimId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimString_getOssimId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimString_getOssimId" "', argument " "1"" of type '" "ossimString const *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = ((ossimString const *)arg1)->getOssimId();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = (ossimString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimString, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimString" "', argument " "1"" of type '" "ossimString *""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimString, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimStringLtstr___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStringLtstr *arg1 = (ossimStringLtstr *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimStringLtstr___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStringLtstr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStringLtstr___call__" "', argument " "1"" of type '" "ossimStringLtstr const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStringLtstr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStringLtstr___call__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStringLtstr___call__" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimStringLtstr___call__" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStringLtstr___call__" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (bool)((ossimStringLtstr const *)arg1)->operator ()((ossimString const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimStringLtstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStringLtstr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimStringLtstr")) SWIG_fail;
  {
    try
    {
      result = (ossimStringLtstr *)new ossimStringLtstr();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimStringLtstr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimStringLtstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStringLtstr *arg1 = (ossimStringLtstr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimStringLtstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStringLtstr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimStringLtstr" "', argument " "1"" of type '" "ossimStringLtstr *""'"); 
  }
  arg1 = reinterpret_cast< ossimStringLtstr * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimStringLtstr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimStringLtstr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTDpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimTDpt")) SWIG_fail;
  {
    try
    {
      result = (ossimTDpt *)new ossimTDpt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTDpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimTDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimTDpt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTDpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTDpt" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTDpt" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTDpt" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimTDpt" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (ossimTDpt *)new ossimTDpt((ossimDpt const &)*arg1,(ossimDpt const &)*arg2,(ossim_float64 const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTDpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimTDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimTDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTDpt" "', argument " "1"" of type '" "ossimTDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTDpt" "', argument " "1"" of type '" "ossimTDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (ossimTDpt *)new ossimTDpt((ossimTDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTDpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTDpt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimTDpt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimTDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimTDpt__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimTDpt__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimTDpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTDpt::ossimTDpt()\n"
    "    ossimTDpt::ossimTDpt(ossimDpt const &,ossimDpt const &,ossim_float64 const &)\n"
    "    ossimTDpt::ossimTDpt(ossimTDpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTDpt___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  ossimTDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimTDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt___set__" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt___set__" "', argument " "2"" of type '" "ossimTDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTDpt___set__" "', argument " "2"" of type '" "ossimTDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimTDpt * >(argp2);
  {
    try
    {
      result = (ossimTDpt *) &(arg1)->operator =((ossimTDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_setMasterPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_setMasterPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_setMasterPoint" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt_setMasterPoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTDpt_setMasterPoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setMasterPoint((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_getMasterPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_getMasterPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_getMasterPoint" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimTDpt const *)arg1)->getMasterPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_refMasterPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_refMasterPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_refMasterPoint" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->refMasterPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_setSlavePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_setSlavePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_setSlavePoint" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt_setSlavePoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTDpt_setSlavePoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setSlavePoint((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_getSlavePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_getSlavePoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_getSlavePoint" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimTDpt const *)arg1)->getSlavePoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_refSlavePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_refSlavePoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_refSlavePoint" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->refSlavePoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_makeNan" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_hasNans" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimTDpt const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_isNan" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimTDpt const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_ossimTDpt_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_ossimTDpt_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_ossimTDpt_print" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt_ossimTDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTDpt_ossimTDpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimTDpt const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_ossimTDpt_printTab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_ossimTDpt_printTab",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_ossimTDpt_printTab" "', argument " "1"" of type '" "ossimTDpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt_ossimTDpt_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTDpt_ossimTDpt_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimTDpt const *)arg1)->printTab(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimTDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimTDpt * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimTDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimTDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTDpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTDpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTDpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimTDpt * >(argp2);
  {
    try
    {
      result = (std::istream *) &operator >>(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_tie_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_tie_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_tie_set" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTDpt_tie_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->tie = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_tie_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_tie_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_tie_get" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  result = (ossimDpt *)& ((arg1)->tie);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_score_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTDpt_score_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_score_set" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTDpt_score_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->score = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTDpt_score_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTDpt_score_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTDpt_score_get" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  result = (ossim_float64) ((arg1)->score);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTDpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTDpt *arg1 = (ossimTDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTDpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTDpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTDpt" "', argument " "1"" of type '" "ossimTDpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTDpt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTDpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTDpt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimTempFilename",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimTempFilename" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimTempFilename" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimString const &)*arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimTempFilename",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimTempFilename" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimString const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimTempFilename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimTempFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename((ossimString const &)*arg1,(ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimTempFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTempFilename" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTempFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimTempFilename")) SWIG_fail;
  {
    try
    {
      result = (ossimTempFilename *)new ossimTempFilename();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTempFilename(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimTempFilename__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimTempFilename__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimTempFilename__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ossimTempFilename__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimTempFilename__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimTempFilename__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimTempFilename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTempFilename::ossimTempFilename(ossimString const &,ossimString const &,ossimString const &,bool,bool)\n"
    "    ossimTempFilename::ossimTempFilename(ossimString const &,ossimString const &,ossimString const &,bool)\n"
    "    ossimTempFilename::ossimTempFilename(ossimString const &,ossimString const &,ossimString const &)\n"
    "    ossimTempFilename::ossimTempFilename(ossimString const &,ossimString const &)\n"
    "    ossimTempFilename::ossimTempFilename(ossimString const &)\n"
    "    ossimTempFilename::ossimTempFilename()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTempFilename_generateRandomFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTempFilename *arg1 = (ossimTempFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTempFilename_generateRandomFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTempFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTempFilename_generateRandomFile" "', argument " "1"" of type '" "ossimTempFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimTempFilename * >(argp1);
  {
    try
    {
      (arg1)->generateRandomFile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTempFilename_generateRandomDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTempFilename *arg1 = (ossimTempFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTempFilename_generateRandomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTempFilename, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTempFilename_generateRandomDir" "', argument " "1"" of type '" "ossimTempFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimTempFilename * >(argp1);
  {
    try
    {
      (arg1)->generateRandomDir();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTempFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTempFilename *arg1 = (ossimTempFilename *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTempFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTempFilename, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTempFilename" "', argument " "1"" of type '" "ossimTempFilename *""'"); 
  }
  arg1 = reinterpret_cast< ossimTempFilename * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTempFilename_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTempFilename, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimThinPlateSpline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimThinPlateSpline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimThinPlateSpline",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimThinPlateSpline" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (ossimThinPlateSpline *)new ossimThinPlateSpline(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimThinPlateSpline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimThinPlateSpline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimThinPlateSpline")) SWIG_fail;
  {
    try
    {
      result = (ossimThinPlateSpline *)new ossimThinPlateSpline();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimThinPlateSpline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimThinPlateSpline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimThinPlateSpline__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ossimThinPlateSpline__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimThinPlateSpline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimThinPlateSpline::ossimThinPlateSpline(int)\n"
    "    ossimThinPlateSpline::ossimThinPlateSpline()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimThinPlateSpline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimThinPlateSpline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimThinPlateSpline" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_getNumberOfPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_getNumberOfPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_getNumberOfPoints" "', argument " "1"" of type '" "ossimThinPlateSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      result = (int)((ossimThinPlateSpline const *)arg1)->getNumberOfPoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_setToler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimThinPlateSpline_setToler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_setToler" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_setToler" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimThinPlateSpline_setToler" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setToler(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_getToler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimThinPlateSpline_getToler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_getToler" "', argument " "1"" of type '" "ossimThinPlateSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimThinPlateSpline_getToler" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThinPlateSpline_getToler" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimThinPlateSpline_getToler" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThinPlateSpline_getToler" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try
    {
      ((ossimThinPlateSpline const *)arg1)->getToler(*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_getInterpolationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimThinPlateSpline::vizGeorefInterType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_getInterpolationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_getInterpolationType" "', argument " "1"" of type '" "ossimThinPlateSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      result = (ossimThinPlateSpline::vizGeorefInterType)((ossimThinPlateSpline const *)arg1)->getInterpolationType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_deleteList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_deleteList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_deleteList" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      result = (int)(arg1)->deleteList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_growPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_growPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_growPoints" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      (arg1)->growPoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_addPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimThinPlateSpline_addPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_addPoint" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_addPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimThinPlateSpline_addPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimThinPlateSpline_addPoint" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try
    {
      result = (int)(arg1)->addPoint(arg2,arg3,(double const *)arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_deletePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimThinPlateSpline_deletePoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_deletePoint" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_deletePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimThinPlateSpline_deletePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (int)(arg1)->deletePoint(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimThinPlateSpline_getPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_getPoint" "', argument " "1"" of type '" "ossimThinPlateSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_getPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimThinPlateSpline_getPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimThinPlateSpline_getPoint" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try
    {
      result = (int)((ossimThinPlateSpline const *)arg1)->getPoint(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_getXy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimThinPlateSpline_getXy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_getXy" "', argument " "1"" of type '" "ossimThinPlateSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_getXy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimThinPlateSpline_getXy" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThinPlateSpline_getXy" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimThinPlateSpline_getXy" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThinPlateSpline_getXy" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try
    {
      result = (bool)((ossimThinPlateSpline const *)arg1)->getXy(arg2,*arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_changePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimThinPlateSpline_changePoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_changePoint" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimThinPlateSpline_changePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimThinPlateSpline_changePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimThinPlateSpline_changePoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimThinPlateSpline_changePoint" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try
    {
      result = (bool)(arg1)->changePoint(arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_reset" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      (arg1)->reset();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThinPlateSpline_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThinPlateSpline *arg1 = (ossimThinPlateSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThinPlateSpline_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThinPlateSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThinPlateSpline_solve" "', argument " "1"" of type '" "ossimThinPlateSpline *""'"); 
  }
  arg1 = reinterpret_cast< ossimThinPlateSpline * >(argp1);
  {
    try
    {
      result = (int)(arg1)->solve();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimThinPlateSpline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimThinPlateSpline, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimThreeParamDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  ossimString *arg2 = 0 ;
  ossimEllipsoid *arg3 = (ossimEllipsoid *) 0 ;
  ossim_float64 arg4 ;
  ossim_float64 arg5 ;
  ossim_float64 arg6 ;
  ossim_float64 arg7 ;
  ossim_float64 arg8 ;
  ossim_float64 arg9 ;
  ossim_float64 arg10 ;
  ossim_float64 arg11 ;
  ossim_float64 arg12 ;
  ossim_float64 arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  ossimThreeParamDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:new_ossimThreeParamDatum",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimThreeParamDatum" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimThreeParamDatum" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimThreeParamDatum" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimThreeParamDatum" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimEllipsoid, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimThreeParamDatum" "', argument " "3"" of type '" "ossimEllipsoid const *""'"); 
  }
  arg3 = reinterpret_cast< ossimEllipsoid * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimThreeParamDatum" "', argument " "4"" of type '" "ossim_float64""'");
  } 
  arg4 = static_cast< ossim_float64 >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimThreeParamDatum" "', argument " "5"" of type '" "ossim_float64""'");
  } 
  arg5 = static_cast< ossim_float64 >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimThreeParamDatum" "', argument " "6"" of type '" "ossim_float64""'");
  } 
  arg6 = static_cast< ossim_float64 >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ossimThreeParamDatum" "', argument " "7"" of type '" "ossim_float64""'");
  } 
  arg7 = static_cast< ossim_float64 >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ossimThreeParamDatum" "', argument " "8"" of type '" "ossim_float64""'");
  } 
  arg8 = static_cast< ossim_float64 >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ossimThreeParamDatum" "', argument " "9"" of type '" "ossim_float64""'");
  } 
  arg9 = static_cast< ossim_float64 >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_ossimThreeParamDatum" "', argument " "10"" of type '" "ossim_float64""'");
  } 
  arg10 = static_cast< ossim_float64 >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_ossimThreeParamDatum" "', argument " "11"" of type '" "ossim_float64""'");
  } 
  arg11 = static_cast< ossim_float64 >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_ossimThreeParamDatum" "', argument " "12"" of type '" "ossim_float64""'");
  } 
  arg12 = static_cast< ossim_float64 >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_ossimThreeParamDatum" "', argument " "13"" of type '" "ossim_float64""'");
  } 
  arg13 = static_cast< ossim_float64 >(val13);
  {
    try
    {
      result = (ossimThreeParamDatum *)new ossimThreeParamDatum((ossimString const &)*arg1,(ossimString const &)*arg2,(ossimEllipsoid const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimThreeParamDatum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimThreeParamDatum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimThreeParamDatum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimThreeParamDatum" "', argument " "1"" of type '" "ossimThreeParamDatum *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimThreeParamDatum_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_shift" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimThreeParamDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThreeParamDatum_shift" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimThreeParamDatum const *)arg1)->shift((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_shiftToWgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimThreeParamDatum_shiftToWgs84",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_shiftToWgs84" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimThreeParamDatum_shiftToWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThreeParamDatum_shiftToWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimThreeParamDatum const *)arg1)->shiftToWgs84((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_shiftFromWgs84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimThreeParamDatum_shiftFromWgs84",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_shiftFromWgs84" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimThreeParamDatum_shiftFromWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimThreeParamDatum_shiftFromWgs84" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      result = ((ossimThreeParamDatum const *)arg1)->shiftFromWgs84((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param1" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param1();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param2" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param2();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param3" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param3();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param4" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param4();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param5",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param5" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param5();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param6",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param6" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param6();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimThreeParamDatum_param7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimThreeParamDatum *arg1 = (ossimThreeParamDatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimThreeParamDatum_param7",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimThreeParamDatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimThreeParamDatum_param7" "', argument " "1"" of type '" "ossimThreeParamDatum const *""'"); 
  }
  arg1 = reinterpret_cast< ossimThreeParamDatum * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimThreeParamDatum const *)arg1)->param7();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimThreeParamDatum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimThreeParamDatum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTieGpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimTieGpt")) SWIG_fail;
  {
    try
    {
      result = (ossimTieGpt *)new ossimTieGpt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTieGpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimTieGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimTieGpt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTieGpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTieGpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimTieGpt" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTieGpt" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimTieGpt" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (ossimTieGpt *)new ossimTieGpt((ossimGpt const &)*arg1,(ossimDpt const &)*arg2,(ossim_float64 const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTieGpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTieGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimTieGpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimTieGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTieGpt" "', argument " "1"" of type '" "ossimTieGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTieGpt" "', argument " "1"" of type '" "ossimTieGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossimTieGpt *)new ossimTieGpt((ossimTieGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTieGpt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimTieGpt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimTieGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimTieGpt__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimTieGpt__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimTieGpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGpt::ossimTieGpt()\n"
    "    ossimTieGpt::ossimTieGpt(ossimGpt const &,ossimDpt const &,ossim_float64 const &)\n"
    "    ossimTieGpt::ossimTieGpt(ossimTieGpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimTieGpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTieGpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTieGpt" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimTieGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimTieGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt___set__" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTieGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt___set__" "', argument " "2"" of type '" "ossimTieGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt___set__" "', argument " "2"" of type '" "ossimTieGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimTieGpt * >(argp2);
  {
    try
    {
      result = (ossimTieGpt *) &(arg1)->operator =((ossimTieGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_setGroundPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_setGroundPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_setGroundPoint" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_setGroundPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_setGroundPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      (arg1)->setGroundPoint((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_getGroundPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_getGroundPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_getGroundPoint" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossimGpt *) &((ossimTieGpt const *)arg1)->getGroundPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_refGroundPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_refGroundPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_refGroundPoint" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossimGpt *) &(arg1)->refGroundPoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_setImagePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_setImagePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_setImagePoint" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_setImagePoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_setImagePoint" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setImagePoint((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_getImagePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_getImagePoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_getImagePoint" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimTieGpt const *)arg1)->getImagePoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_refImagePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_refImagePoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_refImagePoint" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->refImagePoint();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_setScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossim_float64 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_setScore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_setScore" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTieGpt_setScore" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  {
    try
    {
      (arg1)->setScore((ossim_float64 const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_getScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_getScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_getScore" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossim_float64 *) &((ossimTieGpt const *)arg1)->getScore();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_refScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_refScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_refScore" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (ossim_float64 *) &(arg1)->refScore();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_makeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_makeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_makeNan" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      (arg1)->makeNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_hasNans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_hasNans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_hasNans" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimTieGpt const *)arg1)->hasNans();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_isNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_isNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_isNan" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = (bool)((ossimTieGpt const *)arg1)->isNan();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_ossimTieGpt_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_ossimTieGpt_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_ossimTieGpt_print" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_ossimTieGpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_ossimTieGpt_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimTieGpt const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_ossimTieGpt_printTab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_ossimTieGpt_printTab",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_ossimTieGpt_printTab" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_ossimTieGpt_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_ossimTieGpt_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimTieGpt const *)arg1)->printTab(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimTieGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTieGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTieGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimTieGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimTieGpt * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimTieGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  ossimTieGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTieGpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "ossimTieGpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "ossimTieGpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimTieGpt * >(argp2);
  {
    try
    {
      result = (std::istream *) &operator >>(*arg1,*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimTieGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '__rshift__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator >>(std::istream &,ossimDpt &)\n"
    "    operator >>(std::istream &,ossimIpt &)\n"
    "    operator >>(std::istream &,ossimString &)\n"
    "    operator >>(std::istream &,ossimTieGpt &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_exportAsGmlNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimRefPtr< ossimXmlNode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_exportAsGmlNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_exportAsGmlNode" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_exportAsGmlNode" "', argument " "2"" of type '" "ossimString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_exportAsGmlNode" "', argument " "2"" of type '" "ossimString""'");
    } else {
      ossimString * temp = reinterpret_cast< ossimString * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimTieGpt const *)arg1)->exportAsGmlNode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimXmlNode >(static_cast< const ossimRefPtr< ossimXmlNode >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_exportAsGmlNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimRefPtr< ossimXmlNode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_exportAsGmlNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_exportAsGmlNode" "', argument " "1"" of type '" "ossimTieGpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    try
    {
      result = ((ossimTieGpt const *)arg1)->exportAsGmlNode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimXmlNode >(static_cast< const ossimRefPtr< ossimXmlNode >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_exportAsGmlNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimTieGpt_exportAsGmlNode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTieGpt_exportAsGmlNode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTieGpt_exportAsGmlNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGpt::exportAsGmlNode(ossimString) const\n"
    "    ossimTieGpt::exportAsGmlNode() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_importFromGmlNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimRefPtr< ossimXmlNode > arg2 ;
  ossimString arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTieGpt_importFromGmlNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'");
    } else {
      ossimRefPtr< ossimXmlNode > * temp = reinterpret_cast< ossimRefPtr< ossimXmlNode > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "3"" of type '" "ossimString""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "3"" of type '" "ossimString""'");
    } else {
      ossimString * temp = reinterpret_cast< ossimString * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = (bool)(arg1)->importFromGmlNode(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_importFromGmlNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimRefPtr< ossimXmlNode > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_importFromGmlNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGpt_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'");
    } else {
      ossimRefPtr< ossimXmlNode > * temp = reinterpret_cast< ossimRefPtr< ossimXmlNode > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (bool)(arg1)->importFromGmlNode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_importFromGmlNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTieGpt_importFromGmlNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimTieGpt_importFromGmlNode__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTieGpt_importFromGmlNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGpt::importFromGmlNode(ossimRefPtr< ossimXmlNode >,ossimString)\n"
    "    ossimTieGpt::importFromGmlNode(ossimRefPtr< ossimXmlNode >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_tie_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossimDpt *arg2 = (ossimDpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_tie_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_tie_set" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimDpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGpt_tie_set" "', argument " "2"" of type '" "ossimDpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  if (arg1) (arg1)->tie = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_tie_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_tie_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_tie_get" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  result = (ossimDpt *)& ((arg1)->tie);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_score_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGpt_score_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_score_set" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTieGpt_score_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->score = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGpt_score_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGpt *arg1 = (ossimTieGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGpt_score_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGpt_score_get" "', argument " "1"" of type '" "ossimTieGpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGpt * >(argp1);
  result = (ossim_float64) ((arg1)->score);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTieGpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTieGpt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTieGptSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimTieGptSet")) SWIG_fail;
  {
    try
    {
      result = (ossimTieGptSet *)new ossimTieGptSet();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGptSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTieGptSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTieGptSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimTieGptSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimTieGptSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTieGptSet" "', argument " "1"" of type '" "ossimTieGptSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTieGptSet" "', argument " "1"" of type '" "ossimTieGptSet const &""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (ossimTieGptSet *)new ossimTieGptSet((ossimTieGptSet const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGptSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimTieGptSet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimTieGptSet__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimTieGptSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimTieGptSet__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimTieGptSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGptSet::ossimTieGptSet()\n"
    "    ossimTieGptSet::ossimTieGptSet(ossimTieGptSet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimTieGptSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTieGptSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTieGptSet" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimTieGptSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimTieGptSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet___set__" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimTieGptSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet___set__" "', argument " "2"" of type '" "ossimTieGptSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet___set__" "', argument " "2"" of type '" "ossimTieGptSet const &""'"); 
  }
  arg2 = reinterpret_cast< ossimTieGptSet * >(argp2);
  {
    try
    {
      result = (ossimTieGptSet *) &(arg1)->operator =((ossimTieGptSet const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_setTiePoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  vector< ossimRefPtr< ossimTieGpt > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_setTiePoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_setTiePoints" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_setTiePoints" "', argument " "2"" of type '" "vector< ossimRefPtr< ossimTieGpt > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_setTiePoints" "', argument " "2"" of type '" "vector< ossimRefPtr< ossimTieGpt > > const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ossimRefPtr< ossimTieGpt > > * >(argp2);
  {
    try
    {
      (arg1)->setTiePoints((vector< ossimRefPtr< ossimTieGpt > > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getTiePoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< ossimRefPtr< ossimTieGpt > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_getTiePoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getTiePoints" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (vector< ossimRefPtr< ossimTieGpt > > *) &((ossimTieGptSet const *)arg1)->getTiePoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_refTiePoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< ossimRefPtr< ossimTieGpt > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_refTiePoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_refTiePoints" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (vector< ossimRefPtr< ossimTieGpt > > *) &(arg1)->refTiePoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_setMasterPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_setMasterPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_setMasterPath" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_setMasterPath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_setMasterPath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setMasterPath((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getMasterPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_getMasterPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getMasterPath" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimTieGptSet const *)arg1)->getMasterPath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_setSlavePath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_setSlavePath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_setSlavePath" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_setSlavePath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_setSlavePath" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setSlavePath((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getSlavePath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_getSlavePath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getSlavePath" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimTieGptSet const *)arg1)->getSlavePath();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_setImageCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  NEWMAT::SymmetricMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_setImageCov",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_setImageCov" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__SymmetricMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_setImageCov" "', argument " "2"" of type '" "NEWMAT::SymmetricMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_setImageCov" "', argument " "2"" of type '" "NEWMAT::SymmetricMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::SymmetricMatrix * >(argp2);
  {
    try
    {
      (arg1)->setImageCov((NEWMAT::SymmetricMatrix const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getImageCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::SymmetricMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_getImageCov",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getImageCov" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (NEWMAT::SymmetricMatrix *) &((ossimTieGptSet const *)arg1)->getImageCov();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NEWMAT__SymmetricMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_refImageCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::SymmetricMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_refImageCov",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_refImageCov" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (NEWMAT::SymmetricMatrix *) &(arg1)->refImageCov();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NEWMAT__SymmetricMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_setGroundCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  NEWMAT::SymmetricMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_setGroundCov",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_setGroundCov" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__SymmetricMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_setGroundCov" "', argument " "2"" of type '" "NEWMAT::SymmetricMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_setGroundCov" "', argument " "2"" of type '" "NEWMAT::SymmetricMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::SymmetricMatrix * >(argp2);
  {
    try
    {
      (arg1)->setGroundCov((NEWMAT::SymmetricMatrix const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getGroundCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::SymmetricMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_getGroundCov",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getGroundCov" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (NEWMAT::SymmetricMatrix *) &((ossimTieGptSet const *)arg1)->getGroundCov();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NEWMAT__SymmetricMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_refGroundCov(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::SymmetricMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_refGroundCov",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_refGroundCov" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (NEWMAT::SymmetricMatrix *) &(arg1)->refGroundCov();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NEWMAT__SymmetricMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getSlaveMasterPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg2 = 0 ;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTieGptSet_getSlaveMasterPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getSlaveMasterPoints" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_getSlaveMasterPoints" "', argument " "2"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_getSlaveMasterPoints" "', argument " "2"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTieGptSet_getSlaveMasterPoints" "', argument " "3"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_getSlaveMasterPoints" "', argument " "3"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp3);
  {
    try
    {
      ((ossimTieGptSet const *)arg1)->getSlaveMasterPoints(*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_size" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = (unsigned int)((ossimTieGptSet const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_addTiePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  SwigValueWrapper< ossimRefPtr< ossimTieGpt > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_addTiePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_addTiePoint" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimTieGpt_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_addTiePoint" "', argument " "2"" of type '" "ossimRefPtr< ossimTieGpt >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_addTiePoint" "', argument " "2"" of type '" "ossimRefPtr< ossimTieGpt >""'");
    } else {
      ossimRefPtr< ossimTieGpt > * temp = reinterpret_cast< ossimRefPtr< ossimTieGpt > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->addTiePoint(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_clearTiePoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_clearTiePoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_clearTiePoints" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      (arg1)->clearTiePoints();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_getGroundBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimGpt *arg2 = 0 ;
  ossimGpt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTieGptSet_getGroundBoundaries",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_getGroundBoundaries" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_getGroundBoundaries" "', argument " "2"" of type '" "ossimGpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_getGroundBoundaries" "', argument " "2"" of type '" "ossimGpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimGpt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTieGptSet_getGroundBoundaries" "', argument " "3"" of type '" "ossimGpt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_getGroundBoundaries" "', argument " "3"" of type '" "ossimGpt &""'"); 
  }
  arg3 = reinterpret_cast< ossimGpt * >(argp3);
  {
    try
    {
      ((ossimTieGptSet const *)arg1)->getGroundBoundaries(*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_ossimTieGptSet_printTab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_ossimTieGptSet_printTab",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_ossimTieGptSet_printTab" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_ossimTieGptSet_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_ossimTieGptSet_printTab" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimTieGptSet const *)arg1)->printTab(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_exportAsGmlNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimRefPtr< ossimXmlNode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_exportAsGmlNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_exportAsGmlNode" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_exportAsGmlNode" "', argument " "2"" of type '" "ossimString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_exportAsGmlNode" "', argument " "2"" of type '" "ossimString""'");
    } else {
      ossimString * temp = reinterpret_cast< ossimString * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = ((ossimTieGptSet const *)arg1)->exportAsGmlNode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimXmlNode >(static_cast< const ossimRefPtr< ossimXmlNode >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_exportAsGmlNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimRefPtr< ossimXmlNode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTieGptSet_exportAsGmlNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_exportAsGmlNode" "', argument " "1"" of type '" "ossimTieGptSet const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    try
    {
      result = ((ossimTieGptSet const *)arg1)->exportAsGmlNode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimXmlNode >(static_cast< const ossimRefPtr< ossimXmlNode >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_exportAsGmlNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGptSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimTieGptSet_exportAsGmlNode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGptSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTieGptSet_exportAsGmlNode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTieGptSet_exportAsGmlNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGptSet::exportAsGmlNode(ossimString) const\n"
    "    ossimTieGptSet::exportAsGmlNode() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_importFromGmlNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimRefPtr< ossimXmlNode > arg2 ;
  ossimString arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTieGptSet_importFromGmlNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'");
    } else {
      ossimRefPtr< ossimXmlNode > * temp = reinterpret_cast< ossimRefPtr< ossimXmlNode > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "3"" of type '" "ossimString""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "3"" of type '" "ossimString""'");
    } else {
      ossimString * temp = reinterpret_cast< ossimString * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = (bool)(arg1)->importFromGmlNode(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_importFromGmlNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTieGptSet *arg1 = (ossimTieGptSet *) 0 ;
  ossimRefPtr< ossimXmlNode > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTieGptSet_importFromGmlNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTieGptSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "1"" of type '" "ossimTieGptSet *""'"); 
  }
  arg1 = reinterpret_cast< ossimTieGptSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTieGptSet_importFromGmlNode" "', argument " "2"" of type '" "ossimRefPtr< ossimXmlNode >""'");
    } else {
      ossimRefPtr< ossimXmlNode > * temp = reinterpret_cast< ossimRefPtr< ossimXmlNode > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (bool)(arg1)->importFromGmlNode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_importFromGmlNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGptSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTieGptSet_importFromGmlNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTieGptSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimXmlNode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimTieGptSet_importFromGmlNode__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTieGptSet_importFromGmlNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTieGptSet::importFromGmlNode(ossimRefPtr< ossimXmlNode >,ossimString)\n"
    "    ossimTieGptSet::importFromGmlNode(ossimRefPtr< ossimXmlNode >)\n");
  return 0;
}


SWIGINTERN int Swig_var_ossimTieGptSet_TIEPTSET_TAG_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimTieGptSet::TIEPTSET_TAG""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimTieGptSet::TIEPTSET_TAG = cptr;
    } else {
      ossimTieGptSet::TIEPTSET_TAG = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimTieGptSet_TIEPTSET_TAG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimTieGptSet::TIEPTSET_TAG);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_TIEPTSET_TAG_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimTieGptSet_TIEPTSET_TAG_get();
}


SWIGINTERN PyObject *_wrap_ossimTieGptSet_TIEPTSET_TAG_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimTieGptSet_TIEPTSET_TAG_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *ossimTieGptSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTieGptSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTiledImageHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDrect *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimTiledImageHash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimTiledImageHash",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTiledImageHash" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTiledImageHash" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDrect * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimTiledImageHash" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimTiledImageHash" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (ossimTiledImageHash *)new ossimTiledImageHash((ossimDrect const &)*arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTiledImageHash, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTiledImageHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiledImageHash *arg1 = (ossimTiledImageHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTiledImageHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiledImageHash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTiledImageHash" "', argument " "1"" of type '" "ossimTiledImageHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiledImageHash * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiledImageHash___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiledImageHash *arg1 = (ossimTiledImageHash *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiledImageHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiledImageHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiledImageHash___call__" "', argument " "1"" of type '" "ossimTiledImageHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiledImageHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiledImageHash___call__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiledImageHash___call__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (long)(arg1)->operator ()((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiledImageHash___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiledImageHash *arg1 = (ossimTiledImageHash *) 0 ;
  ossimFpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiledImageHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiledImageHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiledImageHash___call__" "', argument " "1"" of type '" "ossimTiledImageHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiledImageHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiledImageHash___call__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiledImageHash___call__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFpt * >(argp2);
  {
    try
    {
      result = (long)(arg1)->operator ()((ossimFpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiledImageHash___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiledImageHash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiledImageHash___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiledImageHash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiledImageHash___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTiledImageHash___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTiledImageHash::operator ()(ossimDpt const &)\n"
    "    ossimTiledImageHash::operator ()(ossimFpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimTiledImageHash_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTiledImageHash, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTileHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDrect *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimTileHash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimTileHash",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTileHash" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTileHash" "', argument " "1"" of type '" "ossimDrect const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDrect * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimTileHash" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimTileHash" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (ossimTileHash *)new ossimTileHash((ossimDrect const &)*arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTileHash, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTileHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTileHash *arg1 = (ossimTileHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTileHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTileHash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTileHash" "', argument " "1"" of type '" "ossimTileHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTileHash * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTileHash___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTileHash *arg1 = (ossimTileHash *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTileHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTileHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTileHash___call__" "', argument " "1"" of type '" "ossimTileHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTileHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTileHash___call__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTileHash___call__" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (long)(arg1)->operator ()((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTileHash___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTileHash *arg1 = (ossimTileHash *) 0 ;
  ossimFpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTileHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTileHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTileHash___call__" "', argument " "1"" of type '" "ossimTileHash *""'"); 
  }
  arg1 = reinterpret_cast< ossimTileHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTileHash___call__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTileHash___call__" "', argument " "2"" of type '" "ossimFpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFpt * >(argp2);
  {
    try
    {
      result = (long)(arg1)->operator ()((ossimFpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTileHash___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTileHash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTileHash___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTileHash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTileHash___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTileHash___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTileHash::operator ()(ossimDpt const &)\n"
    "    ossimTileHash::operator ()(ossimFpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimTileHash_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTileHash, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimTimer")) SWIG_fail;
  {
    try
    {
      result = (ossimTimer *)new ossimTimer();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTimer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTimer" "', argument " "1"" of type '" "ossimTimer *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimTimer_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimTimer *)ossimTimer::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTimer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTimer::Timer_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_tick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_tick" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (ossimTimer::Timer_t)((ossimTimer const *)arg1)->tick();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_setStartTick__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_setStartTick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_setStartTick" "', argument " "1"" of type '" "ossimTimer *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      (arg1)->setStartTick();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_setStartTick__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  ossimTimer::Timer_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTimer_setStartTick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_setStartTick" "', argument " "1"" of type '" "ossimTimer *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTimer_setStartTick" "', argument " "2"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg2 = static_cast< ossimTimer::Timer_t >(val2);
  {
    try
    {
      (arg1)->setStartTick(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_setStartTick(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTimer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimTimer_setStartTick__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTimer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimTimer_setStartTick__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTimer_setStartTick'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTimer::setStartTick()\n"
    "    ossimTimer::setStartTick(ossimTimer::Timer_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTimer_getStartTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTimer::Timer_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_getStartTick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_getStartTick" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (ossimTimer::Timer_t)((ossimTimer const *)arg1)->getStartTick();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_time_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_time_s",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_time_s" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->time_s();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_time_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_time_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_time_m" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->time_m();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_time_u(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_time_u",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_time_u" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->time_u();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_time_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_time_n",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_time_n" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->time_n();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_delta_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  ossimTimer::Timer_t arg2 ;
  ossimTimer::Timer_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTimer_delta_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_delta_s" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTimer_delta_s" "', argument " "2"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg2 = static_cast< ossimTimer::Timer_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimTimer_delta_s" "', argument " "3"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg3 = static_cast< ossimTimer::Timer_t >(val3);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->delta_s(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_delta_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  ossimTimer::Timer_t arg2 ;
  ossimTimer::Timer_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTimer_delta_m",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_delta_m" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTimer_delta_m" "', argument " "2"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg2 = static_cast< ossimTimer::Timer_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimTimer_delta_m" "', argument " "3"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg3 = static_cast< ossimTimer::Timer_t >(val3);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->delta_m(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_delta_u(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  ossimTimer::Timer_t arg2 ;
  ossimTimer::Timer_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTimer_delta_u",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_delta_u" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTimer_delta_u" "', argument " "2"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg2 = static_cast< ossimTimer::Timer_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimTimer_delta_u" "', argument " "3"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg3 = static_cast< ossimTimer::Timer_t >(val3);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->delta_u(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_delta_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  ossimTimer::Timer_t arg2 ;
  ossimTimer::Timer_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTimer_delta_n",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_delta_n" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTimer_delta_n" "', argument " "2"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg2 = static_cast< ossimTimer::Timer_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimTimer_delta_n" "', argument " "3"" of type '" "ossimTimer::Timer_t""'");
  } 
  arg3 = static_cast< ossimTimer::Timer_t >(val3);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->delta_n(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTimer_getSecondsPerTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTimer *arg1 = (ossimTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTimer_getSecondsPerTick",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTimer_getSecondsPerTick" "', argument " "1"" of type '" "ossimTimer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTimer * >(argp1);
  {
    try
    {
      result = (double)((ossimTimer const *)arg1)->getSecondsPerTick();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTimer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTimer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimString *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimTrace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimTrace" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimTrace" "', argument " "1"" of type '" "ossimString const &""'"); 
  }
  arg1 = reinterpret_cast< ossimString * >(argp1);
  {
    try
    {
      result = (ossimTrace *)new ossimTrace((ossimString const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTrace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTrace *arg1 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTrace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTrace" "', argument " "1"" of type '" "ossimTrace *""'"); 
  }
  arg1 = reinterpret_cast< ossimTrace * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTrace_isEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTrace *arg1 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTrace_isEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTrace_isEnabled" "', argument " "1"" of type '" "ossimTrace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTrace * >(argp1);
  {
    try
    {
      result = (bool)((ossimTrace const *)arg1)->isEnabled();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTrace_getTraceName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTrace *arg1 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTrace_getTraceName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTrace_getTraceName" "', argument " "1"" of type '" "ossimTrace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTrace * >(argp1);
  {
    try
    {
      result = ((ossimTrace const *)arg1)->getTraceName();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTrace_setTraceFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTrace *arg1 = (ossimTrace *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTrace_setTraceFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTrace_setTraceFlag" "', argument " "1"" of type '" "ossimTrace *""'"); 
  }
  arg1 = reinterpret_cast< ossimTrace * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimTrace_setTraceFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setTraceFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTrace___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTrace *arg1 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimTrace___call__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTrace___call__" "', argument " "1"" of type '" "ossimTrace const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTrace * >(argp1);
  {
    try
    {
      result = (bool)((ossimTrace const *)arg1)->operator ()();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTrace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTrace, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimTraceManager_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTraceManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimTraceManager_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimTraceManager *)ossimTraceManager::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTraceManager, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTraceManager_setTracePattern(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTraceManager *arg1 = (ossimTraceManager *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTraceManager_setTracePattern",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTraceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTraceManager_setTracePattern" "', argument " "1"" of type '" "ossimTraceManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimTraceManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTraceManager_setTracePattern" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTraceManager_setTracePattern" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setTracePattern((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTraceManager_addTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTraceManager *arg1 = (ossimTraceManager *) 0 ;
  ossimTrace *arg2 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTraceManager_addTrace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTraceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTraceManager_addTrace" "', argument " "1"" of type '" "ossimTraceManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimTraceManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTraceManager_addTrace" "', argument " "2"" of type '" "ossimTrace *""'"); 
  }
  arg2 = reinterpret_cast< ossimTrace * >(argp2);
  {
    try
    {
      (arg1)->addTrace(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTraceManager_removeTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTraceManager *arg1 = (ossimTraceManager *) 0 ;
  ossimTrace *arg2 = (ossimTrace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTraceManager_removeTrace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTraceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTraceManager_removeTrace" "', argument " "1"" of type '" "ossimTraceManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimTraceManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimTrace, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTraceManager_removeTrace" "', argument " "2"" of type '" "ossimTrace *""'"); 
  }
  arg2 = reinterpret_cast< ossimTrace * >(argp2);
  {
    try
    {
      (arg1)->removeTrace(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTraceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTraceManager *arg1 = (ossimTraceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTraceManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTraceManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTraceManager" "', argument " "1"" of type '" "ossimTraceManager *""'"); 
  }
  arg1 = reinterpret_cast< ossimTraceManager * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTraceManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTraceManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned char arg6 ;
  long arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned char arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1,(ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimDpt,std::allocator< ossimDpt > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimDpt,std::allocator< ossimDpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimDpt,std::allocator< ossimDpt > > * >(argp1);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((std::vector< ossimDpt,std::allocator< ossimDpt > > const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimAnnotationMultiEllipseObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimAnnotationMultiEllipseObject")) SWIG_fail;
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimAnnotationMultiEllipseObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const &""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      result = (ossimAnnotationMultiEllipseObject *)new ossimAnnotationMultiEllipseObject((ossimAnnotationMultiEllipseObject const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimAnnotationMultiEllipseObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_13(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_12(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_14(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_long(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ossimAnnotationMultiEllipseObject__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimAnnotationMultiEllipseObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char,unsigned char,long)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &,bool,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &,bool)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &,ossimDpt const &)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(std::vector< ossimDpt,std::allocator< ossimDpt > > const &)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char,unsigned char,long)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &,bool)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimDpt const &)\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject()\n"
    "    ossimAnnotationMultiEllipseObject::ossimAnnotationMultiEllipseObject(ossimAnnotationMultiEllipseObject const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_dup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAnnotationMultiEllipseObject_dup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_dup" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      result = (ossimObject *)((ossimAnnotationMultiEllipseObject const *)arg1)->dup();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_getNewClippedObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_getNewClippedObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (ossimAnnotationObject *)((ossimAnnotationMultiEllipseObject const *)arg1)->getNewClippedObject((ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_applyScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimAnnotationMultiEllipseObject_applyScale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_applyScale" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAnnotationMultiEllipseObject_applyScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimAnnotationMultiEllipseObject_applyScale" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->applyScale(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimRgbImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_draw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_draw" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_draw" "', argument " "2"" of type '" "ossimRgbImage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_draw" "', argument " "2"" of type '" "ossimRgbImage &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbImage * >(argp2);
  {
    try
    {
      ((ossimAnnotationMultiEllipseObject const *)arg1)->draw(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_intersects" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_intersects" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_intersects" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimAnnotationMultiEllipseObject const *)arg1)->intersects((ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimAnnotationMultiEllipseObject const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_getBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_getBoundingRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_getBoundingRect" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_getBoundingRect" "', argument " "2"" of type '" "ossimDrect &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_getBoundingRect" "', argument " "2"" of type '" "ossimDrect &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      ((ossimAnnotationMultiEllipseObject const *)arg1)->getBoundingRect(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_computeBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAnnotationMultiEllipseObject_computeBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_computeBoundingRect" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      (arg1)->computeBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_isPointWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_isPointWithin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_isPointWithin" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_isPointWithin" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (bool)((ossimAnnotationMultiEllipseObject const *)arg1)->isPointWithin((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_setFillFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_setFillFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_setFillFlag" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAnnotationMultiEllipseObject_setFillFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setFillFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_resize" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAnnotationMultiEllipseObject_resize" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject_setWidthHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject_setWidthHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject_setWidthHeight" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationMultiEllipseObject_setWidthHeight" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationMultiEllipseObject_setWidthHeight" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setWidthHeight((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject___getitem__" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAnnotationMultiEllipseObject___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (ossimDpt *) &(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationMultiEllipseObject *arg1 = (ossimAnnotationMultiEllipseObject *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationMultiEllipseObject___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationMultiEllipseObject___getitem__" "', argument " "1"" of type '" "ossimAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimAnnotationMultiEllipseObject___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (ossimDpt *) &((ossimAnnotationMultiEllipseObject const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationMultiEllipseObject___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimAnnotationMultiEllipseObject___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAnnotationMultiEllipseObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimAnnotationMultiEllipseObject___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimAnnotationMultiEllipseObject___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAnnotationMultiEllipseObject::operator [](int)\n"
    "    ossimAnnotationMultiEllipseObject::operator [](int) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimAnnotationMultiEllipseObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimAnnotationMultiEllipseObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimAnnotationObjectFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimAnnotationObjectFactory *)ossimAnnotationObjectFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObjectFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *arg1 = (ossimAnnotationObjectFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationObjectFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationObjectFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "1"" of type '" "ossimAnnotationObjectFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationObjectFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimAnnotationObject *)((ossimAnnotationObjectFactory const *)arg1)->create((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *arg1 = (ossimAnnotationObjectFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimAnnotationObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimAnnotationObjectFactory_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationObjectFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "1"" of type '" "ossimAnnotationObjectFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationObjectFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimAnnotationObject *)((ossimAnnotationObjectFactory const *)arg1)->create((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_create__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *arg1 = (ossimAnnotationObjectFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimAnnotationObjectFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationObjectFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "1"" of type '" "ossimAnnotationObjectFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationObjectFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimAnnotationObjectFactory_create" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimAnnotationObject *)((ossimAnnotationObjectFactory const *)arg1)->create((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAnnotationObjectFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimAnnotationObjectFactory_create__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAnnotationObjectFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimAnnotationObjectFactory_create__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimAnnotationObjectFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimAnnotationObjectFactory_create__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimAnnotationObjectFactory_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimAnnotationObjectFactory::create(ossimString const &) const\n"
    "    ossimAnnotationObjectFactory::create(ossimKeywordlist const &,char const *) const\n"
    "    ossimAnnotationObjectFactory::create(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimAnnotationObjectFactory_getList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *arg1 = (ossimAnnotationObjectFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< list< ossimString > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimAnnotationObjectFactory_getList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationObjectFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimAnnotationObjectFactory_getList" "', argument " "1"" of type '" "ossimAnnotationObjectFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationObjectFactory * >(argp1);
  {
    try
    {
      result = ((ossimAnnotationObjectFactory const *)arg1)->getList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new list< ossimString >(static_cast< const list< ossimString >& >(result))), SWIGTYPE_p_listT_ossimString_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimAnnotationObjectFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimAnnotationObjectFactory *arg1 = (ossimAnnotationObjectFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimAnnotationObjectFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimAnnotationObjectFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimAnnotationObjectFactory" "', argument " "1"" of type '" "ossimAnnotationObjectFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimAnnotationObjectFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimAnnotationObjectFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimAnnotationObjectFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimBitMaskWriter::BM_STARTING_RLEVEL_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimBitMaskWriter::BM_STARTING_RLEVEL_KW = cptr;
    } else {
      ossimBitMaskWriter::BM_STARTING_RLEVEL_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimBitMaskWriter::BM_STARTING_RLEVEL_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimBitMaskWriter::MASK_FILE_MAGIC_NUMBER""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimBitMaskWriter::MASK_FILE_MAGIC_NUMBER = cptr;
    } else {
      ossimBitMaskWriter::MASK_FILE_MAGIC_NUMBER = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimBitMaskWriter::MASK_FILE_MAGIC_NUMBER);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get();
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimBitMaskWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimBitMaskWriter")) SWIG_fail;
  {
    try
    {
      result = (ossimBitMaskWriter *)new ossimBitMaskWriter();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimBitMaskWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimBitMaskWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimBitMaskWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimBitMaskWriter" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_setBogusPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimBitMaskWriter_setBogusPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_setBogusPixel" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimBitMaskWriter_setBogusPixel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setBogusPixel(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_setBogusPixelRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimBitMaskWriter_setBogusPixelRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_setBogusPixelRange" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimBitMaskWriter_setBogusPixelRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimBitMaskWriter_setBogusPixelRange" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setBogusPixelRange(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_setStartingResLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimBitMaskWriter_setStartingResLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_setStartingResLevel" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimBitMaskWriter_setStartingResLevel" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setStartingResLevel(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_generateMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimRefPtr< ossimImageData > arg2 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimBitMaskWriter_generateMask",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_generateMask" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_generateMask" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimBitMaskWriter_generateMask" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData >""'");
    } else {
      ossimRefPtr< ossimImageData > * temp = reinterpret_cast< ossimRefPtr< ossimImageData > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimBitMaskWriter_generateMask" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      (arg1)->generateMask(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_buildOverviews(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimBitMaskWriter_buildOverviews",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_buildOverviews" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimBitMaskWriter_buildOverviews" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (bool)(arg1)->buildOverviews(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimBitMaskWriter_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_loadState" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimBitMaskWriter_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimBitMaskWriter_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimBitMaskWriter_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_loadState" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimBitMaskWriter_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimBitMaskWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimBitMaskWriter_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimBitMaskWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimBitMaskWriter_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimBitMaskWriter_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimBitMaskWriter::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimBitMaskWriter::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_isOpen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimBitMaskWriter_isOpen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_isOpen" "', argument " "1"" of type '" "ossimBitMaskWriter const *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  {
    try
    {
      result = (bool)((ossimBitMaskWriter const *)arg1)->isOpen();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimBitMaskWriter_open",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_open" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->open();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimBitMaskWriter_close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_close" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  {
    try
    {
      (arg1)->close();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_canConnectMyInputTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossim_int32 arg2 ;
  ossimConnectableObject *arg3 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimBitMaskWriter_canConnectMyInputTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_canConnectMyInputTo" "', argument " "1"" of type '" "ossimBitMaskWriter const *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimBitMaskWriter_canConnectMyInputTo" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimBitMaskWriter_canConnectMyInputTo" "', argument " "3"" of type '" "ossimConnectableObject const *""'"); 
  }
  arg3 = reinterpret_cast< ossimConnectableObject * >(argp3);
  {
    try
    {
      result = (bool)((ossimBitMaskWriter const *)arg1)->canConnectMyInputTo(arg2,(ossimConnectableObject const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimBitMaskWriter_connectMyInputTo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (ossim_int32)(arg1)->connectMyInputTo(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimBitMaskWriter_connectMyInputTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (ossim_int32)(arg1)->connectMyInputTo(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimBitMaskWriter *arg1 = (ossimBitMaskWriter *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimBitMaskWriter_connectMyInputTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "1"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg1 = reinterpret_cast< ossimBitMaskWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimBitMaskWriter_connectMyInputTo" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (ossim_int32)(arg1)->connectMyInputTo(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimBitMaskWriter_connectMyInputTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimBitMaskWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimBitMaskWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimBitMaskWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimBitMaskWriter_connectMyInputTo__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimBitMaskWriter_connectMyInputTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimBitMaskWriter::connectMyInputTo(ossimConnectableObject *,bool,bool)\n"
    "    ossimBitMaskWriter::connectMyInputTo(ossimConnectableObject *,bool)\n"
    "    ossimBitMaskWriter::connectMyInputTo(ossimConnectableObject *)\n");
  return 0;
}


SWIGINTERN PyObject *ossimBitMaskWriter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimBitMaskWriter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimFilterResampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimFilterResampler")) SWIG_fail;
  {
    try
    {
      result = (ossimFilterResampler *)new ossimFilterResampler();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilterResampler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimFilterResampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimFilterResampler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimFilterResampler" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_resample__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimRefPtr< ossimImageData > *arg2 = 0 ;
  ossimRefPtr< ossimImageData > *arg3 = 0 ;
  ossimDpt *arg4 = 0 ;
  ossimDpt *arg5 = 0 ;
  ossimDpt *arg6 = 0 ;
  ossimDpt *arg7 = 0 ;
  ossimDpt *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ossimFilterResampler_resample",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_resample" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_resample" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData > const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRefPtr< ossimImageData > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_resample" "', argument " "3"" of type '" "ossimRefPtr< ossimImageData > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "3"" of type '" "ossimRefPtr< ossimImageData > &""'"); 
  }
  arg3 = reinterpret_cast< ossimRefPtr< ossimImageData > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilterResampler_resample" "', argument " "4"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "4"" of type '" "ossimDpt const &""'"); 
  }
  arg4 = reinterpret_cast< ossimDpt * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimFilterResampler_resample" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  arg5 = reinterpret_cast< ossimDpt * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimFilterResampler_resample" "', argument " "6"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "6"" of type '" "ossimDpt const &""'"); 
  }
  arg6 = reinterpret_cast< ossimDpt * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ossimFilterResampler_resample" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  arg7 = reinterpret_cast< ossimDpt * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ossimFilterResampler_resample" "', argument " "8"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "8"" of type '" "ossimDpt const &""'"); 
  }
  arg8 = reinterpret_cast< ossimDpt * >(argp8);
  {
    try
    {
      (arg1)->resample((ossimRefPtr< ossimImageData > const &)*arg2,*arg3,(ossimDpt const &)*arg4,(ossimDpt const &)*arg5,(ossimDpt const &)*arg6,(ossimDpt const &)*arg7,(ossimDpt const &)*arg8);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_resample__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimRefPtr< ossimImageData > *arg2 = 0 ;
  ossimRefPtr< ossimImageData > *arg3 = 0 ;
  ossimIrect *arg4 = 0 ;
  ossimDpt *arg5 = 0 ;
  ossimDpt *arg6 = 0 ;
  ossimDpt *arg7 = 0 ;
  ossimDpt *arg8 = 0 ;
  ossimDpt *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:ossimFilterResampler_resample",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_resample" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_resample" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "2"" of type '" "ossimRefPtr< ossimImageData > const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRefPtr< ossimImageData > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_resample" "', argument " "3"" of type '" "ossimRefPtr< ossimImageData > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "3"" of type '" "ossimRefPtr< ossimImageData > &""'"); 
  }
  arg3 = reinterpret_cast< ossimRefPtr< ossimImageData > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilterResampler_resample" "', argument " "4"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "4"" of type '" "ossimIrect const &""'"); 
  }
  arg4 = reinterpret_cast< ossimIrect * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimFilterResampler_resample" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "5"" of type '" "ossimDpt const &""'"); 
  }
  arg5 = reinterpret_cast< ossimDpt * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimFilterResampler_resample" "', argument " "6"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "6"" of type '" "ossimDpt const &""'"); 
  }
  arg6 = reinterpret_cast< ossimDpt * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ossimFilterResampler_resample" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "7"" of type '" "ossimDpt const &""'"); 
  }
  arg7 = reinterpret_cast< ossimDpt * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ossimFilterResampler_resample" "', argument " "8"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "8"" of type '" "ossimDpt const &""'"); 
  }
  arg8 = reinterpret_cast< ossimDpt * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "ossimFilterResampler_resample" "', argument " "9"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_resample" "', argument " "9"" of type '" "ossimDpt const &""'"); 
  }
  arg9 = reinterpret_cast< ossimDpt * >(argp9);
  {
    try
    {
      (arg1)->resample((ossimRefPtr< ossimImageData > const &)*arg2,*arg3,(ossimIrect const &)*arg4,(ossimDpt const &)*arg5,(ossimDpt const &)*arg6,(ossimDpt const &)*arg7,(ossimDpt const &)*arg8,(ossimDpt const &)*arg9);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_resample(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimDpt, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimDpt, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_ossimDpt, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_ossimDpt, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_ossimDpt, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_ossimFilterResampler_resample__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimIrect, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimDpt, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_ossimDpt, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_ossimDpt, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_ossimDpt, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_ossimDpt, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_ossimFilterResampler_resample__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_resample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::resample(ossimRefPtr< ossimImageData > const &,ossimRefPtr< ossimImageData > &,ossimDpt const &,ossimDpt const &,ossimDpt const &,ossimDpt const &,ossimDpt const &)\n"
    "    ossimFilterResampler::resample(ossimRefPtr< ossimImageData > const &,ossimRefPtr< ossimImageData > &,ossimIrect const &,ossimDpt const &,ossimDpt const &,ossimDpt const &,ossimDpt const &,ossimDpt const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setFilterType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimFilterResampler::ossimFilterResamplerType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg2 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val2);
  {
    try
    {
      (arg1)->setFilterType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setFilterType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimFilterResampler::ossimFilterResamplerType arg2 ;
  ossimFilterResampler::ossimFilterResamplerType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterResampler_setFilterType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg2 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimFilterResampler_setFilterType" "', argument " "3"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg3 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val3);
  {
    try
    {
      (arg1)->setFilterType(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setFilterType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setFilterType((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setFilterType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimString *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterResampler_setFilterType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_setFilterType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setFilterType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      (arg1)->setFilterType((ossimString const &)*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setFilterType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilterResampler_setFilterType__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimFilterResampler_setFilterType__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimString, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFilterResampler_setFilterType__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimFilterResampler_setFilterType__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_setFilterType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::setFilterType(ossimFilterResampler::ossimFilterResamplerType)\n"
    "    ossimFilterResampler::setFilterType(ossimFilterResampler::ossimFilterResamplerType,ossimFilterResampler::ossimFilterResamplerType)\n"
    "    ossimFilterResampler::setFilterType(ossimString const &)\n"
    "    ossimFilterResampler::setFilterType(ossimString const &,ossimString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMinifyFilterType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setMinifyFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setMinifyFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setMinifyFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setMinifyFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setMinifyFilterType((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMagnifyFilterType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setMagnifyFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setMagnifyFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setMagnifyFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setMagnifyFilterType" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setMagnifyFilterType((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMinifyFilterType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimFilterResampler::ossimFilterResamplerType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setMinifyFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setMinifyFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterResampler_setMinifyFilterType" "', argument " "2"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg2 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val2);
  {
    try
    {
      (arg1)->setMinifyFilterType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMinifyFilterType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilterResampler_setMinifyFilterType__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimFilterResampler_setMinifyFilterType__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_setMinifyFilterType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::setMinifyFilterType(ossimString const &)\n"
    "    ossimFilterResampler::setMinifyFilterType(ossimFilterResampler::ossimFilterResamplerType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMagnifyFilterType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimFilterResampler::ossimFilterResamplerType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setMagnifyFilterType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setMagnifyFilterType" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterResampler_setMagnifyFilterType" "', argument " "2"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg2 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val2);
  {
    try
    {
      (arg1)->setMagnifyFilterType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setMagnifyFilterType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilterResampler_setMagnifyFilterType__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimFilterResampler_setMagnifyFilterType__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_setMagnifyFilterType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::setMagnifyFilterType(ossimString const &)\n"
    "    ossimFilterResampler::setMagnifyFilterType(ossimFilterResampler::ossimFilterResamplerType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getMinifyFilterTypeAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterResampler_getMinifyFilterTypeAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getMinifyFilterTypeAsString" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      result = ((ossimFilterResampler const *)arg1)->getMinifyFilterTypeAsString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getMagnifyFilterTypeAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterResampler_getMagnifyFilterTypeAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getMagnifyFilterTypeAsString" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      result = ((ossimFilterResampler const *)arg1)->getMagnifyFilterTypeAsString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setScaleFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setScaleFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setScaleFactor" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setScaleFactor" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setScaleFactor" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setScaleFactor((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setBlurFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setBlurFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setBlurFactor" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterResampler_setBlurFactor" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      (arg1)->setBlurFactor(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_setBoundingInputRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_setBoundingInputRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_setBoundingInputRect" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_setBoundingInputRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_setBoundingInputRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      (arg1)->setBoundingInputRect((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getBoundingInputRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterResampler_getBoundingInputRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getBoundingInputRect" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      result = ((ossimFilterResampler const *)arg1)->getBoundingInputRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getBlurFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterResampler_getBlurFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getBlurFactor" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimFilterResampler const *)arg1)->getBlurFactor();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getScaleFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterResampler_getScaleFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getScaleFactor" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimFilterResampler const *)arg1)->getScaleFactor();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterResampler_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_saveState" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimFilterResampler const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_saveState" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimFilterResampler const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilterResampler_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFilterResampler_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimFilterResampler::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterResampler_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_loadState" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_loadState" "', argument " "1"" of type '" "ossimFilterResampler *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimFilterResampler_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterResampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFilterResampler_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterResampler_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterResampler::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimFilterResampler::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getKernelSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterResampler_getKernelSupport",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getKernelSupport" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_getKernelSupport" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_getKernelSupport" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterResampler_getKernelSupport" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_getKernelSupport" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try
    {
      ((ossimFilterResampler const *)arg1)->getKernelSupport(*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterResampler_getFilterTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterResampler *arg1 = (ossimFilterResampler *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFilterResampler_getFilterTypes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterResampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterResampler_getFilterTypes" "', argument " "1"" of type '" "ossimFilterResampler const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterResampler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFilterResampler_getFilterTypes" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterResampler_getFilterTypes" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimFilterResampler const *)arg1)->getFilterTypes(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimFilterResampler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimFilterResampler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimFilterTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimFilterTable")) SWIG_fail;
  {
    try
    {
      result = (ossimFilterTable *)new ossimFilterTable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilterTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimFilterTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimFilterTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimFilterTable" "', argument " "1"" of type '" "ossimFilterTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_buildTable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  ossim_uint32 arg2 ;
  ossimFilter *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterTable_buildTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_buildTable" "', argument " "1"" of type '" "ossimFilterTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterTable_buildTable" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterTable_buildTable" "', argument " "3"" of type '" "ossimFilter const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterTable_buildTable" "', argument " "3"" of type '" "ossimFilter const &""'"); 
  }
  arg3 = reinterpret_cast< ossimFilter * >(argp3);
  {
    try
    {
      (arg1)->buildTable(arg2,(ossimFilter const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_buildTable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  ossim_uint32 arg2 ;
  ossimFilter *arg3 = 0 ;
  ossimFilter *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimFilterTable_buildTable",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_buildTable" "', argument " "1"" of type '" "ossimFilterTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterTable_buildTable" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimFilterTable_buildTable" "', argument " "3"" of type '" "ossimFilter const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterTable_buildTable" "', argument " "3"" of type '" "ossimFilter const &""'"); 
  }
  arg3 = reinterpret_cast< ossimFilter * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimFilter,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimFilterTable_buildTable" "', argument " "4"" of type '" "ossimFilter const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFilterTable_buildTable" "', argument " "4"" of type '" "ossimFilter const &""'"); 
  }
  arg4 = reinterpret_cast< ossimFilter * >(argp4);
  {
    try
    {
      (arg1)->buildTable(arg2,(ossimFilter const &)*arg3,(ossimFilter const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_buildTable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimFilter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimFilterTable_buildTable__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFilterTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimFilter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimFilter, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimFilterTable_buildTable__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFilterTable_buildTable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFilterTable::buildTable(ossim_uint32,ossimFilter const &)\n"
    "    ossimFilterTable::buildTable(ossim_uint32,ossimFilter const &,ossimFilter const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getWidthByHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterTable_getWidthByHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getWidthByHeight" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimFilterTable const *)arg1)->getWidthByHeight();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getXSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterTable_getXSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getXSupport" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimFilterTable const *)arg1)->getXSupport();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getYSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterTable_getYSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getYSupport" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimFilterTable const *)arg1)->getYSupport();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterTable_getWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getWidth" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimFilterTable const *)arg1)->getWidth();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFilterTable_getHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getHeight" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimFilterTable const *)arg1)->getHeight();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFilterTable_getClosestWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFilterTable *arg1 = (ossimFilterTable *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimFilterTable_getClosestWeights",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFilterTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFilterTable_getClosestWeights" "', argument " "1"" of type '" "ossimFilterTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFilterTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimFilterTable_getClosestWeights" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimFilterTable_getClosestWeights" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (double *)((ossimFilterTable const *)arg1)->getClosestWeights((double const &)*arg2,(double const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimFilterTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimFilterTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorOssimFileName_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_iterator" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_ossimFilename_Sg__iterator(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___nonzero__" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_ossimFilename_Sg____nonzero__((std::vector< ossimFilename > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___bool__" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_ossimFilename_Sg____bool__((std::vector< ossimFilename > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___len__" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_ossimFilename_Sg____len__((std::vector< ossimFilename > const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_pop" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_ossimFilename_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ossimFilename >::value_type(static_cast< const std::vector< ossimFilename >::value_type& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  std::vector< ossimFilename >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___getslice__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___getslice__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorOssimFileName___getslice__" "', argument " "3"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimFilename >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< ossimFilename,std::allocator< ossimFilename > > *)std_vector_Sl_ossimFilename_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  std::vector< ossimFilename >::difference_type arg3 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorOssimFileName___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___setslice__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___setslice__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorOssimFileName___setslice__" "', argument " "3"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimFilename >::difference_type >(val3);
  {
    std::vector<ossimFilename,std::allocator< ossimFilename > > *ptr = (std::vector<ossimFilename,std::allocator< ossimFilename > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorOssimFileName___setslice__" "', argument " "4"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName___setslice__" "', argument " "4"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< ossimFilename,std::allocator< ossimFilename > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  std::vector< ossimFilename >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___setslice__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___setslice__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorOssimFileName___setslice__" "', argument " "3"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimFilename >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorOssimFileName___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorOssimFileName___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::__setslice__(std::vector< ossimFilename >::difference_type,std::vector< ossimFilename >::difference_type,std::vector< ossimFilename,std::allocator< ossimFilename > > const &)\n"
    "    std::vector< ossimFilename >::__setslice__(std::vector< ossimFilename >::difference_type,std::vector< ossimFilename >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  std::vector< ossimFilename >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___delslice__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___delslice__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorOssimFileName___delslice__" "', argument " "3"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ossimFilename >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___delitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___delitem__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___getitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< ossimFilename,std::allocator< ossimFilename > > *)std_vector_Sl_ossimFilename_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___setitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<ossimFilename,std::allocator< ossimFilename > > *ptr = (std::vector<ossimFilename,std::allocator< ossimFilename > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorOssimFileName___setitem__" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName___setitem__" "', argument " "3"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ossimFilename,std::allocator< ossimFilename > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___setitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___delitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorOssimFileName___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorOssimFileName___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::__delitem__(std::vector< ossimFilename >::difference_type)\n"
    "    std::vector< ossimFilename >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimFilename >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___getitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___getitem__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< ossimFilename >::value_type *) &std_vector_Sl_ossimFilename_Sg____getitem____SWIG_1((std::vector< ossimFilename > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorOssimFileName___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorOssimFileName___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::__getitem__(PySliceObject *)\n"
    "    std::vector< ossimFilename >::__getitem__(std::vector< ossimFilename >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::difference_type arg2 ;
  std::vector< ossimFilename >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName___setitem__" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName___setitem__" "', argument " "2"" of type '" "std::vector< ossimFilename >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorOssimFileName___setitem__" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName___setitem__" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_ossimFilename_Sg____setitem____SWIG_2(arg1,arg2,(ossimFilename const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorOssimFileName___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorOssimFileName___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimFilename, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorOssimFileName___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::__setitem__(PySliceObject *,std::vector< ossimFilename,std::allocator< ossimFilename > > const &)\n"
    "    std::vector< ossimFilename >::__setitem__(PySliceObject *)\n"
    "    std::vector< ossimFilename >::__setitem__(std::vector< ossimFilename >::difference_type,std::vector< ossimFilename >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_append" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorOssimFileName_append" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_append" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_ossimFilename_Sg__append(arg1,(ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorOssimFileName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorOssimFileName")) SWIG_fail;
  {
    try
    {
      result = (std::vector< ossimFilename > *)new std::vector< ossimFilename >();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorOssimFileName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorOssimFileName",&obj0)) SWIG_fail;
  {
    std::vector<ossimFilename,std::allocator< ossimFilename > > *ptr = (std::vector<ossimFilename,std::allocator< ossimFilename > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorOssimFileName" "', argument " "1"" of type '" "std::vector< ossimFilename > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorOssimFileName" "', argument " "1"" of type '" "std::vector< ossimFilename > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< ossimFilename > *)new std::vector< ossimFilename >((std::vector< ossimFilename > const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_empty" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< ossimFilename > const *)arg1)->empty();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_size" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimFilename > const *)arg1)->size();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_clear" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_swap" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorOssimFileName_swap" "', argument " "2"" of type '" "std::vector< ossimFilename > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_swap" "', argument " "2"" of type '" "std::vector< ossimFilename > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< ossimFilename > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_get_allocator" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimFilename > const *)arg1)->get_allocator();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ossimFilename >::allocator_type(static_cast< const std::vector< ossimFilename >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_ossimFilename_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_begin" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_end" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_rbegin" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_rend" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorOssimFileName__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorOssimFileName",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorOssimFileName" "', argument " "1"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ossimFilename >::size_type >(val1);
  {
    try
    {
      result = (std::vector< ossimFilename > *)new std::vector< ossimFilename >(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_pop_back" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_resize" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName_resize" "', argument " "2"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimFilename >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_erase" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::iterator arg2 ;
  std::vector< ossimFilename >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimFilename >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_erase" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "3"" of type '" "std::vector< ossimFilename >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_erase" "', argument " "3"" of type '" "std::vector< ossimFilename >::iterator""'");
    }
  }
  {
    try
    {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorOssimFileName_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorOssimFileName_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::erase(std::vector< ossimFilename >::iterator)\n"
    "    std::vector< ossimFilename >::erase(std::vector< ossimFilename >::iterator,std::vector< ossimFilename >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorOssimFileName__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename >::size_type arg1 ;
  std::vector< ossimFilename >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ossimFilename > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorOssimFileName",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorOssimFileName" "', argument " "1"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ossimFilename >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorOssimFileName" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorOssimFileName" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< ossimFilename > *)new std::vector< ossimFilename >(arg1,(std::vector< ossimFilename >::value_type const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorOssimFileName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorOssimFileName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorOssimFileName__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorOssimFileName__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorOssimFileName__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorOssimFileName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::vector()\n"
    "    std::vector< ossimFilename >::vector(std::vector< ossimFilename > const &)\n"
    "    std::vector< ossimFilename >::vector(std::vector< ossimFilename >::size_type)\n"
    "    std::vector< ossimFilename >::vector(std::vector< ossimFilename >::size_type,std::vector< ossimFilename >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_push_back" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorOssimFileName_push_back" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_push_back" "', argument " "2"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< ossimFilename >::value_type const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_front" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (std::vector< ossimFilename >::value_type *) &((std::vector< ossimFilename > const *)arg1)->front();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_back" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = (std::vector< ossimFilename >::value_type *) &((std::vector< ossimFilename > const *)arg1)->back();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::size_type arg2 ;
  std::vector< ossimFilename >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_assign" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName_assign" "', argument " "2"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorOssimFileName_assign" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_assign" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< ossimFilename >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::size_type arg2 ;
  std::vector< ossimFilename >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_resize" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName_resize" "', argument " "2"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorOssimFileName_resize" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_resize" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< ossimFilename >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorOssimFileName_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimFilename, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorOssimFileName_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::resize(std::vector< ossimFilename >::size_type)\n"
    "    std::vector< ossimFilename >::resize(std::vector< ossimFilename >::size_type,std::vector< ossimFilename >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::iterator arg2 ;
  std::vector< ossimFilename >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ossimFilename >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorOssimFileName_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_insert" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_insert" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_insert" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorOssimFileName_insert" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_insert" "', argument " "3"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp3);
  {
    try
    {
      result = (arg1)->insert(arg2,(std::vector< ossimFilename >::value_type const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ossimFilename >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::iterator arg2 ;
  std::vector< ossimFilename >::size_type arg3 ;
  std::vector< ossimFilename >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorOssimFileName_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_insert" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_insert" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorOssimFileName_insert" "', argument " "2"" of type '" "std::vector< ossimFilename >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorOssimFileName_insert" "', argument " "3"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ossimFilename >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorOssimFileName_insert" "', argument " "4"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorOssimFileName_insert" "', argument " "4"" of type '" "std::vector< ossimFilename >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ossimFilename >::value_type * >(argp4);
  {
    try
    {
      (arg1)->insert(arg2,arg3,(std::vector< ossimFilename >::value_type const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimFilename, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorOssimFileName_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ossimFilename >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ossimFilename, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorOssimFileName_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorOssimFileName_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ossimFilename >::insert(std::vector< ossimFilename >::iterator,std::vector< ossimFilename >::value_type const &)\n"
    "    std::vector< ossimFilename >::insert(std::vector< ossimFilename >::iterator,std::vector< ossimFilename >::size_type,std::vector< ossimFilename >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  std::vector< ossimFilename >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorOssimFileName_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_reserve" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorOssimFileName_reserve" "', argument " "2"" of type '" "std::vector< ossimFilename >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ossimFilename >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorOssimFileName_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorOssimFileName_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorOssimFileName_capacity" "', argument " "1"" of type '" "std::vector< ossimFilename > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      result = ((std::vector< ossimFilename > const *)arg1)->capacity();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorOssimFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename > *arg1 = (std::vector< ossimFilename > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorOssimFileName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorOssimFileName" "', argument " "1"" of type '" "std::vector< ossimFilename > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimFilename > * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorOssimFileName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimGeneralRasterInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeneralRasterInfo")) SWIG_fail;
  {
    try
    {
      result = (ossimGeneralRasterInfo *)new ossimGeneralRasterInfo();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeneralRasterInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg1 = 0 ;
  ossimScalarType arg2 ;
  ossimInterleaveType arg3 ;
  ossim_uint32 arg4 ;
  ossim_uint32 arg5 ;
  ossim_uint32 arg6 ;
  ossim_uint32 arg7 ;
  ossimGeneralRasterInfo::ossimFillMode arg8 ;
  ossim_uint32 arg9 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  unsigned int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  ossimGeneralRasterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_ossimGeneralRasterInfo",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    std::vector<ossimFilename,std::allocator< ossimFilename > > *ptr = (std::vector<ossimFilename,std::allocator< ossimFilename > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeneralRasterInfo" "', argument " "2"" of type '" "ossimScalarType""'");
  } 
  arg2 = static_cast< ossimScalarType >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeneralRasterInfo" "', argument " "3"" of type '" "ossimInterleaveType""'");
  } 
  arg3 = static_cast< ossimInterleaveType >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeneralRasterInfo" "', argument " "4"" of type '" "ossim_uint32""'");
  } 
  arg4 = static_cast< ossim_uint32 >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeneralRasterInfo" "', argument " "5"" of type '" "ossim_uint32""'");
  } 
  arg5 = static_cast< ossim_uint32 >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimGeneralRasterInfo" "', argument " "6"" of type '" "ossim_uint32""'");
  } 
  arg6 = static_cast< ossim_uint32 >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ossimGeneralRasterInfo" "', argument " "7"" of type '" "ossim_uint32""'");
  } 
  arg7 = static_cast< ossim_uint32 >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ossimGeneralRasterInfo" "', argument " "8"" of type '" "ossimGeneralRasterInfo::ossimFillMode""'");
  } 
  arg8 = static_cast< ossimGeneralRasterInfo::ossimFillMode >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ossimGeneralRasterInfo" "', argument " "9"" of type '" "ossim_uint32""'");
  } 
  arg9 = static_cast< ossim_uint32 >(val9);
  {
    try
    {
      result = (ossimGeneralRasterInfo *)new ossimGeneralRasterInfo((std::vector< ossimFilename,std::allocator< ossimFilename > > const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeneralRasterInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimKeywordlist *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeneralRasterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimGeneralRasterInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg1 = reinterpret_cast< ossimKeywordlist * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeneralRasterInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try
    {
      result = (ossimGeneralRasterInfo *)new ossimGeneralRasterInfo((ossimKeywordlist const &)*arg1,(char const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeneralRasterInfo__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimKeywordlist *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeneralRasterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeneralRasterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeneralRasterInfo" "', argument " "1"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg1 = reinterpret_cast< ossimKeywordlist * >(argp1);
  {
    try
    {
      result = (ossimGeneralRasterInfo *)new ossimGeneralRasterInfo((ossimKeywordlist const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeneralRasterInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimGeneralRasterInfo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimKeywordlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeneralRasterInfo__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimKeywordlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimGeneralRasterInfo__SWIG_2(self, args);
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ossimFilename,std::allocator< ossimFilename > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_unsigned_SS_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_ossimGeneralRasterInfo__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimGeneralRasterInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeneralRasterInfo::ossimGeneralRasterInfo()\n"
    "    ossimGeneralRasterInfo::ossimGeneralRasterInfo(std::vector< ossimFilename,std::allocator< ossimFilename > > const &,ossimScalarType,ossimInterleaveType,ossim_uint32,ossim_uint32,ossim_uint32,ossim_uint32,ossimGeneralRasterInfo::ossimFillMode,ossim_uint32)\n"
    "    ossimGeneralRasterInfo::ossimGeneralRasterInfo(ossimKeywordlist const &,char const *)\n"
    "    ossimGeneralRasterInfo::ossimGeneralRasterInfo(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeneralRasterInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeneralRasterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeneralRasterInfo" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_imageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_imageRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_imageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = ((ossimGeneralRasterInfo const *)arg1)->imageRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_validImageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_validImageRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_validImageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = ((ossimGeneralRasterInfo const *)arg1)->validImageRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_rawImageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_rawImageRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_rawImageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = ((ossimGeneralRasterInfo const *)arg1)->rawImageRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_subImageOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_subImageOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_subImageOffset" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = ((ossimGeneralRasterInfo const *)arg1)->subImageOffset();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_headerSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_headerSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_headerSize" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->headerSize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_fillToNullsMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_fillToNullsMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_fillToNullsMode" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->fillToNullsMode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setFillToNullsMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setFillToNullsMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setFillToNullsMode" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setFillToNullsMode" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setFillToNullsMode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setMinPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeneralRasterInfo_setMinPixelValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setMinPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setMinPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeneralRasterInfo_setMinPixelValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setMinPixelValue(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getMinPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_getMinPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getMinPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_getMinPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimGeneralRasterInfo const *)arg1)->getMinPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setMaxPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeneralRasterInfo_setMaxPixelValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setMaxPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setMaxPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeneralRasterInfo_setMaxPixelValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setMaxPixelValue(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getMaxPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_getMaxPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getMaxPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_getMaxPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimGeneralRasterInfo const *)arg1)->getMaxPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setNullPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeneralRasterInfo_setNullPixelValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setNullPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setNullPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeneralRasterInfo_setNullPixelValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setNullPixelValue(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getNullPixelValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_getNullPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getNullPixelValue" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_getNullPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimGeneralRasterInfo const *)arg1)->getNullPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setNumberOfBands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setNumberOfBands",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setNumberOfBands" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setNumberOfBands" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setNumberOfBands(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_pixelsToChop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_pixelsToChop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_pixelsToChop" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->pixelsToChop();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_numberOfBands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_numberOfBands",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_numberOfBands" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->numberOfBands();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_interleaveType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimInterleaveType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_interleaveType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_interleaveType" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossimInterleaveType)((ossimGeneralRasterInfo const *)arg1)->interleaveType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getScalarType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimScalarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_getScalarType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getScalarType" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossimScalarType)((ossimGeneralRasterInfo const *)arg1)->getScalarType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_validLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_validLines",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_validLines" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->validLines();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_rawLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_rawLines",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_rawLines" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->rawLines();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_bytesPerRawLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_bytesPerRawLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_bytesPerRawLine" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->bytesPerRawLine();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_bytesPerValidLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_bytesPerValidLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_bytesPerValidLine" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->bytesPerValidLine();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_validSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_validSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_validSamples" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->validSamples();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_rawSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_rawSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_rawSamples" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->rawSamples();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_offsetToFirstValidSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_offsetToFirstValidSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_offsetToFirstValidSample" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint64)((ossimGeneralRasterInfo const *)arg1)->offsetToFirstValidSample();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getImageFileList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_getImageFileList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getImageFileList" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = ((ossimGeneralRasterInfo const *)arg1)->getImageFileList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<ossimFilename,std::allocator< ossimFilename > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setImageFileList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setImageFileList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setImageFileList" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    std::vector<ossimFilename,std::allocator< ossimFilename > > *ptr = (std::vector<ossimFilename,std::allocator< ossimFilename > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_setImageFileList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_setImageFileList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->setImageFileList((std::vector< ossimFilename,std::allocator< ossimFilename > > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setHeaderSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setHeaderSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setHeaderSize" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setHeaderSize" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setHeaderSize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setInterleaveType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimInterleaveType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setInterleaveType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setInterleaveType" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setInterleaveType" "', argument " "2"" of type '" "ossimInterleaveType""'");
  } 
  arg2 = static_cast< ossimInterleaveType >(val2);
  {
    try
    {
      (arg1)->setInterleaveType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_ossimGeneralRasterInfo_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_ossimGeneralRasterInfo_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_ossimGeneralRasterInfo_print" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_ossimGeneralRasterInfo_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_ossimGeneralRasterInfo_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimGeneralRasterInfo const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setImageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setImageRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setImageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_setImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_setImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      (arg1)->setImageRect((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setValidImageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setValidImageRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setValidImageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_setValidImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_setValidImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      (arg1)->setValidImageRect((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setRawImageRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setRawImageRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setRawImageRect" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_setRawImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_setRawImageRect" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      (arg1)->setRawImageRect((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setSubImageOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setSubImageOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setSubImageOffset" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_setSubImageOffset" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_setSubImageOffset" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->setSubImageOffset((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_bytesPerPixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimScalarType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_bytesPerPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_bytesPerPixel" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_bytesPerPixel" "', argument " "2"" of type '" "ossimScalarType""'");
  } 
  arg2 = static_cast< ossimScalarType >(val2);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->bytesPerPixel(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_bytesPerPixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_bytesPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_bytesPerPixel" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimGeneralRasterInfo const *)arg1)->bytesPerPixel();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_bytesPerPixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimGeneralRasterInfo_bytesPerPixel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimGeneralRasterInfo_bytesPerPixel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeneralRasterInfo_bytesPerPixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeneralRasterInfo::bytesPerPixel(ossimScalarType) const\n"
    "    ossimGeneralRasterInfo::bytesPerPixel() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_getImageDataByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeneralRasterInfo_getImageDataByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_getImageDataByteOrder" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  {
    try
    {
      result = (ossimByteOrder)((ossimGeneralRasterInfo const *)arg1)->getImageDataByteOrder();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_setImageDataByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_setImageDataByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_setImageDataByteOrder" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeneralRasterInfo_setImageDataByteOrder" "', argument " "2"" of type '" "ossimByteOrder""'");
  } 
  arg2 = static_cast< ossimByteOrder >(val2);
  {
    try
    {
      (arg1)->setImageDataByteOrder(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeneralRasterInfo_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimGeneralRasterInfo const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "1"" of type '" "ossimGeneralRasterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimGeneralRasterInfo const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeneralRasterInfo_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimGeneralRasterInfo_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeneralRasterInfo_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeneralRasterInfo::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimGeneralRasterInfo::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeneralRasterInfo_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeneralRasterInfo *arg1 = (ossimGeneralRasterInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeneralRasterInfo_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeneralRasterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "1"" of type '" "ossimGeneralRasterInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeneralRasterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeneralRasterInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeneralRasterInfo_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimGeneralRasterInfo_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimGeneralRasterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimGeneralRasterInfo_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimGeneralRasterInfo_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeneralRasterInfo::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimGeneralRasterInfo::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimGeneralRasterInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeneralRasterInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimGeoAnnotationMultiEllipseObject")) SWIG_fail;
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned char arg6 ;
  long arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned char arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  unsigned char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ossimGpt,std::allocator< ossimGpt > > *arg1 = 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "std::vector< ossimGpt,std::allocator< ossimGpt > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ossimGpt,std::allocator< ossimGpt > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((std::vector< ossimGpt,std::allocator< ossimGpt > > const &)*arg1,(ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  long arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "6"" of type '" "long""'");
  } 
  arg6 = static_cast< long >(val6);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimGeoAnnotationMultiEllipseObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimDpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimDpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimDpt * >(argp1);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimDpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoAnnotationMultiEllipseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimGeoAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      result = (ossimGeoAnnotationMultiEllipseObject *)new ossimGeoAnnotationMultiEllipseObject((ossimGeoAnnotationMultiEllipseObject const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimGeoAnnotationMultiEllipseObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_12(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_13(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimDpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_long(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ossimGeoAnnotationMultiEllipseObject__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimGeoAnnotationMultiEllipseObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject()\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char,unsigned char,long)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &,bool,unsigned char,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &,bool,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &,bool)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(std::vector< ossimGpt,std::allocator< ossimGpt > > const &,ossimDpt const &)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char,unsigned char,long)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &,bool,unsigned char)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &,bool)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimDpt const &)\n"
    "    ossimGeoAnnotationMultiEllipseObject::ossimGeoAnnotationMultiEllipseObject(ossimGeoAnnotationMultiEllipseObject const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_dup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoAnnotationMultiEllipseObject_dup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_dup" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      result = (ossimObject *)((ossimGeoAnnotationMultiEllipseObject const *)arg1)->dup();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_getNewClippedObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimAnnotationObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_getNewClippedObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_getNewClippedObject" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (ossimAnnotationObject *)((ossimGeoAnnotationMultiEllipseObject const *)arg1)->getNewClippedObject((ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimAnnotationObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimImageGeometry *arg2 = (ossimImageGeometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_transform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_transform" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageGeometry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_transform" "', argument " "2"" of type '" "ossimImageGeometry *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageGeometry * >(argp2);
  {
    try
    {
      (arg1)->transform(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_applyScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoAnnotationMultiEllipseObject_applyScale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_applyScale" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_applyScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoAnnotationMultiEllipseObject_applyScale" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->applyScale(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimRgbImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_draw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_draw" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbImage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_draw" "', argument " "2"" of type '" "ossimRgbImage &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_draw" "', argument " "2"" of type '" "ossimRgbImage &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbImage * >(argp2);
  {
    try
    {
      ((ossimGeoAnnotationMultiEllipseObject const *)arg1)->draw(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_intersects" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_intersects" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_intersects" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (bool)((ossimGeoAnnotationMultiEllipseObject const *)arg1)->intersects((ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_addPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_addPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_addPoint" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_addPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_addPoint" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      (arg1)->addPoint((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_setColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimGeoAnnotationMultiEllipseObject_setColor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_setColor" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_setColor" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimGeoAnnotationMultiEllipseObject_setColor" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimGeoAnnotationMultiEllipseObject_setColor" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  {
    try
    {
      (arg1)->setColor(arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_setThickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossim_uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_setThickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_setThickness" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_setThickness" "', argument " "2"" of type '" "ossim_uint8""'");
  } 
  arg2 = static_cast< ossim_uint8 >(val2);
  {
    try
    {
      (arg1)->setThickness(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_setPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  int arg2 ;
  ossimGpt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimGeoAnnotationMultiEllipseObject_setPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_setPoint" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_setPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimGeoAnnotationMultiEllipseObject_setPoint" "', argument " "3"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_setPoint" "', argument " "3"" of type '" "ossimGpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimGpt * >(argp3);
  {
    try
    {
      (arg1)->setPoint(arg2,(ossimGpt const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_setWidthHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_setWidthHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_setWidthHeight" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_setWidthHeight" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_setWidthHeight" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setWidthHeight((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_resize" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_resize" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_setFillFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_setFillFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_setFillFlag" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimGeoAnnotationMultiEllipseObject_setFillFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setFillFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimGeoAnnotationMultiEllipseObject const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_getBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimGeoAnnotationMultiEllipseObject_getBoundingRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_getBoundingRect" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject const *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimGeoAnnotationMultiEllipseObject_getBoundingRect" "', argument " "2"" of type '" "ossimDrect &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimGeoAnnotationMultiEllipseObject_getBoundingRect" "', argument " "2"" of type '" "ossimDrect &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      ((ossimGeoAnnotationMultiEllipseObject const *)arg1)->getBoundingRect(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimGeoAnnotationMultiEllipseObject_computeBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGeoAnnotationMultiEllipseObject_computeBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGeoAnnotationMultiEllipseObject_computeBoundingRect" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      (arg1)->computeBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGeoAnnotationMultiEllipseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGeoAnnotationMultiEllipseObject *arg1 = (ossimGeoAnnotationMultiEllipseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGeoAnnotationMultiEllipseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGeoAnnotationMultiEllipseObject" "', argument " "1"" of type '" "ossimGeoAnnotationMultiEllipseObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimGeoAnnotationMultiEllipseObject * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGeoAnnotationMultiEllipseObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGeoAnnotationMultiEllipseObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimGridRemapEngineFactory_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGridRemapEngine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimGridRemapEngineFactory_create",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimGridRemapEngineFactory_create" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try
    {
      result = (ossimGridRemapEngine *)ossimGridRemapEngineFactory::create((char const *)arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGridRemapEngine, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimGridRemapEngineFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGridRemapEngineFactory *arg1 = (ossimGridRemapEngineFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimGridRemapEngineFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimGridRemapEngineFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimGridRemapEngineFactory" "', argument " "1"" of type '" "ossimGridRemapEngineFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimGridRemapEngineFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimGridRemapEngineFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimGridRemapEngineFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimHistoMatchRemapper")) SWIG_fail;
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSource *arg1 = (ossimImageSource *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimHistoMatchRemapper",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimHistoMatchRemapper" "', argument " "1"" of type '" "ossimImageSource *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimHistoMatchRemapper" "', argument " "4"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "4"" of type '" "std::vector< double > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimHistoMatchRemapper" "', argument " "5"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "5"" of type '" "std::vector< double > const &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double > * >(argp5);
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper(arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSource *arg1 = (ossimImageSource *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimHistoMatchRemapper",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimHistoMatchRemapper" "', argument " "1"" of type '" "ossimImageSource *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimHistoMatchRemapper" "', argument " "4"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "4"" of type '" "std::vector< double > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double > * >(argp4);
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper(arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSource *arg1 = (ossimImageSource *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimHistoMatchRemapper",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimHistoMatchRemapper" "', argument " "1"" of type '" "ossimImageSource *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "3"" of type '" "std::vector< double > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double > * >(argp3);
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper(arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSource *arg1 = (ossimImageSource *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimHistoMatchRemapper",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimHistoMatchRemapper" "', argument " "1"" of type '" "ossimImageSource *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimHistoMatchRemapper" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper(arg1,(std::vector< double > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSource *arg1 = (ossimImageSource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimHistoMatchRemapper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimHistoMatchRemapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimHistoMatchRemapper" "', argument " "1"" of type '" "ossimImageSource *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSource * >(argp1);
  {
    try
    {
      result = (ossimHistoMatchRemapper *)new ossimHistoMatchRemapper(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimHistoMatchRemapper(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimHistoMatchRemapper__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSource, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimHistoMatchRemapper__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSource, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimHistoMatchRemapper__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSource, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ossimHistoMatchRemapper__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSource, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimHistoMatchRemapper__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSource, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ossimHistoMatchRemapper__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimHistoMatchRemapper'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper()\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper(ossimImageSource *,std::vector< double > const &,std::vector< double > const &,std::vector< double > const &,std::vector< double > const &)\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper(ossimImageSource *,std::vector< double > const &,std::vector< double > const &,std::vector< double > const &)\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper(ossimImageSource *,std::vector< double > const &,std::vector< double > const &)\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper(ossimImageSource *,std::vector< double > const &)\n"
    "    ossimHistoMatchRemapper::ossimHistoMatchRemapper(ossimImageSource *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getTile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimIrect *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimHistoMatchRemapper_getTile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getTile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_getTile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getTile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimHistoMatchRemapper_getTile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimHistoMatchRemapper_getTile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimHistoMatchRemapper_getTile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimHistoMatchRemapper::getTile(ossimIrect const &,ossim_uint32)\n"
    "    ossimHistoMatchRemapper::getTile(ossimIrect const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimHistoMatchRemapper_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_initialize" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getInputMeanValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimHistoMatchRemapper_getInputMeanValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getInputMeanValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper const *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  {
    try
    {
      result = (std::vector< double > *) &((ossimHistoMatchRemapper const *)arg1)->getInputMeanValues();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getInputSigmaValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimHistoMatchRemapper_getInputSigmaValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getInputSigmaValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper const *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  {
    try
    {
      result = (std::vector< double > *) &((ossimHistoMatchRemapper const *)arg1)->getInputSigmaValues();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getTargetMeanValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimHistoMatchRemapper_getTargetMeanValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getTargetMeanValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper const *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  {
    try
    {
      result = (std::vector< double > *) &((ossimHistoMatchRemapper const *)arg1)->getTargetMeanValues();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_getTargetSigmaValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimHistoMatchRemapper_getTargetSigmaValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_getTargetSigmaValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper const *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  {
    try
    {
      result = (std::vector< double > *) &((ossimHistoMatchRemapper const *)arg1)->getTargetSigmaValues();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_setInputMeanValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_setInputMeanValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_setInputMeanValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_setInputMeanValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_setInputMeanValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try
    {
      (arg1)->setInputMeanValues((std::vector< double > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_setInputSigmaValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_setInputSigmaValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_setInputSigmaValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_setInputSigmaValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_setInputSigmaValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try
    {
      (arg1)->setInputSigmaValues((std::vector< double > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_setTargetMeanValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_setTargetMeanValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_setTargetMeanValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_setTargetMeanValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_setTargetMeanValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try
    {
      (arg1)->setTargetMeanValues((std::vector< double > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_setTargetSigmaValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_setTargetSigmaValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_setTargetSigmaValues" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_setTargetSigmaValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_setTargetSigmaValues" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try
    {
      (arg1)->setTargetSigmaValues((std::vector< double > const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimHistoMatchRemapper_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimHistoMatchRemapper_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimHistoMatchRemapper_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimHistoMatchRemapper_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimHistoMatchRemapper::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimHistoMatchRemapper::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimHistoMatchRemapper_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimHistoMatchRemapper *arg1 = (ossimHistoMatchRemapper *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimHistoMatchRemapper_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimHistoMatchRemapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "1"" of type '" "ossimHistoMatchRemapper *""'"); 
  }
  arg1 = reinterpret_cast< ossimHistoMatchRemapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimHistoMatchRemapper_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimHistoMatchRemapper_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimHistoMatchRemapper_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimHistoMatchRemapper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimHistoMatchRemapper_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimHistoMatchRemapper_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimHistoMatchRemapper::saveState(ossimKeywordlist &,char const *)\n"
    "    ossimHistoMatchRemapper::saveState(ossimKeywordlist &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimHistoMatchRemapper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimHistoMatchRemapper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimIgenGenerator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimConnectableObject *arg1 = (ossimConnectableObject *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimObject *arg3 = (ossimObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimIgenGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ossimIgenGenerator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIgenGenerator" "', argument " "1"" of type '" "ossimConnectableObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimConnectableObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIgenGenerator" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimIgenGenerator" "', argument " "3"" of type '" "ossimObject *""'"); 
  }
  arg3 = reinterpret_cast< ossimObject * >(argp3);
  {
    try
    {
      result = (ossimIgenGenerator *)new ossimIgenGenerator(arg1,arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIgenGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIgenGenerator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimConnectableObject *arg1 = (ossimConnectableObject *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIgenGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimIgenGenerator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIgenGenerator" "', argument " "1"" of type '" "ossimConnectableObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimConnectableObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimIgenGenerator" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (ossimIgenGenerator *)new ossimIgenGenerator(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIgenGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIgenGenerator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimConnectableObject *arg1 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIgenGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimIgenGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimIgenGenerator" "', argument " "1"" of type '" "ossimConnectableObject *""'"); 
  }
  arg1 = reinterpret_cast< ossimConnectableObject * >(argp1);
  {
    try
    {
      result = (ossimIgenGenerator *)new ossimIgenGenerator(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIgenGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIgenGenerator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimIgenGenerator")) SWIG_fail;
  {
    try
    {
      result = (ossimIgenGenerator *)new ossimIgenGenerator();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimIgenGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimIgenGenerator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimIgenGenerator__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimIgenGenerator__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimIgenGenerator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimObject, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ossimIgenGenerator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimIgenGenerator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::ossimIgenGenerator(ossimConnectableObject *,ossimConnectableObject *,ossimObject *)\n"
    "    ossimIgenGenerator::ossimIgenGenerator(ossimConnectableObject *,ossimConnectableObject *)\n"
    "    ossimIgenGenerator::ossimIgenGenerator(ossimConnectableObject *)\n"
    "    ossimIgenGenerator::ossimIgenGenerator()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimIgenGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimIgenGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimIgenGenerator" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setOutput" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      (arg1)->setOutput(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setOutput" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      (arg1)->setOutput((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setInput" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setInput" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      (arg1)->setInput(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setView__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimObject *arg2 = (ossimObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setView" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setView" "', argument " "2"" of type '" "ossimObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimObject * >(argp2);
  {
    try
    {
      (arg1)->setView(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_generateSpecList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_generateSpecList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_generateSpecList" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_generateSpecList" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->generateSpecList(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_generateSpecList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_generateSpecList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_generateSpecList" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      (arg1)->generateSpecList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_generateSpecList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimIgenGenerator_generateSpecList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIgenGenerator_generateSpecList__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_generateSpecList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::generateSpecList(bool)\n"
    "    ossimIgenGenerator::generateSpecList()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getImageFilenamesFromSpecList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  std::vector< ossimFilename,std::allocator< ossimFilename > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getImageFilenamesFromSpecList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getImageFilenamesFromSpecList" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getImageFilenamesFromSpecList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getImageFilenamesFromSpecList" "', argument " "2"" of type '" "std::vector< ossimFilename,std::allocator< ossimFilename > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimFilename,std::allocator< ossimFilename > > * >(argp2);
  {
    try
    {
      (arg1)->getImageFilenamesFromSpecList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getBoundingGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getBoundingGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getBoundingGround" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->getBoundingGround();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGrect(static_cast< const ossimGrect& >(result))), SWIGTYPE_p_ossimGrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_executeSpecList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_executeSpecList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_executeSpecList" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      (arg1)->executeSpecList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setIteratorsToStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_setIteratorsToStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setIteratorsToStart" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      (arg1)->setIteratorsToStart();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_nextSpecFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_nextSpecFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_nextSpecFile" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_nextSpecFile" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_nextSpecFile" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->nextSpecFile(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpecs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  std::vector< ossimKeywordlist > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getSpecs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpecs" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getSpecs" "', argument " "2"" of type '" "std::vector< ossimKeywordlist > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getSpecs" "', argument " "2"" of type '" "std::vector< ossimKeywordlist > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimKeywordlist > * >(argp2);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getSpecs(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getNumberOfSpecFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getNumberOfSpecFiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getNumberOfSpecFiles" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimIgenGenerator const *)arg1)->getNumberOfSpecFiles();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpecFilename__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getSpecFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpecFilename" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_getSpecFilename" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->getSpecFilename(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpecFilename__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getSpecFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpecFilename" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->getSpecFilename();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpecFilename(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimIgenGenerator_getSpecFilename__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIgenGenerator_getSpecFilename__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getSpecFilename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getSpecFilename(ossim_uint32) const\n"
    "    ossimIgenGenerator::getSpecFilename() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_buildExe__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_buildExe",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_buildExe" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_buildExe" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->buildExe(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_buildExe__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_buildExe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_buildExe" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->buildExe();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimFilename(static_cast< const ossimFilename& >(result))), SWIGTYPE_p_ossimFilename, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_buildExe(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimIgenGenerator_buildExe__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimIgenGenerator_buildExe__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_buildExe'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::buildExe(ossim_uint32) const\n"
    "    ossimIgenGenerator::buildExe() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_getSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpec" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getSpec" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getSpec" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimIgenGenerator_getSpec" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      (arg1)->getSpec(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getSpec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpec" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getSpec" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getSpec" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      (arg1)->getSpec(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_getSpec__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimIgenGenerator_getSpec__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getSpec(ossimKeywordlist &,ossim_uint32)\n"
    "    ossimIgenGenerator::getSpec(ossimKeywordlist &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_getInput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getInput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getInput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getInput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIgenGenerator_getInput" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getInput(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getInput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getInput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getInput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getInput(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getInput(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_getInput__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIgenGenerator_getInput__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getInput(ossimKeywordlist &,char const *) const\n"
    "    ossimIgenGenerator::getInput(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_getOutput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getOutput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIgenGenerator_getOutput" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getOutput(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getOutput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getOutput(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutput(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_getOutput__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIgenGenerator_getOutput__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getOutput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getOutput(ossimKeywordlist &,char const *) const\n"
    "    ossimIgenGenerator::getOutput(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getView__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_getView",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getView" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIgenGenerator_getView" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getView(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getView" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getView(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getView(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_getView__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIgenGenerator_getView__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getView(ossimKeywordlist &,char const *) const\n"
    "    ossimIgenGenerator::getView(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_setView",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setView" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIgenGenerator_setView" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      (arg1)->setView(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setView__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setView" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setView" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      (arg1)->setView(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setView(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_setView__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_setView__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIgenGenerator_setView__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_setView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::setView(ossimObject *)\n"
    "    ossimIgenGenerator::setView(ossimKeywordlist &,char const *)\n"
    "    ossimIgenGenerator::setView(ossimKeywordlist &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutput__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimIgenGenerator_setOutput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setOutput" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimIgenGenerator_setOutput" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      (arg1)->setOutput(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutput__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setOutput" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setOutput" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      (arg1)->setOutput(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutput(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_setOutput__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_setOutput__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_setOutput__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimIgenGenerator_setOutput__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_setOutput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::setOutput(ossimConnectableObject *)\n"
    "    ossimIgenGenerator::setOutput(ossimKeywordlist const &)\n"
    "    ossimIgenGenerator::setOutput(ossimKeywordlist &,char const *)\n"
    "    ossimIgenGenerator::setOutput(ossimKeywordlist &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setSpecFileLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setSpecFileLocation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setSpecFileLocation" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setSpecFileLocation" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setSpecFileLocation" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->setSpecFileLocation((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getSpecFileLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getSpecFileLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getSpecFileLocation" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimFilename *) &((ossimIgenGenerator const *)arg1)->getSpecFileLocation();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setIgenExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setIgenExecutable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setIgenExecutable" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setIgenExecutable" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setIgenExecutable" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->setIgenExecutable((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getIgenExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimFilename *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getIgenExecutable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getIgenExecutable" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimFilename *) &((ossimIgenGenerator const *)arg1)->getIgenExecutable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFilename, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setOutputPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setOutputPolygon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setOutputPolygon" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setOutputPolygon" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setOutputPolygon" "', argument " "2"" of type '" "ossimGeoPolygon const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  {
    try
    {
      (arg1)->setOutputPolygon((ossimGeoPolygon const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimPixelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setPixelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setPixelType" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_setPixelType" "', argument " "2"" of type '" "ossimPixelType""'");
  } 
  arg2 = static_cast< ossimPixelType >(val2);
  {
    try
    {
      (arg1)->setPixelType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutputGeoPolygon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimGeoPolygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_getOutputGeoPolygon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getOutputGeoPolygon" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGeoPolygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_getOutputGeoPolygon" "', argument " "2"" of type '" "ossimGeoPolygon &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_getOutputGeoPolygon" "', argument " "2"" of type '" "ossimGeoPolygon &""'"); 
  }
  arg2 = reinterpret_cast< ossimGeoPolygon * >(argp2);
  {
    try
    {
      ((ossimIgenGenerator const *)arg1)->getOutputGeoPolygon(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutputGeoPolygon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGeoPolygon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getOutputGeoPolygon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getOutputGeoPolygon" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimGeoPolygon *) &((ossimIgenGenerator const *)arg1)->getOutputGeoPolygon();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGeoPolygon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getOutputGeoPolygon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimIgenGenerator_getOutputGeoPolygon__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimIgenGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimGeoPolygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimIgenGenerator_getOutputGeoPolygon__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimIgenGenerator_getOutputGeoPolygon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimIgenGenerator::getOutputGeoPolygon(ossimGeoPolygon &) const\n"
    "    ossimIgenGenerator::getOutputGeoPolygon() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTilingFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTilingFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTilingFlag" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_setTilingFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setTilingFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTileSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTileSpacing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTileSpacing" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setTileSpacing" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setTileSpacing" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setTileSpacing((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTilePadding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimDpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTilePadding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTilePadding" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setTilePadding" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setTilePadding" "', argument " "2"" of type '" "ossimDpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDpt * >(argp2);
  {
    try
    {
      (arg1)->setTilePadding((ossimDpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTileSpacingUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimUnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTileSpacingUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTileSpacingUnits" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_setTileSpacingUnits" "', argument " "2"" of type '" "ossimUnitType""'");
  } 
  arg2 = static_cast< ossimUnitType >(val2);
  {
    try
    {
      (arg1)->setTileSpacingUnits(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTilePaddingUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimUnitType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTilePaddingUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTilePaddingUnits" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimIgenGenerator_setTilePaddingUnits" "', argument " "2"" of type '" "ossimUnitType""'");
  } 
  arg2 = static_cast< ossimUnitType >(val2);
  {
    try
    {
      (arg1)->setTilePaddingUnits(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTilingFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTilingFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTilingFlag" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (bool)((ossimIgenGenerator const *)arg1)->getTilingFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTileSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTileSpacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTileSpacing" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimIgenGenerator const *)arg1)->getTileSpacing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTilePadding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTilePadding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTilePadding" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimDpt *) &((ossimIgenGenerator const *)arg1)->getTilePadding();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTileSpacingUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTileSpacingUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTileSpacingUnits" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimUnitType)((ossimIgenGenerator const *)arg1)->getTileSpacingUnits();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTilePaddingUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTilePaddingUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTilePaddingUnits" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimUnitType)((ossimIgenGenerator const *)arg1)->getTilePaddingUnits();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimPixelType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getPixelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getPixelType" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimPixelType)((ossimIgenGenerator const *)arg1)->getPixelType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_setTileNamingConvention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimIgenGenerator_setTileNamingConvention",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_setTileNamingConvention" "', argument " "1"" of type '" "ossimIgenGenerator *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimIgenGenerator_setTileNamingConvention" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimIgenGenerator_setTileNamingConvention" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setTileNamingConvention((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getTileNamingConvention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getTileNamingConvention",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getTileNamingConvention" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimIgenGenerator const *)arg1)->getTileNamingConvention();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_getInputBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_getInputBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_getInputBoundingRect" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = ((ossimIgenGenerator const *)arg1)->getInputBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_createProductProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_createProductProjection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_createProductProjection" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimProjection *)((ossimIgenGenerator const *)arg1)->createProductProjection();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_createOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_createOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_createOutput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimObject *)((ossimIgenGenerator const *)arg1)->createOutput();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimIgenGenerator_createInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimIgenGenerator *arg1 = (ossimIgenGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimIgenGenerator_createInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimIgenGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimIgenGenerator_createInput" "', argument " "1"" of type '" "ossimIgenGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimIgenGenerator * >(argp1);
  {
    try
    {
      result = (ossimObject *)((ossimIgenGenerator const *)arg1)->createInput();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimIgenGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimIgenGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimImageChain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimImageChain")) SWIG_fail;
  {
    try
    {
      result = (ossimImageChain *)new ossimImageChain();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageChain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageChain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageChain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageChain" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimConnectableObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain___getitem__" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain___getitem__" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimConnectableObject *)(arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getConnectableObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimConnectableObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getConnectableObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getConnectableObject" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getConnectableObject" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimConnectableObject *)(arg1)->getConnectableObject(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_indexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_indexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_indexOf" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_indexOf" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (ossim_int32)((ossimImageChain const *)arg1)->indexOf(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getFirstSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getFirstSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getFirstSource" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossimImageSource *)(arg1)->getFirstSource();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageSource, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getFirstObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getFirstObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getFirstObject" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossimObject *)(arg1)->getFirstObject();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getLastSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getLastSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getLastSource" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossimImageSource *)(arg1)->getLastSource();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageSource, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getLastObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getLastObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getLastObject" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossimObject *)(arg1)->getLastObject();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_addFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_addFirst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_addFirst" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_addFirst" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->addFirst(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_addLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_addLast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_addLast" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_addLast" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->addLast(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_deleteFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_deleteFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_deleteFirst" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->deleteFirst();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_deleteLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_deleteLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_deleteLast" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (bool)(arg1)->deleteLast();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertRight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimConnectableObject *arg3 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_insertRight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_insertRight" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_insertRight" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_insertRight" "', argument " "3"" of type '" "ossimConnectableObject *""'"); 
  }
  arg3 = reinterpret_cast< ossimConnectableObject * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->insertRight(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertRight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimId *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_insertRight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_insertRight" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_insertRight" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_insertRight" "', argument " "3"" of type '" "ossimId const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_insertRight" "', argument " "3"" of type '" "ossimId const &""'"); 
  }
  arg3 = reinterpret_cast< ossimId * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->insertRight(arg2,(ossimId const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertRight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_insertRight__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimId, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_insertRight__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_insertRight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::insertRight(ossimConnectableObject *,ossimConnectableObject *)\n"
    "    ossimImageChain::insertRight(ossimConnectableObject *,ossimId const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertLeft__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimId *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_insertLeft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_insertLeft" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_insertLeft" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_insertLeft" "', argument " "3"" of type '" "ossimId const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_insertLeft" "', argument " "3"" of type '" "ossimId const &""'"); 
  }
  arg3 = reinterpret_cast< ossimId * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->insertLeft(arg2,(ossimId const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertLeft__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimConnectableObject *arg3 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_insertLeft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_insertLeft" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_insertLeft" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_insertLeft" "', argument " "3"" of type '" "ossimConnectableObject *""'"); 
  }
  arg3 = reinterpret_cast< ossimConnectableObject * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->insertLeft(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_insertLeft(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimId, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_insertLeft__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_insertLeft__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_insertLeft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::insertLeft(ossimConnectableObject *,ossimId const &)\n"
    "    ossimImageChain::insertLeft(ossimConnectableObject *,ossimConnectableObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_replace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  ossimConnectableObject *arg3 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_replace" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_replace" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_replace" "', argument " "3"" of type '" "ossimConnectableObject *""'"); 
  }
  arg3 = reinterpret_cast< ossimConnectableObject * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->replace(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_add" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_add" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->add(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getTile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimIrect *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_getTile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getTile" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageChain_getTile" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getTile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getTile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getTile" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getTile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_getTile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimImageChain_getTile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getTile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getTile(ossimIrect const &,ossim_uint32)\n"
    "    ossimImageChain::getTile(ossimIrect const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfInputBands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getNumberOfInputBands",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNumberOfInputBands" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getNumberOfInputBands();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getOutputScalarType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimScalarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getOutputScalarType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getOutputScalarType" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossimScalarType)((ossimImageChain const *)arg1)->getOutputScalarType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNullPixelValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getNullPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNullPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getNullPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getNullPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNullPixelValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getNullPixelValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNullPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getNullPixelValue();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNullPixelValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimImageChain_getNullPixelValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimImageChain_getNullPixelValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getNullPixelValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getNullPixelValue(ossim_uint32) const\n"
    "    ossimImageChain::getNullPixelValue() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMinPixelValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getMinPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getMinPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getMinPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getMinPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMinPixelValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getMinPixelValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getMinPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getMinPixelValue();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMinPixelValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimImageChain_getMinPixelValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimImageChain_getMinPixelValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getMinPixelValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getMinPixelValue(ossim_uint32) const\n"
    "    ossimImageChain::getMinPixelValue() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMaxPixelValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getMaxPixelValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getMaxPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getMaxPixelValue" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getMaxPixelValue(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMaxPixelValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getMaxPixelValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getMaxPixelValue" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (double)((ossimImageChain const *)arg1)->getMaxPixelValue();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getMaxPixelValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimImageChain_getMaxPixelValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimImageChain_getMaxPixelValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getMaxPixelValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getMaxPixelValue(ossim_uint32) const\n"
    "    ossimImageChain::getMaxPixelValue() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getOutputBandList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossim_uint32,std::allocator< ossim_uint32 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getOutputBandList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getOutputBandList" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getOutputBandList" "', argument " "2"" of type '" "std::vector< ossim_uint32,std::allocator< ossim_uint32 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getOutputBandList" "', argument " "2"" of type '" "std::vector< ossim_uint32,std::allocator< ossim_uint32 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossim_uint32,std::allocator< ossim_uint32 > > * >(argp2);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getOutputBandList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getTileWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getTileWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getTileWidth" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getTileWidth();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getTileHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getTileHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getTileHeight" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getTileHeight();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getBoundingRect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getBoundingRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getBoundingRect" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getBoundingRect" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimImageChain const *)arg1)->getBoundingRect(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getBoundingRect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIrect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getBoundingRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getBoundingRect" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = ((ossimImageChain const *)arg1)->getBoundingRect();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIrect(static_cast< const ossimIrect& >(result))), SWIGTYPE_p_ossimIrect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getBoundingRect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimImageChain_getBoundingRect__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimImageChain_getBoundingRect__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getBoundingRect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getBoundingRect(ossim_uint32) const\n"
    "    ossimImageChain::getBoundingRect() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getValidImageVertices__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossimIpt > *arg2 = 0 ;
  ossimVertexOrdering arg3 ;
  ossim_uint32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageChain_getValidImageVertices",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimIpt > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "3"" of type '" "ossimVertexOrdering""'");
  } 
  arg3 = static_cast< ossimVertexOrdering >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "4"" of type '" "ossim_uint32""'");
  } 
  arg4 = static_cast< ossim_uint32 >(val4);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getValidImageVertices(*arg2,arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getValidImageVertices__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossimIpt > *arg2 = 0 ;
  ossimVertexOrdering arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_getValidImageVertices",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimIpt > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "3"" of type '" "ossimVertexOrdering""'");
  } 
  arg3 = static_cast< ossimVertexOrdering >(val3);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getValidImageVertices(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getValidImageVertices__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossimIpt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getValidImageVertices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getValidImageVertices" "', argument " "2"" of type '" "std::vector< ossimIpt > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimIpt > * >(argp2);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getValidImageVertices(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getValidImageVertices(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_getValidImageVertices__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimImageChain_getValidImageVertices__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageChain_getValidImageVertices__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getValidImageVertices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getValidImageVertices(std::vector< ossimIpt > &,ossimVertexOrdering,ossim_uint32) const\n"
    "    ossimImageChain::getValidImageVertices(std::vector< ossimIpt > &,ossimVertexOrdering) const\n"
    "    ossimImageChain::getValidImageVertices(std::vector< ossimIpt > &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getImageGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimRefPtr< ossimImageGeometry > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getImageGeometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getImageGeometry" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (arg1)->getImageGeometry();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageGeometry >(static_cast< const ossimRefPtr< ossimImageGeometry >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageGeometry_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getDecimationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_uint32 arg2 ;
  ossimDpt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_getDecimationFactor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getDecimationFactor" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getDecimationFactor" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimDpt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_getDecimationFactor" "', argument " "3"" of type '" "ossimDpt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getDecimationFactor" "', argument " "3"" of type '" "ossimDpt &""'"); 
  }
  arg3 = reinterpret_cast< ossimDpt * >(argp3);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getDecimationFactor(arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getDecimationFactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossimDpt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getDecimationFactors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getDecimationFactors" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getDecimationFactors" "', argument " "2"" of type '" "std::vector< ossimDpt > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getDecimationFactors" "', argument " "2"" of type '" "std::vector< ossimDpt > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimDpt > * >(argp2);
  {
    try
    {
      ((ossimImageChain const *)arg1)->getDecimationFactors(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfDecimationLevels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getNumberOfDecimationLevels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNumberOfDecimationLevels" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getNumberOfDecimationLevels();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_saveState" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimImageChain const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_saveState" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimImageChain const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimImageChain::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_loadState" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_loadState" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageChain_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimImageChain::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_initialize" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_enableSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_enableSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_enableSource" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      (arg1)->enableSource();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_disableSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_disableSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_disableSource" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      (arg1)->disableSource();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_canConnectMyInputTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossim_int32 arg2 ;
  ossimConnectableObject *arg3 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_canConnectMyInputTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_canConnectMyInputTo" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_canConnectMyInputTo" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageChain_canConnectMyInputTo" "', argument " "3"" of type '" "ossimConnectableObject const *""'"); 
  }
  arg3 = reinterpret_cast< ossimConnectableObject * >(argp3);
  {
    try
    {
      result = (bool)((ossimImageChain const *)arg1)->canConnectMyInputTo(arg2,(ossimConnectableObject const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_makeUniqueIds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_makeUniqueIds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_makeUniqueIds" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      (arg1)->makeUniqueIds();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfObjects__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_getNumberOfObjects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNumberOfObjects" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageChain_getNumberOfObjects" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getNumberOfObjects(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfObjects__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getNumberOfObjects",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNumberOfObjects" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getNumberOfObjects();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfObjects(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimImageChain_getNumberOfObjects__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimImageChain_getNumberOfObjects__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_getNumberOfObjects'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::getNumberOfObjects(bool) const\n"
    "    ossimImageChain::getNumberOfObjects() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getNumberOfSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageChain_getNumberOfSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getNumberOfSources" "', argument " "1"" of type '" "ossimImageChain const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageChain const *)arg1)->getNumberOfSources();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_addChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_addChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_addChild" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_addChild" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->addChild(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_removeChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectableObject *arg2 = (ossimConnectableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_removeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_removeChild" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_removeChild" "', argument " "2"" of type '" "ossimConnectableObject *""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectableObject * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->removeChild(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_removeChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimConnectableObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_removeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_removeChild" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_removeChild" "', argument " "2"" of type '" "ossimId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_removeChild" "', argument " "2"" of type '" "ossimId const &""'"); 
  }
  arg2 = reinterpret_cast< ossimId * >(argp2);
  {
    try
    {
      result = (ossimConnectableObject *)(arg1)->removeChild((ossimId const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimConnectableObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_removeChild(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimConnectableObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_removeChild__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageChain_removeChild__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageChain_removeChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageChain::removeChild(ossimConnectableObject *)\n"
    "    ossimImageChain::removeChild(ossimId const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_getChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  std::vector< ossimConnectableObject * > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageChain_getChildren",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_getChildren" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_getChildren" "', argument " "2"" of type '" "std::vector< ossimConnectableObject * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_getChildren" "', argument " "2"" of type '" "std::vector< ossimConnectableObject * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimConnectableObject * > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageChain_getChildren" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (arg1)->getChildren(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_disconnectInputEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectionEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_disconnectInputEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_disconnectInputEvent" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimConnectionEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_disconnectInputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_disconnectInputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectionEvent * >(argp2);
  {
    try
    {
      (arg1)->disconnectInputEvent(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_disconnectOutputEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectionEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_disconnectOutputEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_disconnectOutputEvent" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimConnectionEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_disconnectOutputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_disconnectOutputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectionEvent * >(argp2);
  {
    try
    {
      (arg1)->disconnectOutputEvent(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_connectInputEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectionEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_connectInputEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_connectInputEvent" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimConnectionEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_connectInputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_connectInputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectionEvent * >(argp2);
  {
    try
    {
      (arg1)->connectInputEvent(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_connectOutputEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimConnectionEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_connectOutputEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_connectOutputEvent" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimConnectionEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_connectOutputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_connectOutputEvent" "', argument " "2"" of type '" "ossimConnectionEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimConnectionEvent * >(argp2);
  {
    try
    {
      (arg1)->connectOutputEvent(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_objectDestructingEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimObjectDestructingEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_objectDestructingEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_objectDestructingEvent" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimObjectDestructingEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_objectDestructingEvent" "', argument " "2"" of type '" "ossimObjectDestructingEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_objectDestructingEvent" "', argument " "2"" of type '" "ossimObjectDestructingEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimObjectDestructingEvent * >(argp2);
  {
    try
    {
      (arg1)->objectDestructingEvent(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_propagateEventToOutputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_propagateEventToOutputs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_propagateEventToOutputs" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_propagateEventToOutputs" "', argument " "2"" of type '" "ossimEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_propagateEventToOutputs" "', argument " "2"" of type '" "ossimEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimEvent * >(argp2);
  {
    try
    {
      (arg1)->propagateEventToOutputs(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_propagateEventToInputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimEvent *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_propagateEventToInputs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_propagateEventToInputs" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimEvent,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_propagateEventToInputs" "', argument " "2"" of type '" "ossimEvent &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_propagateEventToInputs" "', argument " "2"" of type '" "ossimEvent &""'"); 
  }
  arg2 = reinterpret_cast< ossimEvent * >(argp2);
  {
    try
    {
      (arg1)->propagateEventToInputs(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageChain_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageChain *arg1 = (ossimImageChain *) 0 ;
  ossimVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageChain_accept",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageChain_accept" "', argument " "1"" of type '" "ossimImageChain *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageChain_accept" "', argument " "2"" of type '" "ossimVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageChain_accept" "', argument " "2"" of type '" "ossimVisitor &""'"); 
  }
  arg2 = reinterpret_cast< ossimVisitor * >(argp2);
  {
    try
    {
      (arg1)->accept(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageChain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageChain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimImageDataHelper__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageData *arg1 = (ossimImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageDataHelper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimImageDataHelper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimImageDataHelper" "', argument " "1"" of type '" "ossimImageData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageData * >(argp1);
  {
    try
    {
      result = (ossimImageDataHelper *)new ossimImageDataHelper(arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageDataHelper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageDataHelper__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimImageDataHelper")) SWIG_fail;
  {
    try
    {
      result = (ossimImageDataHelper *)new ossimImageDataHelper();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageDataHelper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageDataHelper(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimImageDataHelper__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimImageDataHelper__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimImageDataHelper'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageDataHelper::ossimImageDataHelper(ossimImageData *)\n"
    "    ossimImageDataHelper::ossimImageDataHelper()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_setImageData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimImageData *arg2 = (ossimImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageDataHelper_setImageData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_setImageData" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_setImageData" "', argument " "2"" of type '" "ossimImageData *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageData * >(argp2);
  {
    try
    {
      (arg1)->setImageData(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  ossimIrect *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIrect * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((double const *)arg2,(ossimIrect const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  ossimIrect *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIrect * >(argp3);
  {
    try
    {
      (arg1)->fill((double const *)arg2,(ossimIrect const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  std::vector< ossimPolygon,std::allocator< ossimPolygon > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimPolygon,std::allocator< ossimPolygon > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((double const *)arg2,*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  std::vector< ossimPolygon,std::allocator< ossimPolygon > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimPolygon,std::allocator< ossimPolygon > > * >(argp3);
  {
    try
    {
      (arg1)->fill((double const *)arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  std::vector< ossimPolygon,std::allocator< ossimPolygon > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimPolygon,std::allocator< ossimPolygon > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  std::vector< ossimPolygon,std::allocator< ossimPolygon > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "std::vector< ossimPolygon,std::allocator< ossimPolygon > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ossimPolygon,std::allocator< ossimPolygon > > * >(argp3);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  ossimIrect *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIrect * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,(ossimIrect const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  ossimIrect *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimIrect const &""'"); 
  }
  arg3 = reinterpret_cast< ossimIrect * >(argp3);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,(ossimIrect const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  ossimPolygon *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((double const *)arg2,(ossimPolygon const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  double *arg2 = (double *) 0 ;
  ossimPolygon *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  {
    try
    {
      (arg1)->fill((double const *)arg2,(ossimPolygon const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  ossimPolygon *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_fill" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,(ossimPolygon const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimRgbVector *arg2 = 0 ;
  ossimPolygon *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_fill" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRgbVector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "2"" of type '" "ossimRgbVector const &""'"); 
  }
  arg2 = reinterpret_cast< ossimRgbVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_fill" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  {
    try
    {
      (arg1)->fill((ossimRgbVector const &)*arg2,(ossimPolygon const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIrect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIrect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_9(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_fill__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIrect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimIrect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimRgbVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_fill__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageDataHelper_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageDataHelper::fill(double const *,ossimIrect const &,bool)\n"
    "    ossimImageDataHelper::fill(double const *,ossimIrect const &)\n"
    "    ossimImageDataHelper::fill(double const *,std::vector< ossimPolygon,std::allocator< ossimPolygon > > &,bool)\n"
    "    ossimImageDataHelper::fill(double const *,std::vector< ossimPolygon,std::allocator< ossimPolygon > > &)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,std::vector< ossimPolygon,std::allocator< ossimPolygon > > &,bool)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,std::vector< ossimPolygon,std::allocator< ossimPolygon > > &)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,ossimIrect const &,bool)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,ossimIrect const &)\n"
    "    ossimImageDataHelper::fill(double const *,ossimPolygon const &,bool)\n"
    "    ossimImageDataHelper::fill(double const *,ossimPolygon const &)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,ossimPolygon const &,bool)\n"
    "    ossimImageDataHelper::fill(ossimRgbVector const &,ossimPolygon const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_copyInputToThis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  void *arg2 = (void *) 0 ;
  ossimPolygon *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimImageDataHelper_copyInputToThis",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "2"" of type '" "void const *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      (arg1)->copyInputToThis((void const *)arg2,(ossimPolygon const &)*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_copyInputToThis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  void *arg2 = (void *) 0 ;
  ossimPolygon *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageDataHelper_copyInputToThis",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "2"" of type '" "void const *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimPolygon,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageDataHelper_copyInputToThis" "', argument " "3"" of type '" "ossimPolygon const &""'"); 
  }
  arg3 = reinterpret_cast< ossimPolygon * >(argp3);
  {
    try
    {
      (arg1)->copyInputToThis((void const *)arg2,(ossimPolygon const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_copyInputToThis(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageDataHelper_copyInputToThis__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageDataHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimPolygon, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimImageDataHelper_copyInputToThis__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageDataHelper_copyInputToThis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageDataHelper::copyInputToThis(void const *,ossimPolygon const &,bool)\n"
    "    ossimImageDataHelper::copyInputToThis(void const *,ossimPolygon const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_theImageData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  ossimImageData *arg2 = (ossimImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageDataHelper_theImageData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_theImageData_set" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageDataHelper_theImageData_set" "', argument " "2"" of type '" "ossimImageData *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageData * >(argp2);
  if (arg1) (arg1)->theImageData = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageDataHelper_theImageData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageDataHelper_theImageData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageDataHelper_theImageData_get" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  result = (ossimImageData *) ((arg1)->theImageData);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageDataHelper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageDataHelper *arg1 = (ossimImageDataHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageDataHelper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageDataHelper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageDataHelper" "', argument " "1"" of type '" "ossimImageDataHelper *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageDataHelper * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageDataHelper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageDataHelper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageGeometryFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimImageGeometryFactory *)ossimImageGeometryFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createGeometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageGeometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_createGeometry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageGeometry *)((ossimImageGeometryFactory const *)arg1)->createGeometry((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageGeometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createGeometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimImageGeometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageGeometryFactory_createGeometry",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimImageGeometry *)((ossimImageGeometryFactory const *)arg1)->createGeometry((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageGeometry, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createGeometry__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageGeometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_createGeometry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimImageGeometry *)((ossimImageGeometryFactory const *)arg1)->createGeometry((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageGeometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createGeometry__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimImageGeometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageGeometryFactory_createGeometry",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageGeometryFactory_createGeometry" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimImageGeometry *)((ossimImageGeometryFactory const *)arg1)->createGeometry((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageGeometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createGeometry(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageGeometryFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageGeometryFactory_createGeometry__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageGeometryFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageGeometryFactory_createGeometry__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageGeometryFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageGeometryFactory_createGeometry__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageGeometryFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimImageGeometryFactory_createGeometry__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageGeometryFactory_createGeometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageGeometryFactory::createGeometry(ossimString const &) const\n"
    "    ossimImageGeometryFactory::createGeometry(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageGeometryFactory::createGeometry(ossimKeywordlist const &) const\n"
    "    ossimImageGeometryFactory::createGeometry(ossimFilename const &,ossim_uint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_extendGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_extendGeometry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_extendGeometry" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_extendGeometry" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (bool)((ossimImageGeometryFactory const *)arg1)->extendGeometry(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_getTypeNameList" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageGeometryFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageGeometryFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim2dTo2dTransform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_createTransform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createTransform" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createTransform" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (ossim2dTo2dTransform *)((ossimImageGeometryFactory const *)arg1)->createTransform(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossim2dTo2dTransform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageGeometryFactory_createProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageGeometryFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageGeometryFactory_createProjection" "', argument " "1"" of type '" "ossimImageGeometryFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageGeometryFactory_createProjection" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimImageGeometryFactory const *)arg1)->createProjection(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageGeometryFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageGeometryFactory *arg1 = (ossimImageGeometryFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageGeometryFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageGeometryFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageGeometryFactory" "', argument " "1"" of type '" "ossimImageGeometryFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageGeometryFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageGeometryFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageGeometryFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimImageMetaData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimImageMetaData")) SWIG_fail;
  {
    try
    {
      result = (ossimImageMetaData *)new ossimImageMetaData();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMetaData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMetaData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimScalarType arg1 ;
  ossim_uint32 arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimImageMetaData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimImageMetaData" "', argument " "1"" of type '" "ossimScalarType""'");
  } 
  arg1 = static_cast< ossimScalarType >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimImageMetaData" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimImageMetaData *)new ossimImageMetaData(arg1,arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMetaData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMetaData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimImageMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimImageMetaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimImageMetaData" "', argument " "1"" of type '" "ossimImageMetaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimImageMetaData" "', argument " "1"" of type '" "ossimImageMetaData const &""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (ossimImageMetaData *)new ossimImageMetaData((ossimImageMetaData const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMetaData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMetaData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimImageMetaData__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimImageMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimImageMetaData__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ossimImageMetaData__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimImageMetaData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMetaData::ossimImageMetaData()\n"
    "    ossimImageMetaData::ossimImageMetaData(ossimScalarType,ossim_uint32)\n"
    "    ossimImageMetaData::ossimImageMetaData(ossimImageMetaData const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageMetaData" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_clear" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      (arg1)->clear();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_clearBandInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_clearBandInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_clearBandInfo" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      (arg1)->clearBandInfo();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setDefaultsForArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_setDefaultsForArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setDefaultsForArrays" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      (arg1)->setDefaultsForArrays();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setNumberOfBands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_setNumberOfBands",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setNumberOfBands" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setNumberOfBands" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setNumberOfBands(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getNumberOfBands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getNumberOfBands",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getNumberOfBands" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimImageMetaData const *)arg1)->getNumberOfBands();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setScalarType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimScalarType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_setScalarType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setScalarType" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setScalarType" "', argument " "2"" of type '" "ossimScalarType""'");
  } 
  arg2 = static_cast< ossimScalarType >(val2);
  {
    try
    {
      (arg1)->setScalarType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getScalarType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimScalarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getScalarType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getScalarType" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (ossimScalarType)((ossimImageMetaData const *)arg1)->getScalarType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMinPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_getMinPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMinPix" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_getMinPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageMetaData const *)arg1)->getMinPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setMinPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaData_setMinPix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setMinPix" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setMinPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageMetaData_setMinPix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setMinPix(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setMaxPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaData_setMaxPix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setMaxPix" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setMaxPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageMetaData_setMaxPix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setMaxPix(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setNullPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaData_setNullPix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setNullPix" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setNullPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageMetaData_setNullPix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      (arg1)->setNullPix(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMaxPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_getMaxPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMaxPix" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_getMaxPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageMetaData const *)arg1)->getMaxPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getNullPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_getNullPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getNullPix" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_getNullPix" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (double)((ossimImageMetaData const *)arg1)->getNullPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMinPixelArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getMinPixelArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMinPixelArray" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (double *)((ossimImageMetaData const *)arg1)->getMinPixelArray();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMaxPixelArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getMaxPixelArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMaxPixelArray" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (double *)((ossimImageMetaData const *)arg1)->getMaxPixelArray();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getNullPixelArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getNullPixelArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getNullPixelArray" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (double *)((ossimImageMetaData const *)arg1)->getNullPixelArray();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setMinValuesValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_setMinValuesValid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setMinValuesValid" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setMinValuesValid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setMinValuesValid(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setMaxValuesValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_setMaxValuesValid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setMaxValuesValid" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setMaxValuesValid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setMaxValuesValid(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_setNullValuesValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_setNullValuesValid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_setNullValuesValid" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimImageMetaData_setNullValuesValid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setNullValuesValid(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMinValuesValidFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getMinValuesValidFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMinValuesValidFlag" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->getMinValuesValidFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getMaxValuesValidFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getMaxValuesValidFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getMaxValuesValidFlag" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->getMaxValuesValidFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_getNullValuesValidFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_getNullValuesValidFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_getNullValuesValidFlag" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->getNullValuesValidFlag();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData___set__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimImageMetaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData___set__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData___set__" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageMetaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData___set__" "', argument " "2"" of type '" "ossimImageMetaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData___set__" "', argument " "2"" of type '" "ossimImageMetaData const &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageMetaData * >(argp2);
  {
    try
    {
      result = (ossimImageMetaData *) &(arg1)->operator =((ossimImageMetaData const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMetaData_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_isValid" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->isValid();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimImageMetaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_assign" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageMetaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData_assign" "', argument " "2"" of type '" "ossimImageMetaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData_assign" "', argument " "2"" of type '" "ossimImageMetaData const &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageMetaData * >(argp2);
  {
    try
    {
      (arg1)->assign((ossimImageMetaData const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaData_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_loadState" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageMetaData_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_loadState" "', argument " "1"" of type '" "ossimImageMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMetaData_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageMetaData_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMetaData_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMetaData::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimImageMetaData::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaData_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_saveState" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageMetaData_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaData *arg1 = (ossimImageMetaData *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaData_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaData_saveState" "', argument " "1"" of type '" "ossimImageMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaData_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaData_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimImageMetaData const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaData_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMetaData_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageMetaData_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMetaData_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMetaData::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimImageMetaData::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimImageMetaData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageMetaData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimImageMetaDataWriterRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageMetaDataWriterRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageMetaDataWriterRegistry" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageMetaDataWriterRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimImageMetaDataWriterRegistry *)ossimImageMetaDataWriterRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_registerFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimImageMetaDataWriterFactoryBase *arg2 = (ossimImageMetaDataWriterFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_registerFactory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_registerFactory" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageMetaDataWriterFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_registerFactory" "', argument " "2"" of type '" "ossimImageMetaDataWriterFactoryBase *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageMetaDataWriterFactoryBase * >(argp2);
  {
    try
    {
      (arg1)->registerFactory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_unregisterFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimImageMetaDataWriterFactoryBase *arg2 = (ossimImageMetaDataWriterFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_unregisterFactory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_unregisterFactory" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageMetaDataWriterFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_unregisterFactory" "', argument " "2"" of type '" "ossimImageMetaDataWriterFactoryBase *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageMetaDataWriterFactoryBase * >(argp2);
  {
    try
    {
      (arg1)->unregisterFactory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_findFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimImageMetaDataWriterFactoryBase *arg2 = (ossimImageMetaDataWriterFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_findFactory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_findFactory" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageMetaDataWriterFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_findFactory" "', argument " "2"" of type '" "ossimImageMetaDataWriterFactoryBase *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageMetaDataWriterFactoryBase * >(argp2);
  {
    try
    {
      result = (bool)((ossimImageMetaDataWriterRegistry const *)arg1)->findFactory(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageMetaDataWriterRegistry const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMetaDataWriterRegistry_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimImageMetaDataWriterRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageMetaDataWriterRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageMetaDataWriterRegistry_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMetaDataWriterRegistry_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMetaDataWriterRegistry::createObject(ossimString const &) const\n"
    "    ossimImageMetaDataWriterRegistry::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageMetaDataWriterRegistry::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_createWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< ossimRefPtr< ossimMetadataFileWriter > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_createWriter" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = ((ossimImageMetaDataWriterRegistry const *)arg1)->createWriter((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimMetadataFileWriter >(static_cast< const ossimRefPtr< ossimMetadataFileWriter >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimMetadataFileWriter_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_getTypeNameList" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageMetaDataWriterRegistry const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistry_getMetadatatypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMetaDataWriterRegistry *arg1 = (ossimImageMetaDataWriterRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMetaDataWriterRegistry_getMetadatatypeList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMetaDataWriterRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMetaDataWriterRegistry_getMetadatatypeList" "', argument " "1"" of type '" "ossimImageMetaDataWriterRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMetaDataWriterRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMetaDataWriterRegistry_getMetadatatypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMetaDataWriterRegistry_getMetadatatypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageMetaDataWriterRegistry const *)arg1)->getMetadatatypeList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageMetaDataWriterRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageMetaDataWriterRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimImageMetaDataWriterRegistryGetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageMetaDataWriterRegistryGetInstance")) SWIG_fail;
  {
    try
    {
      result = (void *)ossimImageMetaDataWriterRegistryGetInstance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMosaic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimImageMosaic")) SWIG_fail;
  {
    try
    {
      result = (ossimImageMosaic *)new ossimImageMosaic();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMosaic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMosaic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimConnectableObject::ConnectableObjectList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimImageMosaic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimImageMosaic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimConnectableObject__ConnectableObjectList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimImageMosaic" "', argument " "1"" of type '" "ossimConnectableObject::ConnectableObjectList &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimImageMosaic" "', argument " "1"" of type '" "ossimConnectableObject::ConnectableObjectList &""'"); 
  }
  arg1 = reinterpret_cast< ossimConnectableObject::ConnectableObjectList * >(argp1);
  {
    try
    {
      result = (ossimImageMosaic *)new ossimImageMosaic(*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageMosaic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimImageMosaic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimImageMosaic__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimConnectableObject__ConnectableObjectList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimImageMosaic__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimImageMosaic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMosaic::ossimImageMosaic()\n"
    "    ossimImageMosaic::ossimImageMosaic(ossimConnectableObject::ConnectableObjectList &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_getTile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimIrect *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMosaic_getTile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_getTile" "', argument " "1"" of type '" "ossimImageMosaic *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimImageMosaic_getTile" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_getTile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMosaic_getTile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_getTile" "', argument " "1"" of type '" "ossimImageMosaic *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_getTile" "', argument " "2"" of type '" "ossimIrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      result = (arg1)->getTile((ossimIrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_getTile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMosaic_getTile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimImageMosaic_getTile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMosaic_getTile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMosaic::getTile(ossimIrect const &,ossim_uint32)\n"
    "    ossimImageMosaic::getTile(ossimIrect const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimImageMosaic_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_initialize" "', argument " "1"" of type '" "ossimImageMosaic *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMosaic_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_saveState" "', argument " "1"" of type '" "ossimImageMosaic const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageMosaic_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimImageMosaic const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMosaic_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_saveState" "', argument " "1"" of type '" "ossimImageMosaic const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimImageMosaic const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMosaic_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageMosaic_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMosaic_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMosaic::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimImageMosaic::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageMosaic_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_loadState" "', argument " "1"" of type '" "ossimImageMosaic *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageMosaic_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageMosaic *arg1 = (ossimImageMosaic *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageMosaic_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageMosaic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageMosaic_loadState" "', argument " "1"" of type '" "ossimImageMosaic *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageMosaic * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageMosaic_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageMosaic_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageMosaic_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageMosaic_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageMosaic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageMosaic_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageMosaic_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageMosaic::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimImageMosaic::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *ossimImageMosaic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageMosaic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSourceFactoryBase *arg1 = (ossimImageSourceFactoryBase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageSourceFactoryBase_createImageSource",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSourceFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "1"" of type '" "ossimImageSourceFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSourceFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageSource *)((ossimImageSourceFactoryBase const *)arg1)->createImageSource((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageSource, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSourceFactoryBase *arg1 = (ossimImageSourceFactoryBase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimImageSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageSourceFactoryBase_createImageSource",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSourceFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "1"" of type '" "ossimImageSourceFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSourceFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimImageSource *)((ossimImageSourceFactoryBase const *)arg1)->createImageSource((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageSource, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSourceFactoryBase *arg1 = (ossimImageSourceFactoryBase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageSourceFactoryBase_createImageSource",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSourceFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "1"" of type '" "ossimImageSourceFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSourceFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageSourceFactoryBase_createImageSource" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimImageSource *)((ossimImageSourceFactoryBase const *)arg1)->createImageSource((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageSource, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageSourceFactoryBase_createImageSource(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSourceFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSourceFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageSourceFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageSourceFactoryBase_createImageSource__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageSourceFactoryBase_createImageSource'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageSourceFactoryBase::createImageSource(ossimString const &) const\n"
    "    ossimImageSourceFactoryBase::createImageSource(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageSourceFactoryBase::createImageSource(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageSourceFactoryBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageSourceFactoryBase *arg1 = (ossimImageSourceFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageSourceFactoryBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageSourceFactoryBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageSourceFactoryBase" "', argument " "1"" of type '" "ossimImageSourceFactoryBase *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageSourceFactoryBase * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageSourceFactoryBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageSourceFactoryBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimImageWriterFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageWriterFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageWriterFactory" "', argument " "1"" of type '" "ossimImageWriterFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageWriterFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimImageWriterFactory *)ossimImageWriterFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createWriterFromExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_createWriterFromExtension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createWriterFromExtension" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createWriterFromExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createWriterFromExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactory const *)arg1)->createWriterFromExtension((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createWriter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactory_createWriter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactory const *)arg1)->createWriter((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createWriter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactory const *)arg1)->createWriter((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createWriter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactory const *)arg1)->createWriter((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createWriter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactory_createWriter__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactory_createWriter__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageWriterFactory_createWriter__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageWriterFactory_createWriter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageWriterFactory::createWriter(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageWriterFactory::createWriter(ossimKeywordlist const &) const\n"
    "    ossimImageWriterFactory::createWriter(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createObject" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createObject" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_createObject" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactory_createObject__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageWriterFactory_createObject__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageWriterFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageWriterFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageWriterFactory::createObject(ossimKeywordlist const &) const\n"
    "    ossimImageWriterFactory::createObject(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_getExtensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_getExtensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_getExtensions" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_getExtensions" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getExtensions" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageWriterFactory const *)arg1)->getExtensions(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_getTypeNameList" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageWriterFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_getImageTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactory_getImageTypeList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_getImageTypeList" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_getImageTypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getImageTypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageWriterFactory const *)arg1)->getImageTypeList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_getImageFileWritersBySuffix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimImageWriterFactoryBase::ImageFileWriterList *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactory_getImageFileWritersBySuffix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_getImageFileWritersBySuffix" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageWriterFactoryBase__ImageFileWriterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_getImageFileWritersBySuffix" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getImageFileWritersBySuffix" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageWriterFactoryBase::ImageFileWriterList * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactory_getImageFileWritersBySuffix" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getImageFileWritersBySuffix" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      ((ossimImageWriterFactory const *)arg1)->getImageFileWritersBySuffix(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactory_getImageFileWritersByMimeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactory *arg1 = (ossimImageWriterFactory *) 0 ;
  ossimImageWriterFactoryBase::ImageFileWriterList *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactory_getImageFileWritersByMimeType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactory_getImageFileWritersByMimeType" "', argument " "1"" of type '" "ossimImageWriterFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageWriterFactoryBase__ImageFileWriterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactory_getImageFileWritersByMimeType" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getImageFileWritersByMimeType" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageWriterFactoryBase::ImageFileWriterList * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactory_getImageFileWritersByMimeType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactory_getImageFileWritersByMimeType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      ((ossimImageWriterFactory const *)arg1)->getImageFileWritersByMimeType(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageWriterFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageWriterFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageWriterFactoryRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimImageWriterFactoryRegistry *)ossimImageWriterFactoryRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactoryRegistry const *)arg1)->createWriter((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriterFromExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createWriterFromExtension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createWriterFromExtension" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createWriterFromExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createWriterFromExtension" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactoryRegistry const *)arg1)->createWriterFromExtension((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactoryRegistry_createWriter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactoryRegistry const *)arg1)->createWriter((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactoryRegistry const *)arg1)->createWriter((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimImageFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createWriter" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimImageFileWriter *)((ossimImageWriterFactoryRegistry const *)arg1)->createWriter((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimImageFileWriter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createWriter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageWriterFactoryRegistry_createWriter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageWriterFactoryRegistry_createWriter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageWriterFactoryRegistry::createWriter(ossimFilename const &) const\n"
    "    ossimImageWriterFactoryRegistry::createWriter(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageWriterFactoryRegistry::createWriter(ossimKeywordlist const &) const\n"
    "    ossimImageWriterFactoryRegistry::createWriter(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactoryRegistry_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimImageWriterFactoryRegistry const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimImageWriterFactoryRegistry_createObject__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimImageWriterFactoryRegistry_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimImageWriterFactoryRegistry::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimImageWriterFactoryRegistry::createObject(ossimKeywordlist const &) const\n"
    "    ossimImageWriterFactoryRegistry::createObject(ossimString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_getTypeNameList" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageWriterFactoryRegistry const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_getImageTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_getImageTypeList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_getImageTypeList" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_getImageTypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getImageTypeList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimImageWriterFactoryRegistry const *)arg1)->getImageTypeList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimImageWriterFactoryBase::ImageFileWriterList *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageWriterFactoryBase__ImageFileWriterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageWriterFactoryBase::ImageFileWriterList * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      ((ossimImageWriterFactoryRegistry const *)arg1)->getImageFileWritersBySuffix(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  ossimImageWriterFactoryBase::ImageFileWriterList *arg2 = 0 ;
  ossimString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimImageWriterFactoryBase__ImageFileWriterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType" "', argument " "2"" of type '" "ossimImageWriterFactoryBase::ImageFileWriterList &""'"); 
  }
  arg2 = reinterpret_cast< ossimImageWriterFactoryBase::ImageFileWriterList * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType" "', argument " "3"" of type '" "ossimString const &""'"); 
  }
  arg3 = reinterpret_cast< ossimString * >(argp3);
  {
    try
    {
      ((ossimImageWriterFactoryRegistry const *)arg1)->getImageFileWritersByMimeType(*arg2,(ossimString const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_printImageTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_printImageTypeList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_printImageTypeList" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_printImageTypeList" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_printImageTypeList" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimImageWriterFactoryRegistry const *)arg1)->printImageTypeList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistry_printWriterProps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimImageWriterFactoryRegistry_printWriterProps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimImageWriterFactoryRegistry_printWriterProps" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimImageWriterFactoryRegistry_printWriterProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimImageWriterFactoryRegistry_printWriterProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimImageWriterFactoryRegistry const *)arg1)->printWriterProps(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimImageWriterFactoryRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimImageWriterFactoryRegistry *arg1 = (ossimImageWriterFactoryRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimImageWriterFactoryRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimImageWriterFactoryRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimImageWriterFactoryRegistry" "', argument " "1"" of type '" "ossimImageWriterFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimImageWriterFactoryRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimImageWriterFactoryRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimImageWriterFactoryRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimImageWriterFactoryRegistryGetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimImageWriterFactoryRegistryGetInstance")) SWIG_fail;
  {
    try
    {
      result = (void *)ossimImageWriterFactoryRegistryGetInstance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNormalizedRemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNormalizedRemapTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNormalizedRemapTable" "', argument " "1"" of type '" "ossimNormalizedRemapTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedRemapTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedRemapTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedRemapTable___getitem__" "', argument " "1"" of type '" "ossimNormalizedRemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedRemapTable___getitem__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedRemapTable const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedRemapTable_normFromPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedRemapTable_normFromPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedRemapTable_normFromPix" "', argument " "1"" of type '" "ossimNormalizedRemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedRemapTable_normFromPix" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedRemapTable const *)arg1)->normFromPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedRemapTable_pixFromNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedRemapTable_pixFromNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedRemapTable_pixFromNorm" "', argument " "1"" of type '" "ossimNormalizedRemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedRemapTable_pixFromNorm" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedRemapTable const *)arg1)->pixFromNorm(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedRemapTable_getEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedRemapTable_getEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedRemapTable_getEntries" "', argument " "1"" of type '" "ossimNormalizedRemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedRemapTable const *)arg1)->getEntries();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedRemapTable_getNormalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedRemapTable *arg1 = (ossimNormalizedRemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedRemapTable_getNormalizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedRemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedRemapTable_getNormalizer" "', argument " "1"" of type '" "ossimNormalizedRemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedRemapTable * >(argp1);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedRemapTable const *)arg1)->getNormalizer();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNormalizedRemapTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNormalizedRemapTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNormalizedS16RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNormalizedS16RemapTable")) SWIG_fail;
  {
    try
    {
      result = (ossimNormalizedS16RemapTable *)new ossimNormalizedS16RemapTable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNormalizedS16RemapTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNormalizedS16RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *arg1 = (ossimNormalizedS16RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNormalizedS16RemapTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedS16RemapTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNormalizedS16RemapTable" "', argument " "1"" of type '" "ossimNormalizedS16RemapTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedS16RemapTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedS16RemapTable_getEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *arg1 = (ossimNormalizedS16RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedS16RemapTable_getEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedS16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedS16RemapTable_getEntries" "', argument " "1"" of type '" "ossimNormalizedS16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedS16RemapTable * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedS16RemapTable const *)arg1)->getEntries();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedS16RemapTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *arg1 = (ossimNormalizedS16RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedS16RemapTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedS16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedS16RemapTable___getitem__" "', argument " "1"" of type '" "ossimNormalizedS16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedS16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedS16RemapTable___getitem__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedS16RemapTable const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedS16RemapTable_normFromPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *arg1 = (ossimNormalizedS16RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedS16RemapTable_normFromPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedS16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedS16RemapTable_normFromPix" "', argument " "1"" of type '" "ossimNormalizedS16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedS16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedS16RemapTable_normFromPix" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedS16RemapTable const *)arg1)->normFromPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedS16RemapTable_pixFromNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedS16RemapTable *arg1 = (ossimNormalizedS16RemapTable *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedS16RemapTable_pixFromNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedS16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedS16RemapTable_pixFromNorm" "', argument " "1"" of type '" "ossimNormalizedS16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedS16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedS16RemapTable_pixFromNorm" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedS16RemapTable const *)arg1)->pixFromNorm(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNormalizedS16RemapTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNormalizedS16RemapTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNormalizedU11RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNormalizedU11RemapTable")) SWIG_fail;
  {
    try
    {
      result = (ossimNormalizedU11RemapTable *)new ossimNormalizedU11RemapTable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNormalizedU11RemapTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNormalizedU11RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *arg1 = (ossimNormalizedU11RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNormalizedU11RemapTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU11RemapTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNormalizedU11RemapTable" "', argument " "1"" of type '" "ossimNormalizedU11RemapTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU11RemapTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU11RemapTable_getEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *arg1 = (ossimNormalizedU11RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedU11RemapTable_getEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU11RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU11RemapTable_getEntries" "', argument " "1"" of type '" "ossimNormalizedU11RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU11RemapTable * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU11RemapTable const *)arg1)->getEntries();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU11RemapTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *arg1 = (ossimNormalizedU11RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU11RemapTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU11RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU11RemapTable___getitem__" "', argument " "1"" of type '" "ossimNormalizedU11RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU11RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU11RemapTable___getitem__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU11RemapTable const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU11RemapTable_normFromPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *arg1 = (ossimNormalizedU11RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU11RemapTable_normFromPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU11RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU11RemapTable_normFromPix" "', argument " "1"" of type '" "ossimNormalizedU11RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU11RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU11RemapTable_normFromPix" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU11RemapTable const *)arg1)->normFromPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU11RemapTable_pixFromNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU11RemapTable *arg1 = (ossimNormalizedU11RemapTable *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU11RemapTable_pixFromNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU11RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU11RemapTable_pixFromNorm" "', argument " "1"" of type '" "ossimNormalizedU11RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU11RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU11RemapTable_pixFromNorm" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU11RemapTable const *)arg1)->pixFromNorm(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNormalizedU11RemapTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNormalizedU11RemapTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNormalizedU16RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNormalizedU16RemapTable")) SWIG_fail;
  {
    try
    {
      result = (ossimNormalizedU16RemapTable *)new ossimNormalizedU16RemapTable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNormalizedU16RemapTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNormalizedU16RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *arg1 = (ossimNormalizedU16RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNormalizedU16RemapTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU16RemapTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNormalizedU16RemapTable" "', argument " "1"" of type '" "ossimNormalizedU16RemapTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU16RemapTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU16RemapTable_getEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *arg1 = (ossimNormalizedU16RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedU16RemapTable_getEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU16RemapTable_getEntries" "', argument " "1"" of type '" "ossimNormalizedU16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU16RemapTable * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU16RemapTable const *)arg1)->getEntries();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU16RemapTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *arg1 = (ossimNormalizedU16RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU16RemapTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU16RemapTable___getitem__" "', argument " "1"" of type '" "ossimNormalizedU16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU16RemapTable___getitem__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU16RemapTable const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU16RemapTable_normFromPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *arg1 = (ossimNormalizedU16RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU16RemapTable_normFromPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU16RemapTable_normFromPix" "', argument " "1"" of type '" "ossimNormalizedU16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU16RemapTable_normFromPix" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU16RemapTable const *)arg1)->normFromPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU16RemapTable_pixFromNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU16RemapTable *arg1 = (ossimNormalizedU16RemapTable *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU16RemapTable_pixFromNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU16RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU16RemapTable_pixFromNorm" "', argument " "1"" of type '" "ossimNormalizedU16RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU16RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU16RemapTable_pixFromNorm" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU16RemapTable const *)arg1)->pixFromNorm(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNormalizedU16RemapTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNormalizedU16RemapTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimNormalizedU8RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimNormalizedU8RemapTable")) SWIG_fail;
  {
    try
    {
      result = (ossimNormalizedU8RemapTable *)new ossimNormalizedU8RemapTable();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNormalizedU8RemapTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNormalizedU8RemapTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *arg1 = (ossimNormalizedU8RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNormalizedU8RemapTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU8RemapTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNormalizedU8RemapTable" "', argument " "1"" of type '" "ossimNormalizedU8RemapTable *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU8RemapTable * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU8RemapTable_getEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *arg1 = (ossimNormalizedU8RemapTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimNormalizedU8RemapTable_getEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU8RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU8RemapTable_getEntries" "', argument " "1"" of type '" "ossimNormalizedU8RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU8RemapTable * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU8RemapTable const *)arg1)->getEntries();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU8RemapTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *arg1 = (ossimNormalizedU8RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU8RemapTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU8RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU8RemapTable___getitem__" "', argument " "1"" of type '" "ossimNormalizedU8RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU8RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU8RemapTable___getitem__" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU8RemapTable const *)arg1)->operator [](arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU8RemapTable_normFromPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *arg1 = (ossimNormalizedU8RemapTable *) 0 ;
  ossim_int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU8RemapTable_normFromPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU8RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU8RemapTable_normFromPix" "', argument " "1"" of type '" "ossimNormalizedU8RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU8RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU8RemapTable_normFromPix" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  arg2 = static_cast< ossim_int32 >(val2);
  {
    try
    {
      result = (ossim_float64)((ossimNormalizedU8RemapTable const *)arg1)->normFromPix(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNormalizedU8RemapTable_pixFromNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNormalizedU8RemapTable *arg1 = (ossimNormalizedU8RemapTable *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNormalizedU8RemapTable_pixFromNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNormalizedU8RemapTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNormalizedU8RemapTable_pixFromNorm" "', argument " "1"" of type '" "ossimNormalizedU8RemapTable const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNormalizedU8RemapTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimNormalizedU8RemapTable_pixFromNorm" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  {
    try
    {
      result = (ossim_int32)((ossimNormalizedU8RemapTable const *)arg1)->pixFromNorm(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNormalizedU8RemapTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNormalizedU8RemapTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimOverviewBuilderFactoryBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimOverviewBuilderFactoryBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimOverviewBuilderFactoryBase" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_createBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimOverviewBuilderBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryBase_createBuilder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryBase_createBuilder" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryBase_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryBase_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimOverviewBuilderBase *)((ossimOverviewBuilderFactoryBase const *)arg1)->createBuilder((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewBuilderBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryBase_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryBase_getTypeNameList" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryBase_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryBase_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimOverviewBuilderFactoryBase const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryBase_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryBase const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimOverviewBuilderFactoryBase_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryBase const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryBase *arg1 = (ossimOverviewBuilderFactoryBase *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryBase_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryBase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryBase_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryBase const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryBase_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimOverviewBuilderFactoryBase_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimOverviewBuilderFactoryBase_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimOverviewBuilderFactoryBase::createObject(ossimString const &) const\n"
    "    ossimOverviewBuilderFactoryBase::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimOverviewBuilderFactoryBase::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimOverviewBuilderFactoryBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimOverviewBuilderFactoryBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimOverviewBuilderFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimOverviewBuilderFactory *)ossimOverviewBuilderFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewBuilderFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimOverviewBuilderFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactory *arg1 = (ossimOverviewBuilderFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimOverviewBuilderFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimOverviewBuilderFactory" "', argument " "1"" of type '" "ossimOverviewBuilderFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactory_createBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactory *arg1 = (ossimOverviewBuilderFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimOverviewBuilderBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactory_createBuilder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactory_createBuilder" "', argument " "1"" of type '" "ossimOverviewBuilderFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactory_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactory_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimOverviewBuilderBase *)((ossimOverviewBuilderFactory const *)arg1)->createBuilder((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewBuilderBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactory *arg1 = (ossimOverviewBuilderFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactory_getTypeNameList" "', argument " "1"" of type '" "ossimOverviewBuilderFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimOverviewBuilderFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimOverviewBuilderFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimOverviewBuilderFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimOverviewBuilderFactoryRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimOverviewBuilderFactoryRegistry *)ossimOverviewBuilderFactoryRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryRegistry const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimOverviewBuilderFactoryRegistry_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimOverviewBuilderFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimOverviewBuilderFactoryRegistry_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimOverviewBuilderFactoryRegistry_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimOverviewBuilderFactoryRegistry::createObject(ossimString const &) const\n"
    "    ossimOverviewBuilderFactoryRegistry::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimOverviewBuilderFactoryRegistry::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_createBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimOverviewBuilderBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryRegistry_createBuilder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryRegistry_createBuilder" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryRegistry_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryRegistry_createBuilder" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimOverviewBuilderBase *)((ossimOverviewBuilderFactoryRegistry const *)arg1)->createBuilder((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewBuilderBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewBuilderFactoryRegistry_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewBuilderFactoryRegistry_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewBuilderFactoryRegistry_getTypeNameList" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewBuilderFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewBuilderFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimOverviewBuilderFactoryRegistry const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimOverviewBuilderFactoryRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewBuilderFactoryRegistry *arg1 = (ossimOverviewBuilderFactoryRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimOverviewBuilderFactoryRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimOverviewBuilderFactoryRegistry" "', argument " "1"" of type '" "ossimOverviewBuilderFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewBuilderFactoryRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimOverviewBuilderFactoryRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimOverviewBuilderFactoryRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimOverviewSequencer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimOverviewSequencer")) SWIG_fail;
  {
    try
    {
      result = (ossimOverviewSequencer *)new ossimOverviewSequencer();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimOverviewSequencer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getNumberOfTiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getNumberOfTiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getNumberOfTiles" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimOverviewSequencer const *)arg1)->getNumberOfTiles();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getNumberOfTilesHorizontal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getNumberOfTilesHorizontal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getNumberOfTilesHorizontal" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimOverviewSequencer const *)arg1)->getNumberOfTilesHorizontal();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getNumberOfTilesVertical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getNumberOfTilesVertical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getNumberOfTilesVertical" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (ossim_uint32)((ossimOverviewSequencer const *)arg1)->getNumberOfTilesVertical();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getOutputImageRectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimIrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_getOutputImageRectangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getOutputImageRectangle" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIrect,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_getOutputImageRectangle" "', argument " "2"" of type '" "ossimIrect &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewSequencer_getOutputImageRectangle" "', argument " "2"" of type '" "ossimIrect &""'"); 
  }
  arg2 = reinterpret_cast< ossimIrect * >(argp2);
  {
    try
    {
      ((ossimOverviewSequencer const *)arg1)->getOutputImageRectangle(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setImageHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setImageHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setImageHandler" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_setImageHandler" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      (arg1)->setImageHandler(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setBitMaskObjects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimBitMaskWriter *arg2 = (ossimBitMaskWriter *) 0 ;
  ossimMaskFilter *arg3 = (ossimMaskFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimOverviewSequencer_setBitMaskObjects",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setBitMaskObjects" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimBitMaskWriter, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_setBitMaskObjects" "', argument " "2"" of type '" "ossimBitMaskWriter *""'"); 
  }
  arg2 = reinterpret_cast< ossimBitMaskWriter * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimMaskFilter, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimOverviewSequencer_setBitMaskObjects" "', argument " "3"" of type '" "ossimMaskFilter *""'"); 
  }
  arg3 = reinterpret_cast< ossimMaskFilter * >(argp3);
  {
    try
    {
      (arg1)->setBitMaskObjects(arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setSourceLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setSourceLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setSourceLevel" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimOverviewSequencer_setSourceLevel" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      (arg1)->setSourceLevel(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getHistogramMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimHistogramMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getHistogramMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getHistogramMode" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (ossimHistogramMode)((ossimOverviewSequencer const *)arg1)->getHistogramMode();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setHistogramMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimHistogramMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setHistogramMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setHistogramMode" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimOverviewSequencer_setHistogramMode" "', argument " "2"" of type '" "ossimHistogramMode""'");
  } 
  arg2 = static_cast< ossimHistogramMode >(val2);
  {
    try
    {
      (arg1)->setHistogramMode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_writeHistogram__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_writeHistogram",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_writeHistogram" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      (arg1)->writeHistogram();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_writeHistogram__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_writeHistogram",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_writeHistogram" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_writeHistogram" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewSequencer_writeHistogram" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->writeHistogram((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_writeHistogram(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewSequencer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimOverviewSequencer_writeHistogram__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimOverviewSequencer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimOverviewSequencer_writeHistogram__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimOverviewSequencer_writeHistogram'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimOverviewSequencer::writeHistogram()\n"
    "    ossimOverviewSequencer::writeHistogram(ossimFilename const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_initialize" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setToStartOfSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_setToStartOfSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setToStartOfSequence" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      (arg1)->setToStartOfSequence();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getNextTile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimRefPtr< ossimImageData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getNextTile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getNextTile" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (arg1)->getNextTile();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageData >(static_cast< const ossimRefPtr< ossimImageData >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_slaveProcessTiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_slaveProcessTiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_slaveProcessTiles" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      (arg1)->slaveProcessTiles();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_isMaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_isMaster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_isMaster" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (bool)((ossimOverviewSequencer const *)arg1)->isMaster();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getTileSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimIpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getTileSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getTileSize" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = ((ossimOverviewSequencer const *)arg1)->getTileSize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimIpt(static_cast< const ossimIpt& >(result))), SWIGTYPE_p_ossimIpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setTileSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimIpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setTileSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setTileSize" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimIpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_setTileSize" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewSequencer_setTileSize" "', argument " "2"" of type '" "ossimIpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimIpt * >(argp2);
  {
    try
    {
      (arg1)->setTileSize((ossimIpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setResampleType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  ossimFilterResampler::ossimFilterResamplerType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setResampleType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setResampleType" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimOverviewSequencer_setResampleType" "', argument " "2"" of type '" "ossimFilterResampler::ossimFilterResamplerType""'");
  } 
  arg2 = static_cast< ossimFilterResampler::ossimFilterResamplerType >(val2);
  {
    try
    {
      (arg1)->setResampleType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setScanForMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setScanForMinMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setScanForMinMax" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimOverviewSequencer_setScanForMinMax" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setScanForMinMax(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getScanForMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getScanForMinMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getScanForMinMax" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (bool)((ossimOverviewSequencer const *)arg1)->getScanForMinMax();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_setScanForMinMaxNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_setScanForMinMaxNull",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_setScanForMinMaxNull" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimOverviewSequencer_setScanForMinMaxNull" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setScanForMinMaxNull(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_getScanForMinMaxNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimOverviewSequencer_getScanForMinMaxNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_getScanForMinMaxNull" "', argument " "1"" of type '" "ossimOverviewSequencer const *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    try
    {
      result = (bool)((ossimOverviewSequencer const *)arg1)->getScanForMinMaxNull();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimOverviewSequencer_writeOmdFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimOverviewSequencer *arg1 = (ossimOverviewSequencer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimOverviewSequencer_writeOmdFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimOverviewSequencer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimOverviewSequencer_writeOmdFile" "', argument " "1"" of type '" "ossimOverviewSequencer *""'"); 
  }
  arg1 = reinterpret_cast< ossimOverviewSequencer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimOverviewSequencer_writeOmdFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimOverviewSequencer_writeOmdFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (bool)(arg1)->writeOmdFile((std::string const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *ossimOverviewSequencer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimOverviewSequencer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimEpsgProjectionDatabase_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimEpsgProjectionDatabase *)ossimEpsgProjectionDatabase::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEpsgProjectionDatabase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEpsgProjectionDatabase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEpsgProjectionDatabase" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_findProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_findProjection" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionDatabase_findProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionDatabase_findProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionDatabase const *)arg1)->findProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_findProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_findProjection" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEpsgProjectionDatabase_findProjection" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionDatabase const *)arg1)->findProjection(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionDatabase_findProjection__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimEpsgProjectionDatabase_findProjection__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEpsgProjectionDatabase_findProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEpsgProjectionDatabase::findProjection(ossimString const &) const\n"
    "    ossimEpsgProjectionDatabase::findProjection(ossim_uint32) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjectionCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_findProjectionCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossim_uint32)((ossimEpsgProjectionDatabase const *)arg1)->findProjectionCode((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjectionCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  ossimMapProjection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_findProjectionCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimMapProjection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "2"" of type '" "ossimMapProjection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionDatabase_findProjectionCode" "', argument " "2"" of type '" "ossimMapProjection const &""'"); 
  }
  arg2 = reinterpret_cast< ossimMapProjection * >(argp2);
  {
    try
    {
      result = (ossim_uint32)((ossimEpsgProjectionDatabase const *)arg1)->findProjectionCode((ossimMapProjection const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjectionCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionDatabase_findProjectionCode__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionDatabase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimMapProjection, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionDatabase_findProjectionCode__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEpsgProjectionDatabase_findProjectionCode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEpsgProjectionDatabase::findProjectionCode(ossimString const &) const\n"
    "    ossimEpsgProjectionDatabase::findProjectionCode(ossimMapProjection const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_findProjectionName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  ossim_uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_findProjectionName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_findProjectionName" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimEpsgProjectionDatabase_findProjectionName" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  {
    try
    {
      result = ((ossimEpsgProjectionDatabase const *)arg1)->findProjectionName(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_getProjectionsList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionDatabase_getProjectionsList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_getProjectionsList" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionDatabase_getProjectionsList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionDatabase_getProjectionsList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimEpsgProjectionDatabase const *)arg1)->getProjectionsList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionDatabase_numRecords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionDatabase *arg1 = (ossimEpsgProjectionDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimEpsgProjectionDatabase_numRecords",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionDatabase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionDatabase_numRecords" "', argument " "1"" of type '" "ossimEpsgProjectionDatabase const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionDatabase * >(argp1);
  {
    try
    {
      result = ((ossimEpsgProjectionDatabase const *)arg1)->numRecords();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEpsgProjectionDatabase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEpsgProjectionDatabase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimEpsgProjectionFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimEpsgProjectionFactory *)ossimEpsgProjectionFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEpsgProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionFactory const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionFactory const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEpsgProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimEpsgProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionFactory_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionFactory_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEpsgProjectionFactory_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimEpsgProjectionFactory_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEpsgProjectionFactory_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEpsgProjectionFactory::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimEpsgProjectionFactory::createProjection(ossimString const &) const\n"
    "    ossimEpsgProjectionFactory::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimEpsgProjectionFactory::createProjection(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimEpsgProjectionFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimEpsgProjectionFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimEpsgProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimEpsgProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionFactory_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimEpsgProjectionFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimEpsgProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimEpsgProjectionFactory_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimEpsgProjectionFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimEpsgProjectionFactory::createObject(ossimString const &) const\n"
    "    ossimEpsgProjectionFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimEpsgProjectionFactory::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimEpsgProjectionFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimEpsgProjectionFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimEpsgProjectionFactory_getTypeNameList" "', argument " "1"" of type '" "ossimEpsgProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimEpsgProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimEpsgProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimEpsgProjectionFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimEpsgProjectionFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEpsgProjectionFactory *arg1 = (ossimEpsgProjectionFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimEpsgProjectionFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimEpsgProjectionFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimEpsgProjectionFactory" "', argument " "1"" of type '" "ossimEpsgProjectionFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimEpsgProjectionFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimEpsgProjectionFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimEpsgProjectionFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimMapProjectionFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimMapProjectionFactory *)ossimMapProjectionFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimMapProjectionFactory const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimMapProjectionFactory const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimMapProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimMapProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionFactory_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionFactory_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimMapProjectionFactory_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimMapProjectionFactory_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimMapProjectionFactory_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimMapProjectionFactory::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimMapProjectionFactory::createProjection(ossimString const &) const\n"
    "    ossimMapProjectionFactory::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimMapProjectionFactory::createProjection(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimMapProjectionFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimMapProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimMapProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionFactory_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimMapProjectionFactory_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimMapProjectionFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimMapProjectionFactory::createObject(ossimString const &) const\n"
    "    ossimMapProjectionFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimMapProjectionFactory::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionFactory_getTypeNameList" "', argument " "1"" of type '" "ossimMapProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimMapProjectionFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimMapProjectionFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionFactory *arg1 = (ossimMapProjectionFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimMapProjectionFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimMapProjectionFactory" "', argument " "1"" of type '" "ossimMapProjectionFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimMapProjectionFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimMapProjectionFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimMapProjectionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjection *arg1 = (ossimMapProjection *) 0 ;
  ossimDrect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimMapProjectionInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimMapProjectionInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimMapProjectionInfo" "', argument " "1"" of type '" "ossimMapProjection const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimDrect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimMapProjectionInfo" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimMapProjectionInfo" "', argument " "2"" of type '" "ossimDrect const &""'"); 
  }
  arg2 = reinterpret_cast< ossimDrect * >(argp2);
  {
    try
    {
      result = (ossimMapProjectionInfo *)new ossimMapProjectionInfo((ossimMapProjection const *)arg1,(ossimDrect const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimMapProjectionInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimMapProjectionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimMapProjectionInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimMapProjectionInfo" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_errorStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_errorStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_errorStatus" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (bool)((ossimMapProjectionInfo const *)arg1)->errorStatus();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getGeom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionInfo_getGeom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      ((ossimMapProjectionInfo const *)arg1)->getGeom(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getGeom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_getGeom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_getGeom" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimMapProjectionInfo const *)arg1)->getGeom(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getGeom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionInfo_getGeom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimMapProjectionInfo_getGeom__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimMapProjectionInfo_getGeom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimMapProjectionInfo::getGeom(ossimKeywordlist &,char const *) const\n"
    "    ossimMapProjectionInfo::getGeom(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getMetersPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getMetersPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getMetersPerPixel" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->getMetersPerPixel();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getUsSurveyFeetPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getUsSurveyFeetPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getUsSurveyFeetPerPixel" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->getUsSurveyFeetPerPixel();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getDecimalDegreesPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getDecimalDegreesPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getDecimalDegreesPerPixel" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->getDecimalDegreesPerPixel();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_ulEastingNorthingPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_ulEastingNorthingPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_ulEastingNorthingPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->ulEastingNorthingPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_urEastingNorthingPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_urEastingNorthingPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_urEastingNorthingPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->urEastingNorthingPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_lrEastingNorthingPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_lrEastingNorthingPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_lrEastingNorthingPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->lrEastingNorthingPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_llEastingNorthingPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_llEastingNorthingPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_llEastingNorthingPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->llEastingNorthingPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_ulEastingNorthingPtInFt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_ulEastingNorthingPtInFt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_ulEastingNorthingPtInFt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->ulEastingNorthingPtInFt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_urEastingNorthingPtInFt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_urEastingNorthingPtInFt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_urEastingNorthingPtInFt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->urEastingNorthingPtInFt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_lrEastingNorthingPtInFt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_lrEastingNorthingPtInFt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_lrEastingNorthingPtInFt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->lrEastingNorthingPtInFt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_llEastingNorthingPtInFt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_llEastingNorthingPtInFt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_llEastingNorthingPtInFt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->llEastingNorthingPtInFt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_ulGroundPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_ulGroundPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_ulGroundPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->ulGroundPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_urGroundPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_urGroundPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_urGroundPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->urGroundPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_lrGroundPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_lrGroundPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_lrGroundPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->lrGroundPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_llGroundPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_llGroundPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_llGroundPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->llGroundPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_centerGroundPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_centerGroundPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_centerGroundPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->centerGroundPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_centerEastingNorthingPt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_centerEastingNorthingPt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_centerEastingNorthingPt" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->centerEastingNorthingPt();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimDpt(static_cast< const ossimDpt& >(result))), SWIGTYPE_p_ossimDpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_linesPerImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_linesPerImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_linesPerImage" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimMapProjectionInfo const *)arg1)->linesPerImage();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_pixelsPerLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_int32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_pixelsPerLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_pixelsPerLine" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossim_int32)((ossimMapProjectionInfo const *)arg1)->pixelsPerLine();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_ossimMapProjectionInfo_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_ossimMapProjectionInfo_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_ossimMapProjectionInfo_print" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_ossimMapProjectionInfo_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_ossimMapProjectionInfo_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimMapProjectionInfo const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_setPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimPixelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_setPixelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_setPixelType" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimMapProjectionInfo_setPixelType" "', argument " "2"" of type '" "ossimPixelType""'");
  } 
  arg2 = static_cast< ossimPixelType >(val2);
  {
    try
    {
      (arg1)->setPixelType(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimPixelType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getPixelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getPixelType" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimPixelType)((ossimMapProjectionInfo const *)arg1)->getPixelType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_setOutputFeetFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_setOutputFeetFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_setOutputFeetFlag" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimMapProjectionInfo_setOutputFeetFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      (arg1)->setOutputFeetFlag(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_unitsInFeet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_unitsInFeet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_unitsInFeet" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (bool)((ossimMapProjectionInfo const *)arg1)->unitsInFeet();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getImageInfoString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getImageInfoString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getImageInfoString" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimMapProjectionInfo const *)arg1)->getImageInfoString();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_setImageInfoString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_setImageInfoString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_setImageInfoString" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_setImageInfoString" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_setImageInfoString" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      (arg1)->setImageInfoString((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_getProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimMapProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimMapProjectionInfo_getProjection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_getProjection" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimMapProjection *)((ossimMapProjectionInfo const *)arg1)->getProjection();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimMapProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimMapProjectionInfo::README_IMAGE_STRING_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimMapProjectionInfo::README_IMAGE_STRING_KW = cptr;
    } else {
      ossimMapProjectionInfo::README_IMAGE_STRING_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimMapProjectionInfo::README_IMAGE_STRING_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_README_IMAGE_STRING_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_README_IMAGE_STRING_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimMapProjectionInfo::PIXEL_TYPE_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimMapProjectionInfo::PIXEL_TYPE_KW = cptr;
    } else {
      ossimMapProjectionInfo::PIXEL_TYPE_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimMapProjectionInfo::PIXEL_TYPE_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_PIXEL_TYPE_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_PIXEL_TYPE_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ossimMapProjectionInfo::OUTPUT_US_FT_INFO_KW""' of type '""char const *""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      ossimMapProjectionInfo::OUTPUT_US_FT_INFO_KW = cptr;
    } else {
      ossimMapProjectionInfo::OUTPUT_US_FT_INFO_KW = csize ? (char const *)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(ossimMapProjectionInfo::OUTPUT_US_FT_INFO_KW);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get();
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_loadState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionInfo_loadState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_loadState" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimMapProjectionInfo_loadState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_loadState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_loadState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_loadState" "', argument " "1"" of type '" "ossimMapProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_loadState" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->loadState((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_loadState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionInfo_loadState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimMapProjectionInfo_loadState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimMapProjectionInfo_loadState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimMapProjectionInfo::loadState(ossimKeywordlist const &,char const *)\n"
    "    ossimMapProjectionInfo::loadState(ossimKeywordlist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_saveState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimMapProjectionInfo_saveState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_saveState" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimMapProjectionInfo_saveState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (bool)((ossimMapProjectionInfo const *)arg1)->saveState(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_saveState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimMapProjectionInfo *arg1 = (ossimMapProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimMapProjectionInfo_saveState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimMapProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimMapProjectionInfo_saveState" "', argument " "1"" of type '" "ossimMapProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimMapProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimMapProjectionInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimMapProjectionInfo_saveState" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (bool)((ossimMapProjectionInfo const *)arg1)->saveState(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimMapProjectionInfo_saveState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimMapProjectionInfo_saveState__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimMapProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimMapProjectionInfo_saveState__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimMapProjectionInfo_saveState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimMapProjectionInfo::saveState(ossimKeywordlist &,char const *) const\n"
    "    ossimMapProjectionInfo::saveState(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *ossimMapProjectionInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimMapProjectionInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimNitfProjectionFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimNitfProjectionFactory *)ossimNitfProjectionFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimNitfProjectionFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimNitfProjectionFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimNitfProjectionFactory" "', argument " "1"" of type '" "ossimNitfProjectionFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimNitfProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimNitfProjectionFactory const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimNitfProjectionFactory const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimNitfProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimNitfProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimNitfProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimNitfProjectionFactory const *)arg1)->createProjection(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNitfProjectionFactory_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNitfProjectionFactory_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimImageHandler, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNitfProjectionFactory_createProjection__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimNitfProjectionFactory_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimNitfProjectionFactory_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimNitfProjectionFactory_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimNitfProjectionFactory::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimNitfProjectionFactory::createProjection(ossimString const &) const\n"
    "    ossimNitfProjectionFactory::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimNitfProjectionFactory::createProjection(ossimKeywordlist const &) const\n"
    "    ossimNitfProjectionFactory::createProjection(ossimImageHandler *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimNitfProjectionFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimNitfProjectionFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimNitfProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimNitfProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNitfProjectionFactory_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimNitfProjectionFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimNitfProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimNitfProjectionFactory_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimNitfProjectionFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimNitfProjectionFactory::createObject(ossimString const &) const\n"
    "    ossimNitfProjectionFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimNitfProjectionFactory::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimNitfProjectionFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimNitfProjectionFactory *arg1 = (ossimNitfProjectionFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimNitfProjectionFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimNitfProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimNitfProjectionFactory_getTypeNameList" "', argument " "1"" of type '" "ossimNitfProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimNitfProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimNitfProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimNitfProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimNitfProjectionFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimNitfProjectionFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimNitfProjectionFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theSemiMinorAxis_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeErrorEllipse_theSemiMinorAxis_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theSemiMinorAxis_set" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeErrorEllipse_theSemiMinorAxis_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theSemiMinorAxis = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theSemiMinorAxis_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeErrorEllipse_theSemiMinorAxis_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theSemiMinorAxis_get" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  result = (double) ((arg1)->theSemiMinorAxis);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theSemiMajorAxis_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeErrorEllipse_theSemiMajorAxis_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theSemiMajorAxis_set" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeErrorEllipse_theSemiMajorAxis_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theSemiMajorAxis = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theSemiMajorAxis_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeErrorEllipse_theSemiMajorAxis_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theSemiMajorAxis_get" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  result = (double) ((arg1)->theSemiMajorAxis);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theAzimAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeErrorEllipse_theAzimAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theAzimAngle_set" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeErrorEllipse_theAzimAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theAzimAngle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theAzimAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeErrorEllipse_theAzimAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theAzimAngle_get" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  result = (double) ((arg1)->theAzimAngle);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theCenter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  ossimGpt *arg2 = (ossimGpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeErrorEllipse_theCenter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theCenter_set" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimGpt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pqeErrorEllipse_theCenter_set" "', argument " "2"" of type '" "ossimGpt *""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  if (arg1) (arg1)->theCenter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeErrorEllipse_theCenter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeErrorEllipse_theCenter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeErrorEllipse_theCenter_get" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  result = (ossimGpt *)& ((arg1)->theCenter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimGpt, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pqeErrorEllipse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pqeErrorEllipse")) SWIG_fail;
  {
    try
    {
      result = (pqeErrorEllipse *)new pqeErrorEllipse();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pqeErrorEllipse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pqeErrorEllipse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeErrorEllipse *arg1 = (pqeErrorEllipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pqeErrorEllipse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeErrorEllipse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pqeErrorEllipse" "', argument " "1"" of type '" "pqeErrorEllipse *""'"); 
  }
  arg1 = reinterpret_cast< pqeErrorEllipse * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pqeErrorEllipse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pqeErrorEllipse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLineScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineScale_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLineScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLineScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLineScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineScale_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLineScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theSampScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampScale_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theSampScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theSampScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theSampScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampScale_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theSampScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLatScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLatScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLatScale_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLatScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLatScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLatScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLatScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLatScale_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLatScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLonScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLonScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLonScale_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLonScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLonScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLonScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLonScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLonScale_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLonScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theHgtScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theHgtScale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theHgtScale_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theHgtScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theHgtScale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theHgtScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theHgtScale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theHgtScale_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theHgtScale);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLineOffset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineOffset_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLineOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLineOffset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLineOffset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineOffset_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLineOffset);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theSampOffset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampOffset_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theSampOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theSampOffset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theSampOffset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampOffset_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theSampOffset);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLatOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLatOffset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLatOffset_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLatOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLatOffset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLatOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLatOffset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLatOffset_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLatOffset);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLonOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLonOffset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLonOffset_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theLonOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theLonOffset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLonOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLonOffset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLonOffset_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theLonOffset);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theHgtOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theHgtOffset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theHgtOffset_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theHgtOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->theHgtOffset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theHgtOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theHgtOffset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theHgtOffset_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double) ((arg1)->theHgtOffset);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineNumCoef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLineNumCoef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineNumCoef_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pqeRPCModel_theLineNumCoef_set" "', argument " "2"" of type '" "double [20]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) arg1->theLineNumCoef[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""theLineNumCoef""' of type '""double [20]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineNumCoef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLineNumCoef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineNumCoef_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double *)(double *) ((arg1)->theLineNumCoef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineDenCoef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theLineDenCoef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineDenCoef_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pqeRPCModel_theLineDenCoef_set" "', argument " "2"" of type '" "double [20]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) arg1->theLineDenCoef[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""theLineDenCoef""' of type '""double [20]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theLineDenCoef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theLineDenCoef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theLineDenCoef_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double *)(double *) ((arg1)->theLineDenCoef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampNumCoef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theSampNumCoef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampNumCoef_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pqeRPCModel_theSampNumCoef_set" "', argument " "2"" of type '" "double [20]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) arg1->theSampNumCoef[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""theSampNumCoef""' of type '""double [20]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampNumCoef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theSampNumCoef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampNumCoef_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double *)(double *) ((arg1)->theSampNumCoef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampDenCoef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theSampDenCoef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampDenCoef_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pqeRPCModel_theSampDenCoef_set" "', argument " "2"" of type '" "double [20]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) arg1->theSampDenCoef[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""theSampDenCoef""' of type '""double [20]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theSampDenCoef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theSampDenCoef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theSampDenCoef_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (double *)(double *) ((arg1)->theSampDenCoef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pqeRPCModel_theType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theType_set" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pqeRPCModel_theType_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->theType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pqeRPCModel_theType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pqeRPCModel_theType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pqeRPCModel_theType_get" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  result = (char) ((arg1)->theType);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pqeRPCModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pqeRPCModel")) SWIG_fail;
  {
    try
    {
      result = (pqeRPCModel *)new pqeRPCModel();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pqeRPCModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pqeRPCModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pqeRPCModel *arg1 = (pqeRPCModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pqeRPCModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pqeRPCModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pqeRPCModel" "', argument " "1"" of type '" "pqeRPCModel *""'"); 
  }
  arg1 = reinterpret_cast< pqeRPCModel * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pqeRPCModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pqeRPCModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimPositionQualityEvaluator")) SWIG_fail;
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  NEWMAT::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ossimPositionQualityEvaluator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::Matrix * >(argp2);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(NEWMAT::Matrix const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  ossim_float64 *arg4 = 0 ;
  ossim_float64 *arg5 = 0 ;
  ossimColumnVector3d *arg6 = 0 ;
  NEWMAT::Matrix *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  ossim_float64 temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  ossim_float64 temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "ossim_float64""'");
  } 
  temp4 = static_cast< ossim_float64 >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossim_float64""'");
  } 
  temp5 = static_cast< ossim_float64 >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg6 = reinterpret_cast< ossimColumnVector3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_NEWMAT__Matrix,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "7"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "7"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  arg7 = reinterpret_cast< NEWMAT::Matrix * >(argp7);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(ossim_float64 const &)*arg4,(ossim_float64 const &)*arg5,(ossimColumnVector3d const &)*arg6,(NEWMAT::Matrix const &)*arg7);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  ossim_float64 *arg4 = 0 ;
  ossim_float64 *arg5 = 0 ;
  ossimColumnVector3d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  ossim_float64 temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  ossim_float64 temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "ossim_float64""'");
  } 
  temp4 = static_cast< ossim_float64 >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossim_float64""'");
  } 
  temp5 = static_cast< ossim_float64 >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg6 = reinterpret_cast< ossimColumnVector3d * >(argp6);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(ossim_float64 const &)*arg4,(ossim_float64 const &)*arg5,(ossimColumnVector3d const &)*arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  ossim_float64 *arg4 = 0 ;
  ossim_float64 *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  ossim_float64 temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  ossim_float64 temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "ossim_float64""'");
  } 
  temp4 = static_cast< ossim_float64 >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossim_float64""'");
  } 
  temp5 = static_cast< ossim_float64 >(val5);
  arg5 = &temp5;
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(ossim_float64 const &)*arg4,(ossim_float64 const &)*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  pqeRPCModel *arg4 = 0 ;
  ossimColumnVector3d *arg5 = 0 ;
  NEWMAT::Matrix *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_pqeRPCModel,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  arg4 = reinterpret_cast< pqeRPCModel * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg5 = reinterpret_cast< ossimColumnVector3d * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_NEWMAT__Matrix,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "6"" of type '" "NEWMAT::Matrix const &""'"); 
  }
  arg6 = reinterpret_cast< NEWMAT::Matrix * >(argp6);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(pqeRPCModel const &)*arg4,(ossimColumnVector3d const &)*arg5,(NEWMAT::Matrix const &)*arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  pqeRPCModel *arg4 = 0 ;
  ossimColumnVector3d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_pqeRPCModel,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  arg4 = reinterpret_cast< pqeRPCModel * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossimColumnVector3d const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "5"" of type '" "ossimColumnVector3d const &""'"); 
  }
  arg5 = reinterpret_cast< ossimColumnVector3d * >(argp5);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(pqeRPCModel const &)*arg4,(ossimColumnVector3d const &)*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  pqeRPCModel *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimPositionQualityEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ossimPositionQualityEvaluator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_pqeRPCModel,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimPositionQualityEvaluator" "', argument " "4"" of type '" "pqeRPCModel const &""'"); 
  }
  arg4 = reinterpret_cast< pqeRPCModel * >(argp4);
  {
    try
    {
      result = (ossimPositionQualityEvaluator *)new ossimPositionQualityEvaluator((ossimEcefPoint const &)*arg1,(ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3,(pqeRPCModel const &)*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimPositionQualityEvaluator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ossimPositionQualityEvaluator__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NEWMAT__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ossimPositionQualityEvaluator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_pqeRPCModel, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ossimPositionQualityEvaluator__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_pqeRPCModel, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ossimPositionQualityEvaluator__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ossimPositionQualityEvaluator__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_pqeRPCModel, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_NEWMAT__Matrix, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_ossimPositionQualityEvaluator__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_ossimPositionQualityEvaluator__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_ossimColumnVector3d, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_NEWMAT__Matrix, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_ossimPositionQualityEvaluator__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimPositionQualityEvaluator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator()\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,NEWMAT::Matrix const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &,ossimColumnVector3d const &,NEWMAT::Matrix const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &,ossimColumnVector3d const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &,ossim_float64 const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,pqeRPCModel const &,ossimColumnVector3d const &,NEWMAT::Matrix const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,pqeRPCModel const &,ossimColumnVector3d const &)\n"
    "    ossimPositionQualityEvaluator::ossimPositionQualityEvaluator(ossimEcefPoint const &,ossim_float64 const &,ossim_float64 const &,pqeRPCModel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimPositionQualityEvaluator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimPositionQualityEvaluator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimPositionQualityEvaluator" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_addContributingCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  NEWMAT::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimPositionQualityEvaluator_addContributingCovariance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_addContributingCovariance" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimPositionQualityEvaluator_addContributingCovariance" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_addContributingCovariance" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::Matrix * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->addContributingCovariance(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_addContributingCE_LE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimPositionQualityEvaluator_addContributingCE_LE",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_addContributingCE_LE" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimPositionQualityEvaluator_addContributingCE_LE" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimPositionQualityEvaluator_addContributingCE_LE" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (bool)(arg1)->addContributingCE_LE((ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_subtractContributingCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  NEWMAT::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimPositionQualityEvaluator_subtractContributingCovariance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_subtractContributingCovariance" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimPositionQualityEvaluator_subtractContributingCovariance" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_subtractContributingCovariance" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::Matrix * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->subtractContributingCovariance(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_subtractContributingCE_LE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimPositionQualityEvaluator_subtractContributingCE_LE",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_subtractContributingCE_LE" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimPositionQualityEvaluator_subtractContributingCE_LE" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimPositionQualityEvaluator_subtractContributingCE_LE" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (bool)(arg1)->subtractContributingCE_LE((ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_getCovMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  NEWMAT::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimPositionQualityEvaluator_getCovMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_getCovMatrix" "', argument " "1"" of type '" "ossimPositionQualityEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimPositionQualityEvaluator_getCovMatrix" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_getCovMatrix" "', argument " "2"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg2 = reinterpret_cast< NEWMAT::Matrix * >(argp2);
  {
    try
    {
      result = (bool)((ossimPositionQualityEvaluator const *)arg1)->getCovMatrix(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_computeCE_LE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  pqeProbLev_t arg2 ;
  ossim_float64 *arg3 = 0 ;
  ossim_float64 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimPositionQualityEvaluator_computeCE_LE",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "1"" of type '" "ossimPositionQualityEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "2"" of type '" "pqeProbLev_t""'");
  } 
  arg2 = static_cast< pqeProbLev_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "3"" of type '" "ossim_float64 &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "3"" of type '" "ossim_float64 &""'"); 
  }
  arg3 = reinterpret_cast< ossim_float64 * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "4"" of type '" "ossim_float64 &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_computeCE_LE" "', argument " "4"" of type '" "ossim_float64 &""'"); 
  }
  arg4 = reinterpret_cast< ossim_float64 * >(argp4);
  {
    try
    {
      result = (bool)((ossimPositionQualityEvaluator const *)arg1)->computeCE_LE(arg2,*arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_extractErrorEllipse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  pqeProbLev_t arg2 ;
  pqeErrorEllipse *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimPositionQualityEvaluator_extractErrorEllipse",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "2"" of type '" "pqeProbLev_t""'");
  } 
  arg2 = static_cast< pqeProbLev_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pqeErrorEllipse,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "3"" of type '" "pqeErrorEllipse &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "3"" of type '" "pqeErrorEllipse &""'"); 
  }
  arg3 = reinterpret_cast< pqeErrorEllipse * >(argp3);
  {
    try
    {
      result = (bool)(arg1)->extractErrorEllipse(arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_extractErrorEllipse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  pqeProbLev_t arg2 ;
  ossim_float64 *arg3 = 0 ;
  pqeErrorEllipse *arg4 = 0 ;
  pqeImageErrorEllipse_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimPositionQualityEvaluator_extractErrorEllipse",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "1"" of type '" "ossimPositionQualityEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "2"" of type '" "pqeProbLev_t""'");
  } 
  arg2 = static_cast< pqeProbLev_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_pqeErrorEllipse,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "4"" of type '" "pqeErrorEllipse &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "4"" of type '" "pqeErrorEllipse &""'"); 
  }
  arg4 = reinterpret_cast< pqeErrorEllipse * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "5"" of type '" "pqeImageErrorEllipse_t &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_extractErrorEllipse" "', argument " "5"" of type '" "pqeImageErrorEllipse_t &""'"); 
  }
  arg5 = reinterpret_cast< pqeImageErrorEllipse_t * >(argp5);
  {
    try
    {
      result = (bool)(arg1)->extractErrorEllipse(arg2,(ossim_float64 const &)*arg3,*arg4,*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_extractErrorEllipse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimPositionQualityEvaluator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pqeErrorEllipse, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimPositionQualityEvaluator_extractErrorEllipse__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimPositionQualityEvaluator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_pqeErrorEllipse, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ossimPositionQualityEvaluator_extractErrorEllipse__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimPositionQualityEvaluator_extractErrorEllipse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimPositionQualityEvaluator::extractErrorEllipse(pqeProbLev_t const,pqeErrorEllipse &)\n"
    "    ossimPositionQualityEvaluator::extractErrorEllipse(pqeProbLev_t const,ossim_float64 const &,pqeErrorEllipse &,pqeImageErrorEllipse_t &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimPositionQualityEvaluator_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_isValid" "', argument " "1"" of type '" "ossimPositionQualityEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  {
    try
    {
      result = (bool)((ossimPositionQualityEvaluator const *)arg1)->isValid();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimPositionQualityEvaluator *arg1 = (ossimPositionQualityEvaluator *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimPositionQualityEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print" "', argument " "1"" of type '" "ossimPositionQualityEvaluator const *""'"); 
  }
  arg1 = reinterpret_cast< ossimPositionQualityEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimPositionQualityEvaluator const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimPositionQualityEvaluator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimPositionQualityEvaluator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ossimProjectionFactoryRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimProjectionFactoryRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimProjectionFactoryRegistry" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimProjectionFactoryRegistry_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimProjectionFactoryRegistry *)ossimProjectionFactoryRegistry::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimProjectionFactoryRegistry_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimProjectionFactoryRegistry const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimProjectionFactoryRegistry const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimProjectionFactoryRegistry_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimProjectionFactoryRegistry const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimProjectionFactoryRegistry const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createProjection" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimProjectionFactoryRegistry const *)arg1)->createProjection(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimImageHandler, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimProjectionFactoryRegistry_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimProjectionFactoryRegistry_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimProjectionFactoryRegistry::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimProjectionFactoryRegistry::createProjection(ossimString const &) const\n"
    "    ossimProjectionFactoryRegistry::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimProjectionFactoryRegistry::createProjection(ossimKeywordlist const &) const\n"
    "    ossimProjectionFactoryRegistry::createProjection(ossimImageHandler *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimProjectionFactoryRegistry const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimProjectionFactoryRegistry_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimProjectionFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimProjectionFactoryRegistry const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimProjectionFactoryRegistry_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimProjectionFactoryRegistry_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimProjectionFactoryRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimProjectionFactoryRegistry_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimProjectionFactoryRegistry_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimProjectionFactoryRegistry::createObject(ossimString const &) const\n"
    "    ossimProjectionFactoryRegistry::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimProjectionFactoryRegistry::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistry_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimProjectionFactoryRegistry *arg1 = (ossimProjectionFactoryRegistry *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimProjectionFactoryRegistry_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimProjectionFactoryRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimProjectionFactoryRegistry_getTypeNameList" "', argument " "1"" of type '" "ossimProjectionFactoryRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< ossimProjectionFactoryRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimProjectionFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimProjectionFactoryRegistry_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimProjectionFactoryRegistry const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimProjectionFactoryRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimProjectionFactoryRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimProjectionFactoryRegistryGetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimProjectionFactoryRegistryGetInstance")) SWIG_fail;
  {
    try
    {
      result = (void *)ossimProjectionFactoryRegistryGetInstance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimSensorModelFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimSensorModelFactory *)ossimSensorModelFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimSensorModelFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimSensorModelFactory const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimSensorModelFactory const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimSensorModelFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimSensorModelFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimSensorModelFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimSensorModelFactory_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimSensorModelFactory_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimSensorModelFactory_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimSensorModelFactory_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimSensorModelFactory_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimSensorModelFactory::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimSensorModelFactory::createProjection(ossimString const &) const\n"
    "    ossimSensorModelFactory::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimSensorModelFactory::createProjection(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createObject" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimSensorModelFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimSensorModelFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createObject" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimSensorModelFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimSensorModelFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_createObject" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimSensorModelFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimSensorModelFactory_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimSensorModelFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimSensorModelFactory_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimSensorModelFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimSensorModelFactory::createObject(ossimString const &) const\n"
    "    ossimSensorModelFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimSensorModelFactory::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelFactory_getTypeNameList" "', argument " "1"" of type '" "ossimSensorModelFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimSensorModelFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimSensorModelFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelFactory *arg1 = (ossimSensorModelFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimSensorModelFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimSensorModelFactory" "', argument " "1"" of type '" "ossimSensorModelFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimSensorModelFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimSensorModelFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimRpcPqeInputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimRpcPqeInputs")) SWIG_fail;
  {
    try
    {
      result = (ossimRpcPqeInputs *)new ossimRpcPqeInputs();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimRpcPqeInputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimRpcPqeInputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimRpcPqeInputs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimRpcPqeInputs" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcElevationAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theRpcElevationAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcElevationAngle_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimRpcPqeInputs_theRpcElevationAngle_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->theRpcElevationAngle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcElevationAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theRpcElevationAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcElevationAngle_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result = (ossim_float64) ((arg1)->theRpcElevationAngle);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcAzimuthAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theRpcAzimuthAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcAzimuthAngle_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimRpcPqeInputs_theRpcAzimuthAngle_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->theRpcAzimuthAngle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcAzimuthAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theRpcAzimuthAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcAzimuthAngle_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result = (ossim_float64) ((arg1)->theRpcAzimuthAngle);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcBiasError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theRpcBiasError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcBiasError_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimRpcPqeInputs_theRpcBiasError_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->theRpcBiasError = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcBiasError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theRpcBiasError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcBiasError_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result = (ossim_float64) ((arg1)->theRpcBiasError);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcRandError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  ossim_float64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theRpcRandError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcRandError_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimRpcPqeInputs_theRpcRandError_set" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  arg2 = static_cast< ossim_float64 >(val2);
  if (arg1) (arg1)->theRpcRandError = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theRpcRandError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossim_float64 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theRpcRandError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theRpcRandError_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result = (ossim_float64) ((arg1)->theRpcRandError);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theSurfaceNormalVector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  ossimColumnVector3d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theSurfaceNormalVector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theSurfaceNormalVector_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimColumnVector3d,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimRpcPqeInputs_theSurfaceNormalVector_set" "', argument " "2"" of type '" "ossimColumnVector3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimRpcPqeInputs_theSurfaceNormalVector_set" "', argument " "2"" of type '" "ossimColumnVector3d""'");
    } else {
      ossimColumnVector3d * temp = reinterpret_cast< ossimColumnVector3d * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->theSurfaceNormalVector = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theSurfaceNormalVector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimColumnVector3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theSurfaceNormalVector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theSurfaceNormalVector_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result =  ((arg1)->theSurfaceNormalVector);
  resultobj = SWIG_NewPointerObj((new ossimColumnVector3d(static_cast< const ossimColumnVector3d& >(result))), SWIGTYPE_p_ossimColumnVector3d, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theSurfaceCovMatrix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  NEWMAT::Matrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimRpcPqeInputs_theSurfaceCovMatrix_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theSurfaceCovMatrix_set" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NEWMAT__Matrix,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimRpcPqeInputs_theSurfaceCovMatrix_set" "', argument " "2"" of type '" "NEWMAT::Matrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimRpcPqeInputs_theSurfaceCovMatrix_set" "', argument " "2"" of type '" "NEWMAT::Matrix""'");
    } else {
      NEWMAT::Matrix * temp = reinterpret_cast< NEWMAT::Matrix * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->theSurfaceCovMatrix = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpcPqeInputs_theSurfaceCovMatrix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpcPqeInputs *arg1 = (ossimRpcPqeInputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NEWMAT::Matrix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimRpcPqeInputs_theSurfaceCovMatrix_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpcPqeInputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpcPqeInputs_theSurfaceCovMatrix_get" "', argument " "1"" of type '" "ossimRpcPqeInputs *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpcPqeInputs * >(argp1);
  result =  ((arg1)->theSurfaceCovMatrix);
  resultobj = SWIG_NewPointerObj((new NEWMAT::Matrix(static_cast< const NEWMAT::Matrix& >(result))), SWIGTYPE_p_NEWMAT__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimRpcPqeInputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimRpcPqeInputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimSensorModelTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimSensorModelTuple")) SWIG_fail;
  {
    try
    {
      result = (ossimSensorModelTuple *)new ossimSensorModelTuple();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimSensorModelTuple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimSensorModelTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimSensorModelTuple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimSensorModelTuple" "', argument " "1"" of type '" "ossimSensorModelTuple *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_addImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  ossimSensorModel *arg2 = (ossimSensorModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelTuple_addImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_addImage" "', argument " "1"" of type '" "ossimSensorModelTuple *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimSensorModel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelTuple_addImage" "', argument " "2"" of type '" "ossimSensorModel *""'"); 
  }
  arg2 = reinterpret_cast< ossimSensorModel * >(argp2);
  {
    try
    {
      (arg1)->addImage(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_ossimSensorModelTuple_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelTuple_ossimSensorModelTuple_print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_ossimSensorModelTuple_print" "', argument " "1"" of type '" "ossimSensorModelTuple const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelTuple_ossimSensorModelTuple_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_ossimSensorModelTuple_print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimSensorModelTuple const *)arg1)->print(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_intersect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  SwigValueWrapper< std::vector< ossimDpt,std::allocator< ossimDpt > > > arg2 ;
  ossimEcefPoint *arg3 = 0 ;
  NEWMAT::Matrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ossimSensorModelTuple::IntersectStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimSensorModelTuple_intersect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_intersect" "', argument " "1"" of type '" "ossimSensorModelTuple const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelTuple_intersect" "', argument " "2"" of type '" "DptSet_t const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "2"" of type '" "DptSet_t const""'");
    } else {
      DptSet_t * temp = reinterpret_cast< DptSet_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimEcefPoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimEcefPoint &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimEcefPoint &""'"); 
  }
  arg3 = reinterpret_cast< ossimEcefPoint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimSensorModelTuple_intersect" "', argument " "4"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "4"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg4 = reinterpret_cast< NEWMAT::Matrix * >(argp4);
  {
    try
    {
      result = (ossimSensorModelTuple::IntersectStatus)((ossimSensorModelTuple const *)arg1)->intersect(arg2,*arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_intersect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  ossim_int32 *arg2 = 0 ;
  ossimDpt *arg3 = 0 ;
  ossimEcefPoint *arg4 = 0 ;
  NEWMAT::Matrix *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_int32 temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimSensorModelTuple::IntersectStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimSensorModelTuple_intersect",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_intersect" "', argument " "1"" of type '" "ossimSensorModelTuple *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimSensorModelTuple_intersect" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  temp2 = static_cast< ossim_int32 >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimDpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimDpt * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimEcefPoint,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimSensorModelTuple_intersect" "', argument " "4"" of type '" "ossimEcefPoint &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "4"" of type '" "ossimEcefPoint &""'"); 
  }
  arg4 = reinterpret_cast< ossimEcefPoint * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimSensorModelTuple_intersect" "', argument " "5"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "5"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg5 = reinterpret_cast< NEWMAT::Matrix * >(argp5);
  {
    try
    {
      result = (ossimSensorModelTuple::IntersectStatus)(arg1)->intersect((ossim_int32 const &)*arg2,(ossimDpt const &)*arg3,*arg4,*arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_intersect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  ossim_int32 *arg2 = 0 ;
  ossimDpt *arg3 = 0 ;
  ossim_float64 *arg4 = 0 ;
  ossimEcefPoint *arg5 = 0 ;
  NEWMAT::Matrix *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_int32 temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ossim_float64 temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ossimSensorModelTuple::IntersectStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ossimSensorModelTuple_intersect",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_intersect" "', argument " "1"" of type '" "ossimSensorModelTuple *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimSensorModelTuple_intersect" "', argument " "2"" of type '" "ossim_int32""'");
  } 
  temp2 = static_cast< ossim_int32 >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimDpt,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimDpt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "3"" of type '" "ossimDpt const &""'"); 
  }
  arg3 = reinterpret_cast< ossimDpt * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimSensorModelTuple_intersect" "', argument " "4"" of type '" "ossim_float64""'");
  } 
  temp4 = static_cast< ossim_float64 >(val4);
  arg4 = &temp4;
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_ossimEcefPoint,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ossimSensorModelTuple_intersect" "', argument " "5"" of type '" "ossimEcefPoint &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "5"" of type '" "ossimEcefPoint &""'"); 
  }
  arg5 = reinterpret_cast< ossimEcefPoint * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_NEWMAT__Matrix,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ossimSensorModelTuple_intersect" "', argument " "6"" of type '" "NEWMAT::Matrix &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_intersect" "', argument " "6"" of type '" "NEWMAT::Matrix &""'"); 
  }
  arg6 = reinterpret_cast< NEWMAT::Matrix * >(argp6);
  {
    try
    {
      result = (ossimSensorModelTuple::IntersectStatus)(arg1)->intersect((ossim_int32 const &)*arg2,(ossimDpt const &)*arg3,(ossim_float64 const &)*arg4,*arg5,*arg6);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_intersect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelTuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_NEWMAT__Matrix, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimSensorModelTuple_intersect__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelTuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimDpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_NEWMAT__Matrix, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ossimSensorModelTuple_intersect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimSensorModelTuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ossimDpt, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_ossimEcefPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_NEWMAT__Matrix, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ossimSensorModelTuple_intersect__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimSensorModelTuple_intersect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimSensorModelTuple::intersect(DptSet_t const,ossimEcefPoint &,NEWMAT::Matrix &) const\n"
    "    ossimSensorModelTuple::intersect(ossim_int32 const &,ossimDpt const &,ossimEcefPoint &,NEWMAT::Matrix &)\n"
    "    ossimSensorModelTuple::intersect(ossim_int32 const &,ossimDpt const &,ossim_float64 const &,ossimEcefPoint &,NEWMAT::Matrix &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_setIntersectionSurfaceAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  ossim_float64 *arg2 = 0 ;
  ossim_float64 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ossim_float64 temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimSensorModelTuple_setIntersectionSurfaceAccuracy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_setIntersectionSurfaceAccuracy" "', argument " "1"" of type '" "ossimSensorModelTuple *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimSensorModelTuple_setIntersectionSurfaceAccuracy" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimSensorModelTuple_setIntersectionSurfaceAccuracy" "', argument " "3"" of type '" "ossim_float64""'");
  } 
  temp3 = static_cast< ossim_float64 >(val3);
  arg3 = &temp3;
  {
    try
    {
      result = (bool)(arg1)->setIntersectionSurfaceAccuracy((ossim_float64 const &)*arg2,(ossim_float64 const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimSensorModelTuple_getRpcPqeInputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimSensorModelTuple *arg1 = (ossimSensorModelTuple *) 0 ;
  ossimRpcPqeInputs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimSensorModelTuple_getRpcPqeInputs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimSensorModelTuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimSensorModelTuple_getRpcPqeInputs" "', argument " "1"" of type '" "ossimSensorModelTuple const *""'"); 
  }
  arg1 = reinterpret_cast< ossimSensorModelTuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimRpcPqeInputs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimSensorModelTuple_getRpcPqeInputs" "', argument " "2"" of type '" "ossimRpcPqeInputs &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimSensorModelTuple_getRpcPqeInputs" "', argument " "2"" of type '" "ossimRpcPqeInputs &""'"); 
  }
  arg2 = reinterpret_cast< ossimRpcPqeInputs * >(argp2);
  {
    try
    {
      ((ossimSensorModelTuple const *)arg1)->getRpcPqeInputs(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimSensorModelTuple_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimSensorModelTuple, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ossimStatePlaneProjectionInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimStatePlaneProjectionInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ossimStatePlaneProjectionInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ossimStatePlaneProjectionInfo const &""'"); 
  }
  arg2 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp2);
  {
    try
    {
      result = (std::ostream *) &operator <<(*arg1,(ossimStatePlaneProjectionInfo const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossim2dLinearRegression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimAdjustableParameterInfo, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimTDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_18(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimEcefVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFontInformation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGeoidNgsHeader, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGeoPolygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimIrect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLine, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrRay, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrSpace, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimLsrVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimNadconGridHeader, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimTDpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_19(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimTieGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_20(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_21(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '__lshift__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator <<(std::ostream &,ossim2dLinearRegression const &)\n"
    "    operator <<(std::ostream &,ossimAdjustableParameterInfo const &)\n"
    "    operator <<(std::ostream &,ossimDpt3d const &)\n"
    "    operator <<(std::ostream &,ossimDpt const &)\n"
    "    operator <<(std::ostream &,ossimEcefPoint const &)\n"
    "    operator <<(ostream &,ossimEcefVector const &)\n"
    "    operator <<(std::ostream &,ossimFontInformation const &)\n"
    "    operator <<(std::ostream &,ossimGeoidNgsHeader const &)\n"
    "    operator <<(std::ostream &,ossimGeoPolygon const &)\n"
    "    operator <<(std::ostream &,ossimIpt const &)\n"
    "    operator <<(std::ostream &,ossimIrect const &)\n"
    "    operator <<(std::ostream &,ossimLine const &)\n"
    "    operator <<(ostream &,ossimLsrPoint const &)\n"
    "    operator <<(ostream &,ossimLsrRay const &)\n"
    "    operator <<(ostream &,ossimLsrSpace const &)\n"
    "    operator <<(std::ostream &,ossimLsrVector const &)\n"
    "    operator <<(std::ostream &,ossimNadconGridHeader const &)\n"
    "    operator <<(std::ostream &,ossimString const &)\n"
    "    operator <<(std::ostream &,ossimTDpt const &)\n"
    "    operator >>(std::istream &,ossimTDpt &)\n"
    "    operator <<(std::ostream &,ossimTieGpt const &)\n"
    "    operator <<(std::ostream &,ossimStatePlaneProjectionInfo const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ossimStatePlaneProjectionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  double arg8 ;
  double arg9 ;
  std::string *arg10 = 0 ;
  std::string *arg11 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int res10 = SWIG_OLDOBJ ;
  int res11 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  ossimStatePlaneProjectionInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_ossimStatePlaneProjectionInfo",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    std::string *ptr = (std::string *)0;
    res10 = SWIG_AsPtr_std_string(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "10"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "10"" of type '" "std::string const &""'"); 
    }
    arg10 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res11 = SWIG_AsPtr_std_string(obj10, &ptr);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "11"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimStatePlaneProjectionInfo" "', argument " "11"" of type '" "std::string const &""'"); 
    }
    arg11 = ptr;
  }
  {
    try
    {
      result = (ossimStatePlaneProjectionInfo *)new ossimStatePlaneProjectionInfo((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,(std::string const &)*arg10,(std::string const &)*arg11);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimStatePlaneProjectionInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res10)) delete arg10;
  if (SWIG_IsNewObj(res11)) delete arg11;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res10)) delete arg10;
  if (SWIG_IsNewObj(res11)) delete arg11;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_code" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (int)((ossimStatePlaneProjectionInfo const *)arg1)->code();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_name" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimStatePlaneProjectionInfo const *)arg1)->name();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_projName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_projName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_projName" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimString *) &((ossimStatePlaneProjectionInfo const *)arg1)->projName();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_originLat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_originLat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_originLat" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->originLat();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_originLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_originLon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_originLon" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->originLon();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_datum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_datum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_datum" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimDatum *)((ossimStatePlaneProjectionInfo const *)arg1)->datum();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_origin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimGpt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_origin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_origin" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimStatePlaneProjectionInfo const *)arg1)->origin();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimGpt(static_cast< const ossimGpt& >(result))), SWIGTYPE_p_ossimGpt, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_parallel1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_parallel1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_parallel1" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->parallel1();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_parallel2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_parallel2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_parallel2" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->parallel2();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_falseEasting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_falseEasting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_falseEasting" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->falseEasting();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_falseNorthing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_falseNorthing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_falseNorthing" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->falseNorthing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_falseEastingInMeters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_falseEastingInMeters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_falseEastingInMeters" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->falseEastingInMeters();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_falseNorthingInMeters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_falseNorthingInMeters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_falseNorthingInMeters" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->falseNorthingInMeters();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_scaleFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_scaleFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_scaleFactor" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (double)((ossimStatePlaneProjectionInfo const *)arg1)->scaleFactor();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_units(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_units",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_units" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = ((ossimStatePlaneProjectionInfo const *)arg1)->units();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimString(static_cast< const ossimString& >(result))), SWIGTYPE_p_ossimString, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_getUnitType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUnitType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimStatePlaneProjectionInfo_getUnitType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_getUnitType" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      result = (ossimUnitType)((ossimStatePlaneProjectionInfo const *)arg1)->getUnitType();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_matchesProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  ossimMapProjection *arg2 = (ossimMapProjection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimStatePlaneProjectionInfo_matchesProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_matchesProjection" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimMapProjection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStatePlaneProjectionInfo_matchesProjection" "', argument " "2"" of type '" "ossimMapProjection const *""'"); 
  }
  arg2 = reinterpret_cast< ossimMapProjection * >(argp2);
  {
    try
    {
      result = (bool)((ossimStatePlaneProjectionInfo const *)arg1)->matchesProjection((ossimMapProjection const *)arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_isSameCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimStatePlaneProjectionInfo_isSameCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_isSameCode" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimStatePlaneProjectionInfo_isSameCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (bool)((ossimStatePlaneProjectionInfo const *)arg1)->isSameCode(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimStatePlaneProjectionInfo_populateProjectionKeywords",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      ((ossimStatePlaneProjectionInfo const *)arg1)->populateProjectionKeywords(*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimStatePlaneProjectionInfo_populateProjectionKeywords",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimStatePlaneProjectionInfo_populateProjectionKeywords" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimStatePlaneProjectionInfo const *)arg1)->populateProjectionKeywords(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimStatePlaneProjectionInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimStatePlaneProjectionInfo_populateProjectionKeywords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimStatePlaneProjectionInfo::populateProjectionKeywords(ossimKeywordlist &,char const *) const\n"
    "    ossimStatePlaneProjectionInfo::populateProjectionKeywords(ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ossimStatePlaneProjectionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimStatePlaneProjectionInfo *arg1 = (ossimStatePlaneProjectionInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimStatePlaneProjectionInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimStatePlaneProjectionInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimStatePlaneProjectionInfo" "', argument " "1"" of type '" "ossimStatePlaneProjectionInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimStatePlaneProjectionInfo * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimStatePlaneProjectionInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimStatePlaneProjectionInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ossimTiffProjectionFactory_instance")) SWIG_fail;
  {
    try
    {
      result = (ossimTiffProjectionFactory *)ossimTiffProjectionFactory::instance();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossim_uint32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTiffProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "3"" of type '" "ossim_uint32""'");
  } 
  arg3 = static_cast< ossim_uint32 >(val3);
  {
    try
    {
      result = (ossimProjection *)((ossimTiffProjectionFactory const *)arg1)->createProjection((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimTiffProjectionFactory const *)arg1)->createProjection((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTiffProjectionFactory_createProjection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimProjection *)((ossimTiffProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimTiffProjectionFactory const *)arg1)->createProjection((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimImageHandler *arg2 = (ossimImageHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimProjection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_createProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimImageHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createProjection" "', argument " "2"" of type '" "ossimImageHandler *""'"); 
  }
  arg2 = reinterpret_cast< ossimImageHandler * >(argp2);
  {
    try
    {
      result = (ossimProjection *)((ossimTiffProjectionFactory const *)arg1)->createProjection(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimProjection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createProjection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiffProjectionFactory_createProjection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiffProjectionFactory_createProjection__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimImageHandler, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiffProjectionFactory_createProjection__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimTiffProjectionFactory_createProjection__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimTiffProjectionFactory_createProjection__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTiffProjectionFactory_createProjection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTiffProjectionFactory::createProjection(ossimFilename const &,ossim_uint32) const\n"
    "    ossimTiffProjectionFactory::createProjection(ossimString const &) const\n"
    "    ossimTiffProjectionFactory::createProjection(ossimKeywordlist const &,char const *) const\n"
    "    ossimTiffProjectionFactory::createProjection(ossimKeywordlist const &) const\n"
    "    ossimTiffProjectionFactory::createProjection(ossimImageHandler *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimString,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimString const &""'"); 
  }
  arg2 = reinterpret_cast< ossimString * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimTiffProjectionFactory const *)arg1)->createObject((ossimString const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimTiffProjectionFactory_createObject",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try
    {
      result = (ossimObject *)((ossimTiffProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2,(char const *)arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossimObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_createObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_createObject" "', argument " "2"" of type '" "ossimKeywordlist const &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      result = (ossimObject *)((ossimTiffProjectionFactory const *)arg1)->createObject((ossimKeywordlist const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_createObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiffProjectionFactory_createObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimTiffProjectionFactory_createObject__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimTiffProjectionFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimTiffProjectionFactory_createObject__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimTiffProjectionFactory_createObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimTiffProjectionFactory::createObject(ossimString const &) const\n"
    "    ossimTiffProjectionFactory::createObject(ossimKeywordlist const &,char const *) const\n"
    "    ossimTiffProjectionFactory::createObject(ossimKeywordlist const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimTiffProjectionFactory_getTypeNameList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  std::vector< ossimString,std::allocator< ossimString > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimTiffProjectionFactory_getTypeNameList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimTiffProjectionFactory_getTypeNameList" "', argument " "1"" of type '" "ossimTiffProjectionFactory const *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimTiffProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimTiffProjectionFactory_getTypeNameList" "', argument " "2"" of type '" "std::vector< ossimString,std::allocator< ossimString > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ossimString,std::allocator< ossimString > > * >(argp2);
  {
    try
    {
      ((ossimTiffProjectionFactory const *)arg1)->getTypeNameList(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimTiffProjectionFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimTiffProjectionFactory *arg1 = (ossimTiffProjectionFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimTiffProjectionFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimTiffProjectionFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimTiffProjectionFactory" "', argument " "1"" of type '" "ossimTiffProjectionFactory *""'"); 
  }
  arg1 = reinterpret_cast< ossimTiffProjectionFactory * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimTiffProjectionFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimTiffProjectionFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimUpspt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUpspt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimUpspt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimUpspt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimUpspt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimUpspt *)new ossimUpspt((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimUpspt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimUpspt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUpspt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimUpspt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimUpspt" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimUpspt" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (ossimUpspt *)new ossimUpspt((ossimEcefPoint const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimUpspt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimUpspt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimUpspt__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimUpspt__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimUpspt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimUpspt::ossimUpspt(ossimGpt const &)\n"
    "    ossimUpspt::ossimUpspt(ossimEcefPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimUpspt_hemisphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUpspt *arg1 = (ossimUpspt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUpspt_hemisphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUpspt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUpspt_hemisphere" "', argument " "1"" of type '" "ossimUpspt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUpspt * >(argp1);
  {
    try
    {
      result = (char)((ossimUpspt const *)arg1)->hemisphere();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUpspt_easting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUpspt *arg1 = (ossimUpspt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUpspt_easting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUpspt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUpspt_easting" "', argument " "1"" of type '" "ossimUpspt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUpspt * >(argp1);
  {
    try
    {
      result = (double)((ossimUpspt const *)arg1)->easting();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUpspt_northing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUpspt *arg1 = (ossimUpspt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUpspt_northing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUpspt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUpspt_northing" "', argument " "1"" of type '" "ossimUpspt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUpspt * >(argp1);
  {
    try
    {
      result = (double)((ossimUpspt const *)arg1)->northing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUpspt_datum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUpspt *arg1 = (ossimUpspt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUpspt_datum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUpspt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUpspt_datum" "', argument " "1"" of type '" "ossimUpspt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUpspt * >(argp1);
  {
    try
    {
      result = (ossimDatum *)((ossimUpspt const *)arg1)->datum();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimUpspt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUpspt *arg1 = (ossimUpspt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimUpspt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUpspt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimUpspt" "', argument " "1"" of type '" "ossimUpspt *""'"); 
  }
  arg1 = reinterpret_cast< ossimUpspt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimUpspt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimUpspt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimUtmpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimGpt *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUtmpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimUtmpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimUtmpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimUtmpt" "', argument " "1"" of type '" "ossimGpt const &""'"); 
  }
  arg1 = reinterpret_cast< ossimGpt * >(argp1);
  {
    try
    {
      result = (ossimUtmpt *)new ossimUtmpt((ossimGpt const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimUtmpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimUtmpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimEcefPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimUtmpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ossimUtmpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ossimEcefPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ossimUtmpt" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ossimUtmpt" "', argument " "1"" of type '" "ossimEcefPoint const &""'"); 
  }
  arg1 = reinterpret_cast< ossimEcefPoint * >(argp1);
  {
    try
    {
      result = (ossimUtmpt *)new ossimUtmpt((ossimEcefPoint const &)*arg1);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimUtmpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimUtmpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  char arg2 ;
  double arg3 ;
  double arg4 ;
  ossimDatum *arg5 = (ossimDatum *) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ossimUtmpt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ossimUtmpt",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ossimUtmpt" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ossimUtmpt" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ossimUtmpt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ossimUtmpt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ossimDatum, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ossimUtmpt" "', argument " "5"" of type '" "ossimDatum const *""'"); 
  }
  arg5 = reinterpret_cast< ossimDatum * >(argp5);
  {
    try
    {
      result = (ossimUtmpt *)new ossimUtmpt(arg1,arg2,arg3,arg4,(ossimDatum const *)arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimUtmpt, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ossimUtmpt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimGpt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimUtmpt__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ossimEcefPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ossimUtmpt__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_ossimDatum, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ossimUtmpt__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ossimUtmpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimUtmpt::ossimUtmpt(ossimGpt const &)\n"
    "    ossimUtmpt::ossimUtmpt(ossimEcefPoint const &)\n"
    "    ossimUtmpt::ossimUtmpt(long,char,double,double,ossimDatum const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_zone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUtmpt_zone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_zone" "', argument " "1"" of type '" "ossimUtmpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      result = (long)((ossimUtmpt const *)arg1)->zone();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_hemisphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUtmpt_hemisphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_hemisphere" "', argument " "1"" of type '" "ossimUtmpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      result = (char)((ossimUtmpt const *)arg1)->hemisphere();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_easting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUtmpt_easting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_easting" "', argument " "1"" of type '" "ossimUtmpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      result = (double)((ossimUtmpt const *)arg1)->easting();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_northing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUtmpt_northing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_northing" "', argument " "1"" of type '" "ossimUtmpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      result = (double)((ossimUtmpt const *)arg1)->northing();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_datum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ossimDatum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimUtmpt_datum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_datum" "', argument " "1"" of type '" "ossimUtmpt const *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      result = (ossimDatum *)((ossimUtmpt const *)arg1)->datum();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimDatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_convertFromGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimUtmpt_convertFromGround",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_convertFromGround" "', argument " "1"" of type '" "ossimUtmpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimUtmpt_convertFromGround" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimUtmpt_convertFromGround" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      (arg1)->convertFromGround((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimUtmpt_convertToGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimUtmpt_convertToGround",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimUtmpt_convertToGround" "', argument " "1"" of type '" "ossimUtmpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimUtmpt_convertToGround" "', argument " "2"" of type '" "ossimGpt &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimUtmpt_convertToGround" "', argument " "2"" of type '" "ossimGpt &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      (arg1)->convertToGround(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimUtmpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimUtmpt *arg1 = (ossimUtmpt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimUtmpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimUtmpt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimUtmpt" "', argument " "1"" of type '" "ossimUtmpt *""'"); 
  }
  arg1 = reinterpret_cast< ossimUtmpt * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimUtmpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimUtmpt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimElevUtil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimElevUtil")) SWIG_fail;
  {
    try
    {
      result = (ossimElevUtil *)new ossimElevUtil();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimElevUtil, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimElevUtil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *arg1 = (ossimElevUtil *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimElevUtil",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevUtil, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimElevUtil" "', argument " "1"" of type '" "ossimElevUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevUtil * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevUtil_initialize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *arg1 = (ossimElevUtil *) 0 ;
  ossimArgumentParser *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevUtil_initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevUtil_initialize" "', argument " "1"" of type '" "ossimElevUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevUtil * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimArgumentParser,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevUtil_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevUtil_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  arg2 = reinterpret_cast< ossimArgumentParser * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->initialize(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevUtil_initialize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *arg1 = (ossimElevUtil *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevUtil_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevUtil_initialize" "', argument " "1"" of type '" "ossimElevUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevUtil * >(argp1);
  {
    try
    {
      (arg1)->initialize();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevUtil_initialize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevUtil, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimElevUtil_initialize__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimElevUtil, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimArgumentParser, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimElevUtil_initialize__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimElevUtil_initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimElevUtil::initialize(ossimArgumentParser &)\n"
    "    ossimElevUtil::initialize()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimElevUtil_execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *arg1 = (ossimElevUtil *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimElevUtil_execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevUtil_execute" "', argument " "1"" of type '" "ossimElevUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevUtil * >(argp1);
  {
    try
    {
      (arg1)->execute();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimElevUtil_getOutputFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimElevUtil *arg1 = (ossimElevUtil *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimElevUtil_getOutputFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimElevUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimElevUtil_getOutputFilename" "', argument " "1"" of type '" "ossimElevUtil const *""'"); 
  }
  arg1 = reinterpret_cast< ossimElevUtil * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimElevUtil_getOutputFilename" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimElevUtil_getOutputFilename" "', argument " "2"" of type '" "ossimFilename &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      ((ossimElevUtil const *)arg1)->getOutputFilename(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimElevUtil_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimElevUtil, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimFileWalker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimFileWalker")) SWIG_fail;
  {
    try
    {
      result = (ossimFileWalker *)new ossimFileWalker();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimFileWalker, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_walk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFileWalker_walk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFileWalker_walk" "', argument " "1"" of type '" "ossimFileWalker const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFileWalker_walk" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimFileWalker_walk" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      ((ossimFileWalker const *)arg1)->walk((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_registerProcessFileCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  ossimCallback2wRet< ossimFilename const &,bool &,bool > *arg2 = (ossimCallback2wRet< ossimFilename const &,bool &,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimFileWalker_registerProcessFileCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFileWalker_registerProcessFileCallback" "', argument " "1"" of type '" "ossimFileWalker *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimFileWalker_registerProcessFileCallback" "', argument " "2"" of type '" "ossimCallback2wRet< ossimFilename const &,bool &,bool > *""'"); 
  }
  arg2 = reinterpret_cast< ossimCallback2wRet< ossimFilename const &,bool &,bool > * >(argp2);
  {
    try
    {
      (arg1)->registerProcessFileCallback(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_getFilteredExtensions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFileWalker_getFilteredExtensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFileWalker_getFilteredExtensions" "', argument " "1"" of type '" "ossimFileWalker const *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *) &((ossimFileWalker const *)arg1)->getFilteredExtensions();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_getFilteredExtensions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFileWalker_getFilteredExtensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFileWalker_getFilteredExtensions" "', argument " "1"" of type '" "ossimFileWalker *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->getFilteredExtensions();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_getFilteredExtensions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFileWalker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFileWalker_getFilteredExtensions__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimFileWalker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimFileWalker_getFilteredExtensions__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimFileWalker_getFilteredExtensions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimFileWalker::getFilteredExtensions() const\n"
    "    ossimFileWalker::getFilteredExtensions()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimFileWalker_initializeDefaultFilterList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimFileWalker_initializeDefaultFilterList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimFileWalker_initializeDefaultFilterList" "', argument " "1"" of type '" "ossimFileWalker *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  {
    try
    {
      (arg1)->initializeDefaultFilterList();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimFileWalker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimFileWalker *arg1 = (ossimFileWalker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimFileWalker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimFileWalker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimFileWalker" "', argument " "1"" of type '" "ossimFileWalker *""'"); 
  }
  arg1 = reinterpret_cast< ossimFileWalker * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimFileWalker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimFileWalker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimInfo")) SWIG_fail;
  {
    try
    {
      result = (ossimInfo *)new ossimInfo();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ossimInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ossimInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ossimInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      delete arg1;
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_addArguments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimArgumentParser *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_addArguments",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_addArguments" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimArgumentParser,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_addArguments" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_addArguments" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  arg2 = reinterpret_cast< ossimArgumentParser * >(argp2);
  {
    try
    {
      (arg1)->addArguments(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimArgumentParser *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_initialize" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimArgumentParser,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_initialize" "', argument " "2"" of type '" "ossimArgumentParser &""'"); 
  }
  arg2 = reinterpret_cast< ossimArgumentParser * >(argp2);
  {
    try
    {
      result = (bool)(arg1)->initialize(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_execute" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      (arg1)->execute();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_executeImageOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ossim_uint32 result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_executeImageOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_executeImageOptions" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_executeImageOptions" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_executeImageOptions" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      result = (ossim_uint32)(arg1)->executeImageOptions((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  ossimKeywordlist *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:ossimInfo_getImageInfo",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_getImageInfo" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageInfo" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_getImageInfo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimInfo_getImageInfo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ossimInfo_getImageInfo" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ossimInfo_getImageInfo" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ossimInfo_getImageInfo" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ossimInfo_getImageInfo" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "ossimInfo_getImageInfo" "', argument " "9"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageInfo" "', argument " "9"" of type '" "ossimKeywordlist &""'"); 
  }
  arg9 = reinterpret_cast< ossimKeywordlist * >(argp9);
  {
    try
    {
      (arg1)->getImageInfo((ossimFilename const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,*arg9);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_openImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_openImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_openImage" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_openImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_openImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      (arg1)->openImage((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_closeImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_closeImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_closeImage" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      (arg1)->closeImage();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ossimRefPtr< ossimImageHandler > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_getImageHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageHandler" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      result = (arg1)->getImageHandler();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ossimRefPtr< ossimImageHandler >(static_cast< const ossimRefPtr< ossimImageHandler >& >(result))), SWIGTYPE_p_ossimRefPtrT_ossimImageHandler_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_dumpImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_dumpImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_dumpImage" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_dumpImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_dumpImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_dumpImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      ((ossimInfo const *)arg1)->dumpImage((ossimFilename const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_dumpImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  bool arg3 ;
  ossimKeywordlist *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimInfo_dumpImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_dumpImage" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_dumpImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_dumpImage" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_dumpImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimInfo_dumpImage" "', argument " "4"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_dumpImage" "', argument " "4"" of type '" "ossimKeywordlist &""'"); 
  }
  arg4 = reinterpret_cast< ossimKeywordlist * >(argp4);
  {
    try
    {
      ((ossimInfo const *)arg1)->dumpImage((ossimFilename const &)*arg2,arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_dumpImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimInfo_dumpImage__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimInfo_dumpImage__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_dumpImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::dumpImage(ossimFilename const &,bool) const\n"
    "    ossimInfo::dumpImage(ossimFilename const &,bool,ossimKeywordlist &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printFactories(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printFactories",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printFactories" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_printFactories" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      ((ossimInfo const *)arg1)->printFactories(arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_getImageMetadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageMetadata" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_getImageMetadata" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageMetadata" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      ((ossimInfo const *)arg1)->getImageMetadata(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImagePalette(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_getImagePalette",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImagePalette" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_getImagePalette" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImagePalette" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  {
    try
    {
      (arg1)->getImagePalette(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_getImageInfo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_getImageInfo" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageInfo" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_getImageInfo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (arg1)->getImageInfo(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_uint32 arg2 ;
  ossimKeywordlist *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimInfo_getImageInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_getImageInfo" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_getImageInfo" "', argument " "3"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageInfo" "', argument " "3"" of type '" "ossimKeywordlist &""'"); 
  }
  arg3 = reinterpret_cast< ossimKeywordlist * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimInfo_getImageInfo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (bool)(arg1)->getImageInfo(arg2,*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimInfo_getImageInfo__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimInfo_getImageInfo__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_ossimInfo_getImageInfo__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_getImageInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::getImageInfo(ossimFilename const &,bool,bool,bool,bool,bool,bool,ossimKeywordlist &)\n"
    "    ossimInfo::getImageInfo(ossimKeywordlist &,bool)\n"
    "    ossimInfo::getImageInfo(ossim_uint32,ossimKeywordlist &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageGeometryInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimKeywordlist *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_getImageGeometryInfo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "2"" of type '" "ossimKeywordlist &""'"); 
  }
  arg2 = reinterpret_cast< ossimKeywordlist * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (arg1)->getImageGeometryInfo(*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageGeometryInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_uint32 arg2 ;
  ossimKeywordlist *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimInfo_getImageGeometryInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "1"" of type '" "ossimInfo *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "2"" of type '" "ossim_uint32""'");
  } 
  arg2 = static_cast< ossim_uint32 >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimKeywordlist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "3"" of type '" "ossimKeywordlist &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "3"" of type '" "ossimKeywordlist &""'"); 
  }
  arg3 = reinterpret_cast< ossimKeywordlist * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ossimInfo_getImageGeometryInfo" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try
    {
      result = (bool)(arg1)->getImageGeometryInfo(arg2,*arg3,arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getImageGeometryInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimInfo_getImageGeometryInfo__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ossimKeywordlist, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ossimInfo_getImageGeometryInfo__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_getImageGeometryInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::getImageGeometryInfo(ossimKeywordlist &,bool)\n"
    "    ossimInfo::getImageGeometryInfo(ossim_uint32,ossimKeywordlist &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_isImageEntryOverview(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_isImageEntryOverview",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_isImageEntryOverview" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      result = (bool)((ossimInfo const *)arg1)->isImageEntryOverview();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printConfiguration" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printConfiguration();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printConfiguration" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printConfiguration" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printConfiguration" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printConfiguration(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printConfiguration(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printConfiguration__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printConfiguration__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printConfiguration() const\n"
    "    ossimInfo::printConfiguration(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printDatums__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printDatums",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printDatums" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printDatums();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printDatums__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printDatums",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printDatums" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printDatums" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printDatums" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printDatums(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printDatums(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printDatums__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printDatums__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printDatums'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printDatums() const\n"
    "    ossimInfo::printDatums(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_deg2rad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_deg2rad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_deg2rad" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_deg2rad" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  {
    try
    {
      ((ossimInfo const *)arg1)->deg2rad((ossim_float64 const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_deg2rad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_deg2rad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_deg2rad" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_deg2rad" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_deg2rad" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_deg2rad" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->deg2rad((ossim_float64 const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_deg2rad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimInfo_deg2rad__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInfo_deg2rad__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_deg2rad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::deg2rad(ossim_float64 const &) const\n"
    "    ossimInfo::deg2rad(ossim_float64 const &,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_rad2deg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_rad2deg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_rad2deg" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_rad2deg" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  {
    try
    {
      ((ossimInfo const *)arg1)->rad2deg((ossim_float64 const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_rad2deg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_rad2deg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_rad2deg" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_rad2deg" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_rad2deg" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_rad2deg" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->rad2deg((ossim_float64 const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_rad2deg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimInfo_rad2deg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInfo_rad2deg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_rad2deg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::rad2deg(ossim_float64 const &) const\n"
    "    ossimInfo::rad2deg(ossim_float64 const &,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_ft2mtrs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_ft2mtrs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_ft2mtrs" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_ft2mtrs" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_ft2mtrs" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      ((ossimInfo const *)arg1)->ft2mtrs((ossim_float64 const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_ft2mtrs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  bool arg3 ;
  std::ostream *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimInfo_ft2mtrs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_ft2mtrs" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_ft2mtrs" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_ft2mtrs" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimInfo_ft2mtrs" "', argument " "4"" of type '" "std::ostream &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_ft2mtrs" "', argument " "4"" of type '" "std::ostream &""'"); 
  }
  arg4 = reinterpret_cast< std::ostream * >(argp4);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->ft2mtrs((ossim_float64 const &)*arg2,arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_ft2mtrs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimInfo_ft2mtrs__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__ostream, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimInfo_ft2mtrs__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_ft2mtrs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::ft2mtrs(ossim_float64 const &,bool) const\n"
    "    ossimInfo::ft2mtrs(ossim_float64 const &,bool,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrs2ft__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_mtrs2ft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_mtrs2ft" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_mtrs2ft" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_mtrs2ft" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      ((ossimInfo const *)arg1)->mtrs2ft((ossim_float64 const &)*arg2,arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrs2ft__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  bool arg3 ;
  std::ostream *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ossimInfo_mtrs2ft",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_mtrs2ft" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_mtrs2ft" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ossimInfo_mtrs2ft" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimInfo_mtrs2ft" "', argument " "4"" of type '" "std::ostream &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_mtrs2ft" "', argument " "4"" of type '" "std::ostream &""'"); 
  }
  arg4 = reinterpret_cast< std::ostream * >(argp4);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->mtrs2ft((ossim_float64 const &)*arg2,arg3,*arg4);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrs2ft(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ossimInfo_mtrs2ft__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__ostream, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ossimInfo_mtrs2ft__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_mtrs2ft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::mtrs2ft(ossim_float64 const &,bool) const\n"
    "    ossimInfo::mtrs2ft(ossim_float64 const &,bool,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrsPerDeg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_mtrsPerDeg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_mtrsPerDeg" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_mtrsPerDeg" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  {
    try
    {
      ((ossimInfo const *)arg1)->mtrsPerDeg((ossim_float64 const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrsPerDeg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossim_float64 *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ossim_float64 temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_mtrsPerDeg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_mtrsPerDeg" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_mtrsPerDeg" "', argument " "2"" of type '" "ossim_float64""'");
  } 
  temp2 = static_cast< ossim_float64 >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_mtrsPerDeg" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_mtrsPerDeg" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->mtrsPerDeg((ossim_float64 const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_mtrsPerDeg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ossimInfo_mtrsPerDeg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInfo_mtrsPerDeg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_mtrsPerDeg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::mtrsPerDeg(ossim_float64 const &) const\n"
    "    ossimInfo::mtrsPerDeg(ossim_float64 const &,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_outputHeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimGpt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_outputHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_outputHeight" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_outputHeight" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_outputHeight" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  {
    try
    {
      ((ossimInfo const *)arg1)->outputHeight((ossimGpt const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_outputHeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimGpt *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_outputHeight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_outputHeight" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimGpt,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_outputHeight" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_outputHeight" "', argument " "2"" of type '" "ossimGpt const &""'"); 
  }
  arg2 = reinterpret_cast< ossimGpt * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_outputHeight" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_outputHeight" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->outputHeight((ossimGpt const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_outputHeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_outputHeight__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimGpt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInfo_outputHeight__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_outputHeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::outputHeight(ossimGpt const &) const\n"
    "    ossimInfo::outputHeight(ossimGpt const &,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printPlugins__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printPlugins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printPlugins" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printPlugins();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printPlugins__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printPlugins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printPlugins" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printPlugins" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printPlugins" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printPlugins(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printPlugins(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printPlugins__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printPlugins__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printPlugins'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printPlugins() const\n"
    "    ossimInfo::printPlugins(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_testPlugin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_testPlugin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_testPlugin" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_testPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_testPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  {
    try
    {
      ((ossimInfo const *)arg1)->testPlugin((ossimFilename const &)*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_testPlugin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimFilename *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_testPlugin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_testPlugin" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_testPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_testPlugin" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_testPlugin" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_testPlugin" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->testPlugin((ossimFilename const &)*arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_testPlugin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_testPlugin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ossimFilename, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ossimInfo_testPlugin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_testPlugin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::testPlugin(ossimFilename const &) const\n"
    "    ossimInfo::testPlugin(ossimFilename const &,std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printOverviewTypes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printOverviewTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printOverviewTypes" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printOverviewTypes();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printOverviewTypes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printOverviewTypes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printOverviewTypes" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printOverviewTypes" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printOverviewTypes" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printOverviewTypes(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printOverviewTypes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printOverviewTypes__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printOverviewTypes__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printOverviewTypes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printOverviewTypes() const\n"
    "    ossimInfo::printOverviewTypes(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printProjections__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printProjections",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printProjections" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printProjections();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printProjections__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printProjections",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printProjections" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printProjections" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printProjections" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printProjections(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printProjections(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printProjections__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printProjections__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printProjections'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printProjections() const\n"
    "    ossimInfo::printProjections(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printReaderProps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printReaderProps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printReaderProps" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printReaderProps();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printReaderProps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printReaderProps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printReaderProps" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printReaderProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printReaderProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printReaderProps(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printReaderProps(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printReaderProps__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printReaderProps__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printReaderProps'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printReaderProps() const\n"
    "    ossimInfo::printReaderProps(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printResamplerFilters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printResamplerFilters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printResamplerFilters" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printResamplerFilters();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printResamplerFilters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printResamplerFilters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printResamplerFilters" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printResamplerFilters" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printResamplerFilters" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printResamplerFilters(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printResamplerFilters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printResamplerFilters__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printResamplerFilters__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printResamplerFilters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printResamplerFilters() const\n"
    "    ossimInfo::printResamplerFilters(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printWriterProps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ossimInfo_printWriterProps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printWriterProps" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  {
    try
    {
      ((ossimInfo const *)arg1)->printWriterProps();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printWriterProps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ossimInfo_printWriterProps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_printWriterProps" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimInfo_printWriterProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_printWriterProps" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((ossimInfo const *)arg1)->printWriterProps(*arg2);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimInfo_printWriterProps(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ossimInfo_printWriterProps__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ossimInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ossimInfo_printWriterProps__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ossimInfo_printWriterProps'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ossimInfo::printWriterProps() const\n"
    "    ossimInfo::printWriterProps(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ossimInfo_getRadiometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimInfo *arg1 = (ossimInfo *) 0 ;
  ossimScalarType arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimInfo_getRadiometry",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimInfo_getRadiometry" "', argument " "1"" of type '" "ossimInfo const *""'"); 
  }
  arg1 = reinterpret_cast< ossimInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ossimInfo_getRadiometry" "', argument " "2"" of type '" "ossimScalarType""'");
  } 
  arg2 = static_cast< ossimScalarType >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimInfo_getRadiometry" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimInfo_getRadiometry" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    try
    {
      ((ossimInfo const *)arg1)->getRadiometry(arg2,*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ossimRpfUtil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpfUtil *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ossimRpfUtil")) SWIG_fail;
  {
    try
    {
      result = (ossimRpfUtil *)new ossimRpfUtil();
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ossimRpfUtil, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpfUtil_writeDotRpfFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpfUtil *arg1 = (ossimRpfUtil *) 0 ;
  ossimFilename *arg2 = 0 ;
  ossimFilename *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ossimRpfUtil_writeDotRpfFiles",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpfUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpfUtil_writeDotRpfFiles" "', argument " "1"" of type '" "ossimRpfUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpfUtil * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimRpfUtil_writeDotRpfFiles" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimRpfUtil_writeDotRpfFiles" "', argument " "2"" of type '" "ossimFilename const &""'"); 
  }
  arg2 = reinterpret_cast< ossimFilename * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimRpfUtil_writeDotRpfFiles" "', argument " "3"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimRpfUtil_writeDotRpfFiles" "', argument " "3"" of type '" "ossimFilename const &""'"); 
  }
  arg3 = reinterpret_cast< ossimFilename * >(argp3);
  {
    try
    {
      (arg1)->writeDotRpfFiles((ossimFilename const &)*arg2,(ossimFilename const &)*arg3);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ossimRpfUtil_writeDotRpfFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ossimRpfUtil *arg1 = (ossimRpfUtil *) 0 ;
  ossimRpfToc *arg2 = (ossimRpfToc *) 0 ;
  ossimRpfTocEntry *arg3 = (ossimRpfTocEntry *) 0 ;
  ossimFilename *arg4 = 0 ;
  ossim_uint32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ossimRpfUtil_writeDotRpfFile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ossimRpfUtil, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "1"" of type '" "ossimRpfUtil *""'"); 
  }
  arg1 = reinterpret_cast< ossimRpfUtil * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ossimRpfToc, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "2"" of type '" "ossimRpfToc const *""'"); 
  }
  arg2 = reinterpret_cast< ossimRpfToc * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ossimRpfTocEntry, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "3"" of type '" "ossimRpfTocEntry const *""'"); 
  }
  arg3 = reinterpret_cast< ossimRpfTocEntry * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ossimFilename,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "4"" of type '" "ossimFilename const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "4"" of type '" "ossimFilename const &""'"); 
  }
  arg4 = reinterpret_cast< ossimFilename * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ossimRpfUtil_writeDotRpfFile" "', argument " "5"" of type '" "ossim_uint32""'");
  } 
  arg5 = static_cast< ossim_uint32 >(val5);
  {
    try
    {
      (arg1)->writeDotRpfFile((ossimRpfToc const *)arg2,(ossimRpfTocEntry const *)arg3,(ossimFilename const &)*arg4,arg5);
    }
    catch(const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ossimRpfUtil_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ossimRpfUtil, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_ossimInit", _wrap_delete_ossimInit, METH_VARARGS, NULL},
	 { (char *)"ossimInit_instance", _wrap_ossimInit_instance, METH_VARARGS, NULL},
	 { (char *)"ossimInit_addOptions", _wrap_ossimInit_addOptions, METH_VARARGS, NULL},
	 { (char *)"ossimInit_initialize", _wrap_ossimInit_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimInit_finalize", _wrap_ossimInit_finalize, METH_VARARGS, NULL},
	 { (char *)"ossimInit_usage", _wrap_ossimInit_usage, METH_VARARGS, NULL},
	 { (char *)"ossimInit_getElevEnabledFlag", _wrap_ossimInit_getElevEnabledFlag, METH_VARARGS, NULL},
	 { (char *)"ossimInit_setElevEnabledFlag", _wrap_ossimInit_setElevEnabledFlag, METH_VARARGS, NULL},
	 { (char *)"ossimInit_setPluginLoaderEnabledFlag", _wrap_ossimInit_setPluginLoaderEnabledFlag, METH_VARARGS, NULL},
	 { (char *)"ossimInit_loadPlugins", _wrap_ossimInit_loadPlugins, METH_VARARGS, NULL},
	 { (char *)"ossimInit_initializePlugins", _wrap_ossimInit_initializePlugins, METH_VARARGS, NULL},
	 { (char *)"ossimInit_initializeDefaultFactories", _wrap_ossimInit_initializeDefaultFactories, METH_VARARGS, NULL},
	 { (char *)"ossimInit_initializeElevation", _wrap_ossimInit_initializeElevation, METH_VARARGS, NULL},
	 { (char *)"ossimInit_initializeLogFile", _wrap_ossimInit_initializeLogFile, METH_VARARGS, NULL},
	 { (char *)"ossimInit_version", _wrap_ossimInit_version, METH_VARARGS, NULL},
	 { (char *)"ossimInit_appName", _wrap_ossimInit_appName, METH_VARARGS, NULL},
	 { (char *)"ossimInit_swigregister", ossimInit_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimDtedElevationDatabase", _wrap_new_ossimDtedElevationDatabase, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDtedElevationDatabase", _wrap_delete_ossimDtedElevationDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_dup", _wrap_ossimDtedElevationDatabase_dup, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_open", _wrap_ossimDtedElevationDatabase_open, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_pointHasCoverage", _wrap_ossimDtedElevationDatabase_pointHasCoverage, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_getAccuracyLE90", _wrap_ossimDtedElevationDatabase_getAccuracyLE90, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_getAccuracyCE90", _wrap_ossimDtedElevationDatabase_getAccuracyCE90, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_getHeightAboveMSL", _wrap_ossimDtedElevationDatabase_getHeightAboveMSL, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_getHeightAboveEllipsoid", _wrap_ossimDtedElevationDatabase_getHeightAboveEllipsoid, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_createId", _wrap_ossimDtedElevationDatabase_createId, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_loadState", _wrap_ossimDtedElevationDatabase_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_saveState", _wrap_ossimDtedElevationDatabase_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimDtedElevationDatabase_swigregister", ossimDtedElevationDatabase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimElevationDatabaseFactory", _wrap_new_ossimElevationDatabaseFactory, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseFactory_instance", _wrap_ossimElevationDatabaseFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseFactory_createDatabase", _wrap_ossimElevationDatabaseFactory_createDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseFactory_open", _wrap_ossimElevationDatabaseFactory_open, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseFactory_getTypeNameList", _wrap_ossimElevationDatabaseFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimElevationDatabaseFactory", _wrap_delete_ossimElevationDatabaseFactory, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseFactory_swigregister", ossimElevationDatabaseFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimElevationDatabaseRegistry", _wrap_new_ossimElevationDatabaseRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseRegistry_instance", _wrap_ossimElevationDatabaseRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseRegistry_getTypeNameList", _wrap_ossimElevationDatabaseRegistry_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseRegistry_createDatabase", _wrap_ossimElevationDatabaseRegistry_createDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseRegistry_open", _wrap_ossimElevationDatabaseRegistry_open, METH_VARARGS, NULL},
	 { (char *)"delete_ossimElevationDatabaseRegistry", _wrap_delete_ossimElevationDatabaseRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimElevationDatabaseRegistry_swigregister", ossimElevationDatabaseRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimElevCellHandlerFactory_instance", _wrap_ossimElevCellHandlerFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimElevCellHandlerFactory_create", _wrap_ossimElevCellHandlerFactory_create, METH_VARARGS, NULL},
	 { (char *)"ossimElevCellHandlerFactory_getList", _wrap_ossimElevCellHandlerFactory_getList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimElevCellHandlerFactory", _wrap_delete_ossimElevCellHandlerFactory, METH_VARARGS, NULL},
	 { (char *)"ossimElevCellHandlerFactory_swigregister", ossimElevCellHandlerFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimElevManager", _wrap_delete_ossimElevManager, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_instance", _wrap_ossimElevManager_instance, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getHeightAboveEllipsoid", _wrap_ossimElevManager_getHeightAboveEllipsoid, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getHeightAboveMSL", _wrap_ossimElevManager_getHeightAboveMSL, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getAccuracyLE90", _wrap_ossimElevManager_getAccuracyLE90, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getAccuracyCE90", _wrap_ossimElevManager_getAccuracyCE90, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_pointHasCoverage", _wrap_ossimElevManager_pointHasCoverage, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getMeanSpacingMeters", _wrap_ossimElevManager_getMeanSpacingMeters, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getNumberOfElevationDatabases", _wrap_ossimElevManager_getNumberOfElevationDatabases, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getElevationDatabase", _wrap_ossimElevManager_getElevationDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getElevationDatabaseList", _wrap_ossimElevManager_getElevationDatabaseList, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_addDatabase", _wrap_ossimElevManager_addDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_loadElevationPath", _wrap_ossimElevManager_loadElevationPath, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_setDefaultHeightAboveEllipsoid", _wrap_ossimElevManager_setDefaultHeightAboveEllipsoid, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_setElevationOffset", _wrap_ossimElevManager_setElevationOffset, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getElevationOffset", _wrap_ossimElevManager_getElevationOffset, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getOpenCellList", _wrap_ossimElevManager_getOpenCellList, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_setUseGeoidIfNullFlag", _wrap_ossimElevManager_setUseGeoidIfNullFlag, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_getUseGeoidIfNullFlag", _wrap_ossimElevManager_getUseGeoidIfNullFlag, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_clear", _wrap_ossimElevManager_clear, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_saveState", _wrap_ossimElevManager_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_loadState", _wrap_ossimElevManager_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimElevManager_swigregister", ossimElevManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossim2dLinearRegression", _wrap_new_ossim2dLinearRegression, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_getEquation", _wrap_ossim2dLinearRegression_getEquation, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_addPoint", _wrap_ossim2dLinearRegression_addPoint, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_clear", _wrap_ossim2dLinearRegression_clear, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_solve", _wrap_ossim2dLinearRegression_solve, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_getNumberOfPoints", _wrap_ossim2dLinearRegression_getNumberOfPoints, METH_VARARGS, NULL},
	 { (char *)"delete_ossim2dLinearRegression", _wrap_delete_ossim2dLinearRegression, METH_VARARGS, NULL},
	 { (char *)"ossim2dLinearRegression_swigregister", ossim2dLinearRegression_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossim2dTo2dTransformFactory", _wrap_new_ossim2dTo2dTransformFactory, METH_VARARGS, NULL},
	 { (char *)"ossim2dTo2dTransformFactory_instance", _wrap_ossim2dTo2dTransformFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossim2dTo2dTransformFactory_createTransform", _wrap_ossim2dTo2dTransformFactory_createTransform, METH_VARARGS, NULL},
	 { (char *)"ossim2dTo2dTransformFactory_getTypeNameList", _wrap_ossim2dTo2dTransformFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossim2dTo2dTransformFactory", _wrap_delete_ossim2dTo2dTransformFactory, METH_VARARGS, NULL},
	 { (char *)"ossim2dTo2dTransformFactory_swigregister", ossim2dTo2dTransformFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimAdjustableParameterInfo", _wrap_new_ossimAdjustableParameterInfo, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getParameter", _wrap_ossimAdjustableParameterInfo_getParameter, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setParameter", _wrap_ossimAdjustableParameterInfo_setParameter, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getSigma", _wrap_ossimAdjustableParameterInfo_getSigma, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setSigma", _wrap_ossimAdjustableParameterInfo_setSigma, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getDescription", _wrap_ossimAdjustableParameterInfo_getDescription, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setDescription", _wrap_ossimAdjustableParameterInfo_setDescription, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getUnit", _wrap_ossimAdjustableParameterInfo_getUnit, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setUnit", _wrap_ossimAdjustableParameterInfo_setUnit, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getUnitAsString", _wrap_ossimAdjustableParameterInfo_getUnitAsString, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setCenter", _wrap_ossimAdjustableParameterInfo_setCenter, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getCenter", _wrap_ossimAdjustableParameterInfo_getCenter, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setOffset", _wrap_ossimAdjustableParameterInfo_setOffset, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_computeOffset", _wrap_ossimAdjustableParameterInfo_computeOffset, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_setLockFlag", _wrap_ossimAdjustableParameterInfo_setLockFlag, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_getLockFlag", _wrap_ossimAdjustableParameterInfo_getLockFlag, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_loadState", _wrap_ossimAdjustableParameterInfo_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_saveState", _wrap_ossimAdjustableParameterInfo_saveState, METH_VARARGS, NULL},
	 { (char *)"delete_ossimAdjustableParameterInfo", _wrap_delete_ossimAdjustableParameterInfo, METH_VARARGS, NULL},
	 { (char *)"ossimAdjustableParameterInfo_swigregister", ossimAdjustableParameterInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimCsvFile", _wrap_new_ossimCsvFile, METH_VARARGS, NULL},
	 { (char *)"delete_ossimCsvFile", _wrap_delete_ossimCsvFile, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_open", _wrap_ossimCsvFile_open, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_close", _wrap_ossimCsvFile_close, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_readHeader", _wrap_ossimCsvFile_readHeader, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_nextRecord", _wrap_ossimCsvFile_nextRecord, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_fieldHeaderList", _wrap_ossimCsvFile_fieldHeaderList, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_indexOfField", _wrap_ossimCsvFile_indexOfField, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_INVALID_INDEX_get", _wrap_ossimCsvFile_INVALID_INDEX_get, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_INVALID_INDEX_set", _wrap_ossimCsvFile_INVALID_INDEX_set, METH_VARARGS, NULL},
	 { (char *)"ossimCsvFile_swigregister", ossimCsvFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_iterator", _wrap_vectorossimString_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___nonzero__", _wrap_vectorossimString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___bool__", _wrap_vectorossimString___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___len__", _wrap_vectorossimString___len__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_pop", _wrap_vectorossimString_pop, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___getslice__", _wrap_vectorossimString___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___setslice__", _wrap_vectorossimString___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___delslice__", _wrap_vectorossimString___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___delitem__", _wrap_vectorossimString___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___getitem__", _wrap_vectorossimString___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString___setitem__", _wrap_vectorossimString___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_append", _wrap_vectorossimString_append, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_empty", _wrap_vectorossimString_empty, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_size", _wrap_vectorossimString_size, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_clear", _wrap_vectorossimString_clear, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_swap", _wrap_vectorossimString_swap, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_get_allocator", _wrap_vectorossimString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_begin", _wrap_vectorossimString_begin, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_end", _wrap_vectorossimString_end, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_rbegin", _wrap_vectorossimString_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_rend", _wrap_vectorossimString_rend, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_pop_back", _wrap_vectorossimString_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_erase", _wrap_vectorossimString_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorossimString", _wrap_new_vectorossimString, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_push_back", _wrap_vectorossimString_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_front", _wrap_vectorossimString_front, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_back", _wrap_vectorossimString_back, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_assign", _wrap_vectorossimString_assign, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_resize", _wrap_vectorossimString_resize, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_insert", _wrap_vectorossimString_insert, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_reserve", _wrap_vectorossimString_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_capacity", _wrap_vectorossimString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorossimString", _wrap_delete_vectorossimString, METH_VARARGS, NULL},
	 { (char *)"vectorossimString_swigregister", vectorossimString_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDatumFactory", _wrap_delete_ossimDatumFactory, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_create", _wrap_ossimDatumFactory_create, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_instance", _wrap_ossimDatumFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_wgs84", _wrap_ossimDatumFactory_wgs84, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_wgs72", _wrap_ossimDatumFactory_wgs72, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_getList", _wrap_ossimDatumFactory_getList, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_writeCStructure", _wrap_ossimDatumFactory_writeCStructure, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactory_swigregister", ossimDatumFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDatumFactoryRegistry", _wrap_delete_ossimDatumFactoryRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactoryRegistry_instance", _wrap_ossimDatumFactoryRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactoryRegistry_registerFactory", _wrap_ossimDatumFactoryRegistry_registerFactory, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactoryRegistry_create", _wrap_ossimDatumFactoryRegistry_create, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactoryRegistry_getList", _wrap_ossimDatumFactoryRegistry_getList, METH_VARARGS, NULL},
	 { (char *)"ossimDatumFactoryRegistry_swigregister", ossimDatumFactoryRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_shift", _wrap_ossimDatum_shift, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_shiftToWgs84", _wrap_ossimDatum_shiftToWgs84, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_shiftFromWgs84", _wrap_ossimDatum_shiftFromWgs84, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_isTheSameAs", _wrap_ossimDatum_isTheSameAs, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_code", _wrap_ossimDatum_code, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_name", _wrap_ossimDatum_name, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_epsgCode", _wrap_ossimDatum_epsgCode, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_ellipsoid", _wrap_ossimDatum_ellipsoid, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_sigmaX", _wrap_ossimDatum_sigmaX, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_sigmaY", _wrap_ossimDatum_sigmaY, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_sigmaZ", _wrap_ossimDatum_sigmaZ, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_westLongitude", _wrap_ossimDatum_westLongitude, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_eastLongitude", _wrap_ossimDatum_eastLongitude, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_southLatitude", _wrap_ossimDatum_southLatitude, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_northLatitude", _wrap_ossimDatum_northLatitude, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param1", _wrap_ossimDatum_param1, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param2", _wrap_ossimDatum_param2, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param3", _wrap_ossimDatum_param3, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param4", _wrap_ossimDatum_param4, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param5", _wrap_ossimDatum_param5, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param6", _wrap_ossimDatum_param6, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_param7", _wrap_ossimDatum_param7, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_isInside", _wrap_ossimDatum_isInside, METH_VARARGS, NULL},
	 { (char *)"ossimDatum___eq__", _wrap_ossimDatum___eq__, METH_VARARGS, NULL},
	 { (char *)"ossimDatum___ne__", _wrap_ossimDatum___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimDatum_swigregister", ossimDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimDirectoryData", _wrap_new_ossimDirectoryData, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDirectoryData", _wrap_delete_ossimDirectoryData, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_isOk", _wrap_ossimDirectoryData_isOk, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_setFlags", _wrap_ossimDirectoryData_setFlags, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_getFlags", _wrap_ossimDirectoryData_getFlags, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_rewind", _wrap_ossimDirectoryData_rewind, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_read", _wrap_ossimDirectoryData_read, METH_VARARGS, NULL},
	 { (char *)"ossimDirectoryData_swigregister", ossimDirectoryData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimDirectory", _wrap_new_ossimDirectory, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDirectory", _wrap_delete_ossimDirectory, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_open", _wrap_ossimDirectory_open, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_isOpened", _wrap_ossimDirectory_isOpened, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_getFirst", _wrap_ossimDirectory_getFirst, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_getNext", _wrap_ossimDirectory_getNext, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_findAllFilesThatMatch", _wrap_ossimDirectory_findAllFilesThatMatch, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_findCaseInsensitiveEquivalents", _wrap_ossimDirectory_findCaseInsensitiveEquivalents, METH_VARARGS, NULL},
	 { (char *)"ossimDirectory_swigregister", ossimDirectory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimDpt3d", _wrap_new_ossimDpt3d, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___cmp__", _wrap_ossimDpt3d___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___ne__", _wrap_ossimDpt3d___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_makeNan", _wrap_ossimDpt3d_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_hasNans", _wrap_ossimDpt3d_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_length", _wrap_ossimDpt3d_length, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_length2", _wrap_ossimDpt3d_length2, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___add__", _wrap_ossimDpt3d___add__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___sub__", _wrap_ossimDpt3d___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___iadd__", _wrap_ossimDpt3d___iadd__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___isub__", _wrap_ossimDpt3d___isub__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___div__", _wrap_ossimDpt3d___div__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___idiv__", _wrap_ossimDpt3d___idiv__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___imul__", _wrap_ossimDpt3d___imul__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___mul__", _wrap_ossimDpt3d___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d___xor__", _wrap_ossimDpt3d___xor__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_toString", _wrap_ossimDpt3d_toString, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_toPoint", _wrap_ossimDpt3d_toPoint, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_x_set", _wrap_ossimDpt3d_x_set, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_x_get", _wrap_ossimDpt3d_x_get, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_y_set", _wrap_ossimDpt3d_y_set, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_y_get", _wrap_ossimDpt3d_y_get, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_z_set", _wrap_ossimDpt3d_z_set, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_z_get", _wrap_ossimDpt3d_z_get, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDpt3d", _wrap_delete_ossimDpt3d, METH_VARARGS, NULL},
	 { (char *)"ossimDpt3d_swigregister", ossimDpt3d_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimDpt", _wrap_new_ossimDpt, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___set__", _wrap_ossimDpt___set__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___cmp__", _wrap_ossimDpt___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___ne__", _wrap_ossimDpt___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_makeNan", _wrap_ossimDpt_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_hasNans", _wrap_ossimDpt_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_isNan", _wrap_ossimDpt_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_length", _wrap_ossimDpt_length, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___add__", _wrap_ossimDpt___add__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___sub__", _wrap_ossimDpt___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___iadd__", _wrap_ossimDpt___iadd__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___isub__", _wrap_ossimDpt___isub__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___mul__", _wrap_ossimDpt___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt___div__", _wrap_ossimDpt___div__, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_ossimDpt_print", _wrap_ossimDpt_ossimDpt_print, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_toString", _wrap_ossimDpt_toString, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_toPoint", _wrap_ossimDpt_toPoint, METH_VARARGS, NULL},
	 { (char *)"delete_ossimDpt", _wrap_delete_ossimDpt, METH_VARARGS, NULL},
	 { (char *)"ossimDpt_swigregister", ossimDpt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimEbcdicToAscii", _wrap_new_ossimEbcdicToAscii, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEbcdicToAscii", _wrap_delete_ossimEbcdicToAscii, METH_VARARGS, NULL},
	 { (char *)"ossimEbcdicToAscii_asciiToEbcdic", _wrap_ossimEbcdicToAscii_asciiToEbcdic, METH_VARARGS, NULL},
	 { (char *)"ossimEbcdicToAscii_ebcdicToAscii", _wrap_ossimEbcdicToAscii_ebcdicToAscii, METH_VARARGS, NULL},
	 { (char *)"ossimEbcdicToAscii_swigregister", ossimEbcdicToAscii_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimEcefPoint", _wrap_new_ossimEcefPoint, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_makeNan", _wrap_ossimEcefPoint_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_hasNans", _wrap_ossimEcefPoint_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_isNan", _wrap_ossimEcefPoint_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___add__", _wrap_ossimEcefPoint___add__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___sub__", _wrap_ossimEcefPoint___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___set__", _wrap_ossimEcefPoint___set__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___cmp__", _wrap_ossimEcefPoint___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___ne__", _wrap_ossimEcefPoint___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_x", _wrap_ossimEcefPoint_x, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_y", _wrap_ossimEcefPoint_y, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_z", _wrap_ossimEcefPoint_z, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint___getitem__", _wrap_ossimEcefPoint___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_data", _wrap_ossimEcefPoint_data, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_getMagnitude", _wrap_ossimEcefPoint_getMagnitude, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_magnitude", _wrap_ossimEcefPoint_magnitude, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_length", _wrap_ossimEcefPoint_length, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_normalize", _wrap_ossimEcefPoint_normalize, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_toString", _wrap_ossimEcefPoint_toString, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_toPoint", _wrap_ossimEcefPoint_toPoint, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_ossimEcefPoint_print", _wrap_ossimEcefPoint_ossimEcefPoint_print, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEcefPoint", _wrap_delete_ossimEcefPoint, METH_VARARGS, NULL},
	 { (char *)"ossimEcefPoint_swigregister", ossimEcefPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimEcefVector", _wrap_new_ossimEcefVector, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_makeNan", _wrap_ossimEcefVector_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_hasNans", _wrap_ossimEcefVector_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_isNan", _wrap_ossimEcefVector_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___sub__", _wrap_ossimEcefVector___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___add__", _wrap_ossimEcefVector___add__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___mul__", _wrap_ossimEcefVector___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___div__", _wrap_ossimEcefVector___div__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___cmp__", _wrap_ossimEcefVector___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___ne__", _wrap_ossimEcefVector___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___set__", _wrap_ossimEcefVector___set__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_dot", _wrap_ossimEcefVector_dot, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_angleTo", _wrap_ossimEcefVector_angleTo, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_cross", _wrap_ossimEcefVector_cross, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_unitVector", _wrap_ossimEcefVector_unitVector, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_magnitude", _wrap_ossimEcefVector_magnitude, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_norm2", _wrap_ossimEcefVector_norm2, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_length", _wrap_ossimEcefVector_length, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_normalize", _wrap_ossimEcefVector_normalize, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_x", _wrap_ossimEcefVector_x, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_y", _wrap_ossimEcefVector_y, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_z", _wrap_ossimEcefVector_z, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector___getitem__", _wrap_ossimEcefVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_data", _wrap_ossimEcefVector_data, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_toString", _wrap_ossimEcefVector_toString, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_toPoint", _wrap_ossimEcefVector_toPoint, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_ossimEcefVector_print", _wrap_ossimEcefVector_ossimEcefVector_print, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEcefVector", _wrap_delete_ossimEcefVector, METH_VARARGS, NULL},
	 { (char *)"ossimEcefVector_swigregister", ossimEcefVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEllipsoidFactory", _wrap_delete_ossimEllipsoidFactory, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_create", _wrap_ossimEllipsoidFactory_create, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_wgs84", _wrap_ossimEllipsoidFactory_wgs84, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_wgs72", _wrap_ossimEllipsoidFactory_wgs72, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_findEpsgCode", _wrap_ossimEllipsoidFactory_findEpsgCode, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_instance", _wrap_ossimEllipsoidFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoidFactory_swigregister", ossimEllipsoidFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimEllipsoid", _wrap_new_ossimEllipsoid, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEllipsoid", _wrap_delete_ossimEllipsoid, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_name", _wrap_ossimEllipsoid_name, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_code", _wrap_ossimEllipsoid_code, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_a", _wrap_ossimEllipsoid_a, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_b", _wrap_ossimEllipsoid_b, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_getA", _wrap_ossimEllipsoid_getA, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_getB", _wrap_ossimEllipsoid_getB, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_getFlattening", _wrap_ossimEllipsoid_getFlattening, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_setA", _wrap_ossimEllipsoid_setA, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_setB", _wrap_ossimEllipsoid_setB, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_setAB", _wrap_ossimEllipsoid_setAB, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_setEpsgCode", _wrap_ossimEllipsoid_setEpsgCode, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_eccentricitySquared", _wrap_ossimEllipsoid_eccentricitySquared, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_flattening", _wrap_ossimEllipsoid_flattening, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_eccentricity", _wrap_ossimEllipsoid_eccentricity, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_getEpsgCode", _wrap_ossimEllipsoid_getEpsgCode, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_nearestIntersection", _wrap_ossimEllipsoid_nearestIntersection, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_evaluate", _wrap_ossimEllipsoid_evaluate, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_gradient", _wrap_ossimEllipsoid_gradient, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_prinRadiiOfCurv", _wrap_ossimEllipsoid_prinRadiiOfCurv, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_jacobianWrtEcef", _wrap_ossimEllipsoid_jacobianWrtEcef, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_jacobianWrtGeo", _wrap_ossimEllipsoid_jacobianWrtGeo, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_geodeticRadius", _wrap_ossimEllipsoid_geodeticRadius, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_geodeticRadii", _wrap_ossimEllipsoid_geodeticRadii, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_latLonHeightToXYZ", _wrap_ossimEllipsoid_latLonHeightToXYZ, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_XYZToLatLonHeight", _wrap_ossimEllipsoid_XYZToLatLonHeight, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_computeLocalToWorldTransformFromXYZ", _wrap_ossimEllipsoid_computeLocalToWorldTransformFromXYZ, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid___cmp__", _wrap_ossimEllipsoid___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid___ne__", _wrap_ossimEllipsoid___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_loadState", _wrap_ossimEllipsoid_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_saveState", _wrap_ossimEllipsoid_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid___set__", _wrap_ossimEllipsoid___set__, METH_VARARGS, NULL},
	 { (char *)"ossimEllipsoid_swigregister", ossimEllipsoid_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_instance", _wrap_ossimEnvironmentUtility_instance, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getEnvironmentVariable", _wrap_ossimEnvironmentUtility_getEnvironmentVariable, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getUserDir", _wrap_ossimEnvironmentUtility_getUserDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getUserName", _wrap_ossimEnvironmentUtility_getUserName, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getUserOssimSupportDir", _wrap_ossimEnvironmentUtility_getUserOssimSupportDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getUserOssimPreferences", _wrap_ossimEnvironmentUtility_getUserOssimPreferences, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getUserOssimPluginDir", _wrap_ossimEnvironmentUtility_getUserOssimPluginDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getInstalledOssimSupportDir", _wrap_ossimEnvironmentUtility_getInstalledOssimSupportDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getInstalledOssimPluginDir", _wrap_ossimEnvironmentUtility_getInstalledOssimPluginDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getInstalledOssimPreferences", _wrap_ossimEnvironmentUtility_getInstalledOssimPreferences, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getCurrentWorkingDir", _wrap_ossimEnvironmentUtility_getCurrentWorkingDir, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_searchAllPaths", _wrap_ossimEnvironmentUtility_searchAllPaths, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_findPlugin", _wrap_ossimEnvironmentUtility_findPlugin, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_findData", _wrap_ossimEnvironmentUtility_findData, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_addDataSearchPath", _wrap_ossimEnvironmentUtility_addDataSearchPath, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_addDataSearchPathToFront", _wrap_ossimEnvironmentUtility_addDataSearchPathToFront, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_addPluginSearchPath", _wrap_ossimEnvironmentUtility_addPluginSearchPath, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_addPluginSearchPathToFront", _wrap_ossimEnvironmentUtility_addPluginSearchPathToFront, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getPluginSearchPath", _wrap_ossimEnvironmentUtility_getPluginSearchPath, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_getDataSearchPath", _wrap_ossimEnvironmentUtility_getDataSearchPath, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEnvironmentUtility", _wrap_delete_ossimEnvironmentUtility, METH_VARARGS, NULL},
	 { (char *)"ossimEnvironmentUtility_swigregister", ossimEnvironmentUtility_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_instance", _wrap_ossimEpsgDatumFactory_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEpsgDatumFactory", _wrap_delete_ossimEpsgDatumFactory, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_getList", _wrap_ossimEpsgDatumFactory_getList, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_create", _wrap_ossimEpsgDatumFactory_create, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_findEpsgCode", _wrap_ossimEpsgDatumFactory_findEpsgCode, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_findAlphaCode", _wrap_ossimEpsgDatumFactory_findAlphaCode, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgDatumFactory_swigregister", ossimEpsgDatumFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimErrorCodes", _wrap_delete_ossimErrorCodes, METH_VARARGS, NULL},
	 { (char *)"ossimErrorCodes_instance", _wrap_ossimErrorCodes_instance, METH_VARARGS, NULL},
	 { (char *)"ossimErrorCodes_getErrorCode", _wrap_ossimErrorCodes_getErrorCode, METH_VARARGS, NULL},
	 { (char *)"ossimErrorCodes_getErrorString", _wrap_ossimErrorCodes_getErrorString, METH_VARARGS, NULL},
	 { (char *)"ossimErrorCodes_swigregister", ossimErrorCodes_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimException", _wrap_new_ossimException, METH_VARARGS, NULL},
	 { (char *)"delete_ossimException", _wrap_delete_ossimException, METH_VARARGS, NULL},
	 { (char *)"ossimException_what", _wrap_ossimException_what, METH_VARARGS, NULL},
	 { (char *)"ossimException_swigregister", ossimException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimFilename", _wrap_new_ossimFilename, METH_VARARGS, NULL},
	 { (char *)"ossimFilename___cmp__", _wrap_ossimFilename___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_convertBackToForwardSlashes", _wrap_ossimFilename_convertBackToForwardSlashes, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_convertForwardToBackSlashes", _wrap_ossimFilename_convertForwardToBackSlashes, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_setTimes", _wrap_ossimFilename_setTimes, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_getTimes", _wrap_ossimFilename_getTimes, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_touch", _wrap_ossimFilename_touch, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_expand", _wrap_ossimFilename_expand, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_exists", _wrap_ossimFilename_exists, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isFile", _wrap_ossimFilename_isFile, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isDir", _wrap_ossimFilename_isDir, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isReadable", _wrap_ossimFilename_isReadable, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isWriteable", _wrap_ossimFilename_isWriteable, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isExecutable", _wrap_ossimFilename_isExecutable, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_fileSize", _wrap_ossimFilename_fileSize, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_ext", _wrap_ossimFilename_ext, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_path", _wrap_ossimFilename_path, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_drive", _wrap_ossimFilename_drive, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_file", _wrap_ossimFilename_file, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_fileNoExtension", _wrap_ossimFilename_fileNoExtension, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_noExtension", _wrap_ossimFilename_noExtension, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_setExtension", _wrap_ossimFilename_setExtension, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_setDrive", _wrap_ossimFilename_setDrive, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_setPath", _wrap_ossimFilename_setPath, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_setFile", _wrap_ossimFilename_setFile, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_split", _wrap_ossimFilename_split, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_merge", _wrap_ossimFilename_merge, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_dirCat", _wrap_ossimFilename_dirCat, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_createDirectory", _wrap_ossimFilename_createDirectory, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_rename", _wrap_ossimFilename_rename, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_remove", _wrap_ossimFilename_remove, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_wildcardRemove", _wrap_ossimFilename_wildcardRemove, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_copyFileTo", _wrap_ossimFilename_copyFileTo, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_isRelative", _wrap_ossimFilename_isRelative, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_needsExpansion", _wrap_ossimFilename_needsExpansion, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_getPathSeparator", _wrap_ossimFilename_getPathSeparator, METH_VARARGS, NULL},
	 { (char *)"delete_ossimFilename", _wrap_delete_ossimFilename, METH_VARARGS, NULL},
	 { (char *)"ossimFilename_swigregister", ossimFilename_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimFontInformation", _wrap_new_ossimFontInformation, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_isFixed", _wrap_ossimFontInformation_isFixed, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_saveState", _wrap_ossimFontInformation_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_loadState", _wrap_ossimFontInformation_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation___cmp__", _wrap_ossimFontInformation___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation___ne__", _wrap_ossimFontInformation___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation___set__", _wrap_ossimFontInformation___set__, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_FAMILY_NAME_KW_get", _wrap_ossimFontInformation_FAMILY_NAME_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_FAMILY_NAME_KW_set", _wrap_ossimFontInformation_FAMILY_NAME_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_STYLE_NAME_KW_get", _wrap_ossimFontInformation_STYLE_NAME_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_STYLE_NAME_KW_set", _wrap_ossimFontInformation_STYLE_NAME_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_KW_get", _wrap_ossimFontInformation_POINT_SIZE_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_KW_set", _wrap_ossimFontInformation_POINT_SIZE_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_X_KW_get", _wrap_ossimFontInformation_POINT_SIZE_X_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_X_KW_set", _wrap_ossimFontInformation_POINT_SIZE_X_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_Y_KW_get", _wrap_ossimFontInformation_POINT_SIZE_Y_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_POINT_SIZE_Y_KW_set", _wrap_ossimFontInformation_POINT_SIZE_Y_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_FIXED_FLAG_KW_get", _wrap_ossimFontInformation_FIXED_FLAG_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_FIXED_FLAG_KW_set", _wrap_ossimFontInformation_FIXED_FLAG_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_KW_get", _wrap_ossimFontInformation_SHEAR_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_KW_set", _wrap_ossimFontInformation_SHEAR_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_X_KW_get", _wrap_ossimFontInformation_SHEAR_X_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_X_KW_set", _wrap_ossimFontInformation_SHEAR_X_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_Y_KW_get", _wrap_ossimFontInformation_SHEAR_Y_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SHEAR_Y_KW_set", _wrap_ossimFontInformation_SHEAR_Y_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_KW_get", _wrap_ossimFontInformation_SCALE_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_KW_set", _wrap_ossimFontInformation_SCALE_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_X_KW_get", _wrap_ossimFontInformation_SCALE_X_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_X_KW_set", _wrap_ossimFontInformation_SCALE_X_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_Y_KW_get", _wrap_ossimFontInformation_SCALE_Y_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_SCALE_Y_KW_set", _wrap_ossimFontInformation_SCALE_Y_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_ROTATION_KW_get", _wrap_ossimFontInformation_ROTATION_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_ROTATION_KW_set", _wrap_ossimFontInformation_ROTATION_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theFamilyName_set", _wrap_ossimFontInformation_theFamilyName_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theFamilyName_get", _wrap_ossimFontInformation_theFamilyName_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theStyleName_set", _wrap_ossimFontInformation_theStyleName_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theStyleName_get", _wrap_ossimFontInformation_theStyleName_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_thePointSize_set", _wrap_ossimFontInformation_thePointSize_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_thePointSize_get", _wrap_ossimFontInformation_thePointSize_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theFixedFlag_set", _wrap_ossimFontInformation_theFixedFlag_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theFixedFlag_get", _wrap_ossimFontInformation_theFixedFlag_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theScale_set", _wrap_ossimFontInformation_theScale_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theScale_get", _wrap_ossimFontInformation_theScale_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theRotation_set", _wrap_ossimFontInformation_theRotation_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theRotation_get", _wrap_ossimFontInformation_theRotation_get, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theShear_set", _wrap_ossimFontInformation_theShear_set, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_theShear_get", _wrap_ossimFontInformation_theShear_get, METH_VARARGS, NULL},
	 { (char *)"delete_ossimFontInformation", _wrap_delete_ossimFontInformation, METH_VARARGS, NULL},
	 { (char *)"ossimFontInformation_swigregister", ossimFontInformation_swigregister, METH_VARARGS, NULL},
	 { (char *)"Set_Geocentric_Parameters", _wrap_Set_Geocentric_Parameters, METH_VARARGS, NULL},
	 { (char *)"Get_Geocentric_Parameters", _wrap_Get_Geocentric_Parameters, METH_VARARGS, NULL},
	 { (char *)"Convert_Geodetic_To_Geocentric", _wrap_Convert_Geodetic_To_Geocentric, METH_VARARGS, NULL},
	 { (char *)"Convert_Geocentric_To_Geodetic", _wrap_Convert_Geocentric_To_Geodetic, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoidNgsHeader", _wrap_new_ossimGeoidNgsHeader, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_initialize", _wrap_ossimGeoidNgsHeader_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_southernMostLat", _wrap_ossimGeoidNgsHeader_southernMostLat, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_westernMostLon", _wrap_ossimGeoidNgsHeader_westernMostLon, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_latDelta", _wrap_ossimGeoidNgsHeader_latDelta, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_lonDelta", _wrap_ossimGeoidNgsHeader_lonDelta, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_rows", _wrap_ossimGeoidNgsHeader_rows, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_cols", _wrap_ossimGeoidNgsHeader_cols, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_dataType", _wrap_ossimGeoidNgsHeader_dataType, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_pointWithin", _wrap_ossimGeoidNgsHeader_pointWithin, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_filename", _wrap_ossimGeoidNgsHeader_filename, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_headerSize", _wrap_ossimGeoidNgsHeader_headerSize, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_dataTypeSize", _wrap_ossimGeoidNgsHeader_dataTypeSize, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_getHeightDelta", _wrap_ossimGeoidNgsHeader_getHeightDelta, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoidNgsHeader", _wrap_delete_ossimGeoidNgsHeader, METH_VARARGS, NULL},
	 { (char *)"ossimGeoidNgsHeader_swigregister", ossimGeoidNgsHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoPolygon", _wrap_new_ossimGeoPolygon, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_addPoint", _wrap_ossimGeoPolygon_addPoint, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_addAttribute", _wrap_ossimGeoPolygon_addAttribute, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_addHole", _wrap_ossimGeoPolygon_addHole, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon___getitem__", _wrap_ossimGeoPolygon___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_getVertexList", _wrap_ossimGeoPolygon_getVertexList, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_getAttributeList", _wrap_ossimGeoPolygon_getAttributeList, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_getHoleList", _wrap_ossimGeoPolygon_getHoleList, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_clear", _wrap_ossimGeoPolygon_clear, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_size", _wrap_ossimGeoPolygon_size, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_resize", _wrap_ossimGeoPolygon_resize, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon___set__", _wrap_ossimGeoPolygon___set__, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_stretchOut", _wrap_ossimGeoPolygon_stretchOut, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_area", _wrap_ossimGeoPolygon_area, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_computeCentroid", _wrap_ossimGeoPolygon_computeCentroid, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_vertex", _wrap_ossimGeoPolygon_vertex, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_nextVertex", _wrap_ossimGeoPolygon_nextVertex, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_hasNans", _wrap_ossimGeoPolygon_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_reverseOrder", _wrap_ossimGeoPolygon_reverseOrder, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_saveState", _wrap_ossimGeoPolygon_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_loadState", _wrap_ossimGeoPolygon_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_checkOrdering", _wrap_ossimGeoPolygon_checkOrdering, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_getOrdering", _wrap_ossimGeoPolygon_getOrdering, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_setOrdering", _wrap_ossimGeoPolygon_setOrdering, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoPolygon", _wrap_delete_ossimGeoPolygon, METH_VARARGS, NULL},
	 { (char *)"ossimGeoPolygon_swigregister", ossimGeoPolygon_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoref", _wrap_new_ossimGeoref, METH_VARARGS, NULL},
	 { (char *)"ossimGeoref_toString", _wrap_ossimGeoref_toString, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoref", _wrap_delete_ossimGeoref, METH_VARARGS, NULL},
	 { (char *)"ossimGeoref_swigregister", ossimGeoref_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoTiffCoordTransformsLut", _wrap_new_ossimGeoTiffCoordTransformsLut, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoTiffCoordTransformsLut", _wrap_delete_ossimGeoTiffCoordTransformsLut, METH_VARARGS, NULL},
	 { (char *)"ossimGeoTiffCoordTransformsLut_getKeyword", _wrap_ossimGeoTiffCoordTransformsLut_getKeyword, METH_VARARGS, NULL},
	 { (char *)"ossimGeoTiffCoordTransformsLut_swigregister", ossimGeoTiffCoordTransformsLut_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoTiffDatumLut", _wrap_new_ossimGeoTiffDatumLut, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoTiffDatumLut", _wrap_delete_ossimGeoTiffDatumLut, METH_VARARGS, NULL},
	 { (char *)"ossimGeoTiffDatumLut_getKeyword", _wrap_ossimGeoTiffDatumLut_getKeyword, METH_VARARGS, NULL},
	 { (char *)"ossimGeoTiffDatumLut_swigregister", ossimGeoTiffDatumLut_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimIpt", _wrap_new_ossimIpt, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___set__", _wrap_ossimIpt___set__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___cmp__", _wrap_ossimIpt___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___ne__", _wrap_ossimIpt___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_makeNan", _wrap_ossimIpt_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_hasNans", _wrap_ossimIpt_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_isNan", _wrap_ossimIpt_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_ossimIpt_print", _wrap_ossimIpt_ossimIpt_print, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_toString", _wrap_ossimIpt_toString, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_toPoint", _wrap_ossimIpt_toPoint, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_length", _wrap_ossimIpt_length, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___add__", _wrap_ossimIpt___add__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___sub__", _wrap_ossimIpt___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___iadd__", _wrap_ossimIpt___iadd__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___isub__", _wrap_ossimIpt___isub__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___mul__", _wrap_ossimIpt___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimIpt___div__", _wrap_ossimIpt___div__, METH_VARARGS, NULL},
	 { (char *)"delete_ossimIpt", _wrap_delete_ossimIpt, METH_VARARGS, NULL},
	 { (char *)"ossimIpt_swigregister", ossimIpt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimIrect", _wrap_new_ossimIrect, METH_VARARGS, NULL},
	 { (char *)"delete_ossimIrect", _wrap_delete_ossimIrect, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___set__", _wrap_ossimIrect___set__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___ne__", _wrap_ossimIrect___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___cmp__", _wrap_ossimIrect___cmp__, METH_VARARGS, NULL},
	 { (char *)"__mul__", _wrap___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___imul__", _wrap_ossimIrect___imul__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___mul__", _wrap_ossimIrect___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___iadd__", _wrap_ossimIrect___iadd__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___isub__", _wrap_ossimIrect___isub__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___add__", _wrap_ossimIrect___add__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect___sub__", _wrap_ossimIrect___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_ul", _wrap_ossimIrect_ul, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_ur", _wrap_ossimIrect_ur, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_lr", _wrap_ossimIrect_lr, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_ll", _wrap_ossimIrect_ll, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_changeOrientationMode", _wrap_ossimIrect_changeOrientationMode, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_getBounds", _wrap_ossimIrect_getBounds, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_getCenter", _wrap_ossimIrect_getCenter, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_makeNan", _wrap_ossimIrect_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_hasNans", _wrap_ossimIrect_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_isNan", _wrap_ossimIrect_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_orientMode", _wrap_ossimIrect_orientMode, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_setOrientMode", _wrap_ossimIrect_setOrientMode, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_stretchToTileBoundary", _wrap_ossimIrect_stretchToTileBoundary, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_toString", _wrap_ossimIrect_toString, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_toRect", _wrap_ossimIrect_toRect, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_expand", _wrap_ossimIrect_expand, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_insureMinimumSize", _wrap_ossimIrect_insureMinimumSize, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_area", _wrap_ossimIrect_area, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_ul", _wrap_ossimIrect_set_ul, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_ur", _wrap_ossimIrect_set_ur, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_lr", _wrap_ossimIrect_set_lr, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_ll", _wrap_ossimIrect_set_ll, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_ulx", _wrap_ossimIrect_set_ulx, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_uly", _wrap_ossimIrect_set_uly, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_urx", _wrap_ossimIrect_set_urx, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_ury", _wrap_ossimIrect_set_ury, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_lrx", _wrap_ossimIrect_set_lrx, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_lry", _wrap_ossimIrect_set_lry, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_llx", _wrap_ossimIrect_set_llx, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_set_lly", _wrap_ossimIrect_set_lly, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_pointWithin", _wrap_ossimIrect_pointWithin, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_intersects", _wrap_ossimIrect_intersects, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_completely_within", _wrap_ossimIrect_completely_within, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_orientationMode", _wrap_ossimIrect_orientationMode, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_height", _wrap_ossimIrect_height, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_width", _wrap_ossimIrect_width, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_size", _wrap_ossimIrect_size, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_clipToRect", _wrap_ossimIrect_clipToRect, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_midPoint", _wrap_ossimIrect_midPoint, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_ossimIrect_print", _wrap_ossimIrect_ossimIrect_print, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_combine", _wrap_ossimIrect_combine, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_saveState", _wrap_ossimIrect_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_loadState", _wrap_ossimIrect_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimIrect_swigregister", ossimIrect_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimLine", _wrap_new_ossimLine, METH_VARARGS, NULL},
	 { (char *)"ossimLine_getVector", _wrap_ossimLine_getVector, METH_VARARGS, NULL},
	 { (char *)"ossimLine_intersectInfinite", _wrap_ossimLine_intersectInfinite, METH_VARARGS, NULL},
	 { (char *)"ossimLine_intersectSegment", _wrap_ossimLine_intersectSegment, METH_VARARGS, NULL},
	 { (char *)"ossimLine_midPoint", _wrap_ossimLine_midPoint, METH_VARARGS, NULL},
	 { (char *)"ossimLine_length", _wrap_ossimLine_length, METH_VARARGS, NULL},
	 { (char *)"ossimLine_normal", _wrap_ossimLine_normal, METH_VARARGS, NULL},
	 { (char *)"ossimLine_isPointWithin", _wrap_ossimLine_isPointWithin, METH_VARARGS, NULL},
	 { (char *)"ossimLine_isPointOnInfiniteLine", _wrap_ossimLine_isPointOnInfiniteLine, METH_VARARGS, NULL},
	 { (char *)"ossimLine_theP1_set", _wrap_ossimLine_theP1_set, METH_VARARGS, NULL},
	 { (char *)"ossimLine_theP1_get", _wrap_ossimLine_theP1_get, METH_VARARGS, NULL},
	 { (char *)"ossimLine_theP2_set", _wrap_ossimLine_theP2_set, METH_VARARGS, NULL},
	 { (char *)"ossimLine_theP2_get", _wrap_ossimLine_theP2_get, METH_VARARGS, NULL},
	 { (char *)"delete_ossimLine", _wrap_delete_ossimLine, METH_VARARGS, NULL},
	 { (char *)"ossimLine_swigregister", ossimLine_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimLsrPoint", _wrap_new_ossimLsrPoint, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint___set__", _wrap_ossimLsrPoint___set__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint___sub__", _wrap_ossimLsrPoint___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint___add__", _wrap_ossimLsrPoint___add__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint___cmp__", _wrap_ossimLsrPoint___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint___ne__", _wrap_ossimLsrPoint___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_ossimLsrPoint_ossimEcefPoint", _wrap_ossimLsrPoint_ossimLsrPoint_ossimEcefPoint, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_x", _wrap_ossimLsrPoint_x, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_y", _wrap_ossimLsrPoint_y, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_z", _wrap_ossimLsrPoint_z, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_data", _wrap_ossimLsrPoint_data, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_lsrSpace", _wrap_ossimLsrPoint_lsrSpace, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_hasNans", _wrap_ossimLsrPoint_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_makeNan", _wrap_ossimLsrPoint_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_ossimLsrPoint_print", _wrap_ossimLsrPoint_ossimLsrPoint_print, METH_VARARGS, NULL},
	 { (char *)"delete_ossimLsrPoint", _wrap_delete_ossimLsrPoint, METH_VARARGS, NULL},
	 { (char *)"ossimLsrPoint_swigregister", ossimLsrPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimLsrRay", _wrap_new_ossimLsrRay, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay___set__", _wrap_ossimLsrRay___set__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay___cmp__", _wrap_ossimLsrRay___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay___ne__", _wrap_ossimLsrRay___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_origin", _wrap_ossimLsrRay_origin, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_direction", _wrap_ossimLsrRay_direction, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_lsrSpace", _wrap_ossimLsrRay_lsrSpace, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_ossimLsrRay_ossimEcefRay", _wrap_ossimLsrRay_ossimLsrRay_ossimEcefRay, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_hasNans", _wrap_ossimLsrRay_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_makeNan", _wrap_ossimLsrRay_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_extend", _wrap_ossimLsrRay_extend, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_ossimLsrRay_print", _wrap_ossimLsrRay_ossimLsrRay_print, METH_VARARGS, NULL},
	 { (char *)"delete_ossimLsrRay", _wrap_delete_ossimLsrRay, METH_VARARGS, NULL},
	 { (char *)"ossimLsrRay_swigregister", ossimLsrRay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimLsrSpace", _wrap_new_ossimLsrSpace, METH_VARARGS, NULL},
	 { (char *)"delete_ossimLsrSpace", _wrap_delete_ossimLsrSpace, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace___cmp__", _wrap_ossimLsrSpace___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace___ne__", _wrap_ossimLsrSpace___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace___set__", _wrap_ossimLsrSpace___set__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_origin", _wrap_ossimLsrSpace_origin, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_lsrToEcefRotMatrix", _wrap_ossimLsrSpace_lsrToEcefRotMatrix, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_ecefToLsrRotMatrix", _wrap_ossimLsrSpace_ecefToLsrRotMatrix, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_lsrSpaceErrorMessage", _wrap_ossimLsrSpace_lsrSpaceErrorMessage, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_ossimLsrSpace_print", _wrap_ossimLsrSpace_ossimLsrSpace_print, METH_VARARGS, NULL},
	 { (char *)"ossimLsrSpace_swigregister", ossimLsrSpace_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimLsrVector", _wrap_new_ossimLsrVector, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___set__", _wrap_ossimLsrVector___set__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___sub__", _wrap_ossimLsrVector___sub__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___add__", _wrap_ossimLsrVector___add__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___mul__", _wrap_ossimLsrVector___mul__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___div__", _wrap_ossimLsrVector___div__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___cmp__", _wrap_ossimLsrVector___cmp__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector___ne__", _wrap_ossimLsrVector___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_ossimLsrVector_ossimEcefVector", _wrap_ossimLsrVector_ossimLsrVector_ossimEcefVector, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_dot", _wrap_ossimLsrVector_dot, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_angleTo", _wrap_ossimLsrVector_angleTo, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_cross", _wrap_ossimLsrVector_cross, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_unitVector", _wrap_ossimLsrVector_unitVector, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_magnitude", _wrap_ossimLsrVector_magnitude, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_normalize", _wrap_ossimLsrVector_normalize, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_x", _wrap_ossimLsrVector_x, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_y", _wrap_ossimLsrVector_y, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_z", _wrap_ossimLsrVector_z, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_hasNans", _wrap_ossimLsrVector_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_makeNan", _wrap_ossimLsrVector_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_data", _wrap_ossimLsrVector_data, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_lsrSpace", _wrap_ossimLsrVector_lsrSpace, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_ossimLsrVector_print", _wrap_ossimLsrVector_ossimLsrVector_print, METH_VARARGS, NULL},
	 { (char *)"delete_ossimLsrVector", _wrap_delete_ossimLsrVector, METH_VARARGS, NULL},
	 { (char *)"ossimLsrVector_swigregister", ossimLsrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNadconGridDatum", _wrap_new_ossimNadconGridDatum, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNadconGridDatum", _wrap_delete_ossimNadconGridDatum, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridDatum_swigregister", ossimNadconGridDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNadconGridFile", _wrap_new_ossimNadconGridFile, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNadconGridFile", _wrap_delete_ossimNadconGridFile, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_open", _wrap_ossimNadconGridFile_open, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_close", _wrap_ossimNadconGridFile_close, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_getShiftAtLatLon", _wrap_ossimNadconGridFile_getShiftAtLatLon, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_pointWithin", _wrap_ossimNadconGridFile_pointWithin, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_getBoundingRect", _wrap_ossimNadconGridFile_getBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_getFilename", _wrap_ossimNadconGridFile_getFilename, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_getFileOkFlag", _wrap_ossimNadconGridFile_getFileOkFlag, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_getSpacing", _wrap_ossimNadconGridFile_getSpacing, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridFile_swigregister", ossimNadconGridFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNadconGridHeader", _wrap_new_ossimNadconGridHeader, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_readHeader", _wrap_ossimNadconGridHeader_readHeader, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getStartOffset", _wrap_ossimNadconGridHeader_getStartOffset, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getBytesPerRow", _wrap_ossimNadconGridHeader_getBytesPerRow, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getNumberOfRows", _wrap_ossimNadconGridHeader_getNumberOfRows, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getNumberOfCols", _wrap_ossimNadconGridHeader_getNumberOfCols, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getDeltaX", _wrap_ossimNadconGridHeader_getDeltaX, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getDeltaY", _wrap_ossimNadconGridHeader_getDeltaY, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getBoundingRect", _wrap_ossimNadconGridHeader_getBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getMinX", _wrap_ossimNadconGridHeader_getMinX, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getMinY", _wrap_ossimNadconGridHeader_getMinY, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_getSpacing", _wrap_ossimNadconGridHeader_getSpacing, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNadconGridHeader", _wrap_delete_ossimNadconGridHeader, METH_VARARGS, NULL},
	 { (char *)"ossimNadconGridHeader_swigregister", ossimNadconGridHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNadconNarDatum", _wrap_new_ossimNadconNarDatum, METH_VARARGS, NULL},
	 { (char *)"ossimNadconNarDatum_shift", _wrap_ossimNadconNarDatum_shift, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNadconNarDatum", _wrap_delete_ossimNadconNarDatum, METH_VARARGS, NULL},
	 { (char *)"ossimNadconNarDatum_swigregister", ossimNadconNarDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNadconNasDatum", _wrap_new_ossimNadconNasDatum, METH_VARARGS, NULL},
	 { (char *)"ossimNadconNasDatum_shift", _wrap_ossimNadconNasDatum_shift, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNadconNasDatum", _wrap_delete_ossimNadconNasDatum, METH_VARARGS, NULL},
	 { (char *)"ossimNadconNasDatum_swigregister", ossimNadconNasDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimStreamBase", _wrap_new_ossimStreamBase, METH_VARARGS, NULL},
	 { (char *)"delete_ossimStreamBase", _wrap_delete_ossimStreamBase, METH_VARARGS, NULL},
	 { (char *)"ossimStreamBase_isCompressed", _wrap_ossimStreamBase_isCompressed, METH_VARARGS, NULL},
	 { (char *)"ossimStreamBase_swigregister", ossimStreamBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactory_instance", _wrap_ossimStreamFactory_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimStreamFactory", _wrap_delete_ossimStreamFactory, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactory_createNewIFStream", _wrap_ossimStreamFactory_createNewIFStream, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactory_swigregister", ossimStreamFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactoryRegistry_instance", _wrap_ossimStreamFactoryRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimStreamFactoryRegistry", _wrap_delete_ossimStreamFactoryRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactoryRegistry_registerFactory", _wrap_ossimStreamFactoryRegistry_registerFactory, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactoryRegistry_createNewIFStream", _wrap_ossimStreamFactoryRegistry_createNewIFStream, METH_VARARGS, NULL},
	 { (char *)"ossimStreamFactoryRegistry_swigregister", ossimStreamFactoryRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimString", _wrap_new_ossimString, METH_VARARGS, NULL},
	 { (char *)"ossimString_contains", _wrap_ossimString_contains, METH_VARARGS, NULL},
	 { (char *)"ossimString_chars", _wrap_ossimString_chars, METH_VARARGS, NULL},
	 { (char *)"getline", _wrap_getline, METH_VARARGS, NULL},
	 { (char *)"ossimString___set__", _wrap_ossimString___set__, METH_VARARGS, NULL},
	 { (char *)"ossimString___iadd__", _wrap_ossimString___iadd__, METH_VARARGS, NULL},
	 { (char *)"ossimString_at", _wrap_ossimString_at, METH_VARARGS, NULL},
	 { (char *)"ossimString_append", _wrap_ossimString_append, METH_VARARGS, NULL},
	 { (char *)"ossimString___add__", _wrap_ossimString___add__, METH_VARARGS, NULL},
	 { (char *)"__add__", _wrap___add__, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"ossimString___eq__", _wrap_ossimString___eq__, METH_VARARGS, NULL},
	 { (char *)"ossimString___ne__", _wrap_ossimString___ne__, METH_VARARGS, NULL},
	 { (char *)"ossimString___getitem__", _wrap_ossimString___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimString_insert", _wrap_ossimString_insert, METH_VARARGS, NULL},
	 { (char *)"ossimString_push_back", _wrap_ossimString_push_back, METH_VARARGS, NULL},
	 { (char *)"ossimString_substr", _wrap_ossimString_substr, METH_VARARGS, NULL},
	 { (char *)"ossimString_trim", _wrap_ossimString_trim, METH_VARARGS, NULL},
	 { (char *)"ossimString_beforePos", _wrap_ossimString_beforePos, METH_VARARGS, NULL},
	 { (char *)"ossimString_afterPos", _wrap_ossimString_afterPos, METH_VARARGS, NULL},
	 { (char *)"ossimString_substitute", _wrap_ossimString_substitute, METH_VARARGS, NULL},
	 { (char *)"ossimString_gsub", _wrap_ossimString_gsub, METH_VARARGS, NULL},
	 { (char *)"ossimString_explode", _wrap_ossimString_explode, METH_VARARGS, NULL},
	 { (char *)"ossimString_expandEnvironmentVariable", _wrap_ossimString_expandEnvironmentVariable, METH_VARARGS, NULL},
	 { (char *)"ossimString_upcase", _wrap_ossimString_upcase, METH_VARARGS, NULL},
	 { (char *)"ossimString_downcase", _wrap_ossimString_downcase, METH_VARARGS, NULL},
	 { (char *)"ossimString_c_str", _wrap_ossimString_c_str, METH_VARARGS, NULL},
	 { (char *)"ossimString_data", _wrap_ossimString_data, METH_VARARGS, NULL},
	 { (char *)"ossimString_size", _wrap_ossimString_size, METH_VARARGS, NULL},
	 { (char *)"ossimString_length", _wrap_ossimString_length, METH_VARARGS, NULL},
	 { (char *)"ossimString_empty", _wrap_ossimString_empty, METH_VARARGS, NULL},
	 { (char *)"ossimString_string", _wrap_ossimString_string, METH_VARARGS, NULL},
	 { (char *)"ossimString_begin", _wrap_ossimString_begin, METH_VARARGS, NULL},
	 { (char *)"ossimString_end", _wrap_ossimString_end, METH_VARARGS, NULL},
	 { (char *)"ossimString_clear", _wrap_ossimString_clear, METH_VARARGS, NULL},
	 { (char *)"ossimString_erase", _wrap_ossimString_erase, METH_VARARGS, NULL},
	 { (char *)"ossimString_find", _wrap_ossimString_find, METH_VARARGS, NULL},
	 { (char *)"ossimString_rfind", _wrap_ossimString_rfind, METH_VARARGS, NULL},
	 { (char *)"ossimString_find_first_of", _wrap_ossimString_find_first_of, METH_VARARGS, NULL},
	 { (char *)"ossimString_find_first_not_of", _wrap_ossimString_find_first_not_of, METH_VARARGS, NULL},
	 { (char *)"ossimString_find_last_of", _wrap_ossimString_find_last_of, METH_VARARGS, NULL},
	 { (char *)"ossimString_assign", _wrap_ossimString_assign, METH_VARARGS, NULL},
	 { (char *)"ossimString_replace", _wrap_ossimString_replace, METH_VARARGS, NULL},
	 { (char *)"ossimString_reserve", _wrap_ossimString_reserve, METH_VARARGS, NULL},
	 { (char *)"ossimString_before", _wrap_ossimString_before, METH_VARARGS, NULL},
	 { (char *)"ossimString_after", _wrap_ossimString_after, METH_VARARGS, NULL},
	 { (char *)"ossimString_stringDup", _wrap_ossimString_stringDup, METH_VARARGS, NULL},
	 { (char *)"ossimString_toBool", _wrap_ossimString_toBool, METH_VARARGS, NULL},
	 { (char *)"ossimString_toUInt8", _wrap_ossimString_toUInt8, METH_VARARGS, NULL},
	 { (char *)"ossimString_toInt", _wrap_ossimString_toInt, METH_VARARGS, NULL},
	 { (char *)"ossimString_toInt16", _wrap_ossimString_toInt16, METH_VARARGS, NULL},
	 { (char *)"ossimString_toUInt16", _wrap_ossimString_toUInt16, METH_VARARGS, NULL},
	 { (char *)"ossimString_toInt32", _wrap_ossimString_toInt32, METH_VARARGS, NULL},
	 { (char *)"ossimString_toUInt32", _wrap_ossimString_toUInt32, METH_VARARGS, NULL},
	 { (char *)"ossimString_toInt64", _wrap_ossimString_toInt64, METH_VARARGS, NULL},
	 { (char *)"ossimString_toUInt64", _wrap_ossimString_toUInt64, METH_VARARGS, NULL},
	 { (char *)"ossimString_toLong", _wrap_ossimString_toLong, METH_VARARGS, NULL},
	 { (char *)"ossimString_toULong", _wrap_ossimString_toULong, METH_VARARGS, NULL},
	 { (char *)"ossimString_toFloat32", _wrap_ossimString_toFloat32, METH_VARARGS, NULL},
	 { (char *)"ossimString_toFloat64", _wrap_ossimString_toFloat64, METH_VARARGS, NULL},
	 { (char *)"ossimString_toDouble", _wrap_ossimString_toDouble, METH_VARARGS, NULL},
	 { (char *)"ossimString_toString", _wrap_ossimString_toString, METH_VARARGS, NULL},
	 { (char *)"ossimString_stripLeading", _wrap_ossimString_stripLeading, METH_VARARGS, NULL},
	 { (char *)"ossimString_split", _wrap_ossimString_split, METH_VARARGS, NULL},
	 { (char *)"ossimString_join", _wrap_ossimString_join, METH_VARARGS, NULL},
	 { (char *)"ossimString_beforeRegExp", _wrap_ossimString_beforeRegExp, METH_VARARGS, NULL},
	 { (char *)"ossimString_fromRegExp", _wrap_ossimString_fromRegExp, METH_VARARGS, NULL},
	 { (char *)"ossimString_afterRegExp", _wrap_ossimString_afterRegExp, METH_VARARGS, NULL},
	 { (char *)"ossimString_match", _wrap_ossimString_match, METH_VARARGS, NULL},
	 { (char *)"ossimString_replaceAllThatMatch", _wrap_ossimString_replaceAllThatMatch, METH_VARARGS, NULL},
	 { (char *)"ossimString_replaceStrThatMatch", _wrap_ossimString_replaceStrThatMatch, METH_VARARGS, NULL},
	 { (char *)"ossimString_urlEncode", _wrap_ossimString_urlEncode, METH_VARARGS, NULL},
	 { (char *)"ossimString_getOssimId", _wrap_ossimString_getOssimId, METH_VARARGS, NULL},
	 { (char *)"delete_ossimString", _wrap_delete_ossimString, METH_VARARGS, NULL},
	 { (char *)"ossimString_swigregister", ossimString_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimStringLtstr___call__", _wrap_ossimStringLtstr___call__, METH_VARARGS, NULL},
	 { (char *)"new_ossimStringLtstr", _wrap_new_ossimStringLtstr, METH_VARARGS, NULL},
	 { (char *)"delete_ossimStringLtstr", _wrap_delete_ossimStringLtstr, METH_VARARGS, NULL},
	 { (char *)"ossimStringLtstr_swigregister", ossimStringLtstr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTDpt", _wrap_new_ossimTDpt, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt___set__", _wrap_ossimTDpt___set__, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_setMasterPoint", _wrap_ossimTDpt_setMasterPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_getMasterPoint", _wrap_ossimTDpt_getMasterPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_refMasterPoint", _wrap_ossimTDpt_refMasterPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_setSlavePoint", _wrap_ossimTDpt_setSlavePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_getSlavePoint", _wrap_ossimTDpt_getSlavePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_refSlavePoint", _wrap_ossimTDpt_refSlavePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_makeNan", _wrap_ossimTDpt_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_hasNans", _wrap_ossimTDpt_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_isNan", _wrap_ossimTDpt_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_ossimTDpt_print", _wrap_ossimTDpt_ossimTDpt_print, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_ossimTDpt_printTab", _wrap_ossimTDpt_ossimTDpt_printTab, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_tie_set", _wrap_ossimTDpt_tie_set, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_tie_get", _wrap_ossimTDpt_tie_get, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_score_set", _wrap_ossimTDpt_score_set, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_score_get", _wrap_ossimTDpt_score_get, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTDpt", _wrap_delete_ossimTDpt, METH_VARARGS, NULL},
	 { (char *)"ossimTDpt_swigregister", ossimTDpt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTempFilename", _wrap_new_ossimTempFilename, METH_VARARGS, NULL},
	 { (char *)"ossimTempFilename_generateRandomFile", _wrap_ossimTempFilename_generateRandomFile, METH_VARARGS, NULL},
	 { (char *)"ossimTempFilename_generateRandomDir", _wrap_ossimTempFilename_generateRandomDir, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTempFilename", _wrap_delete_ossimTempFilename, METH_VARARGS, NULL},
	 { (char *)"ossimTempFilename_swigregister", ossimTempFilename_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimThinPlateSpline", _wrap_new_ossimThinPlateSpline, METH_VARARGS, NULL},
	 { (char *)"delete_ossimThinPlateSpline", _wrap_delete_ossimThinPlateSpline, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_getNumberOfPoints", _wrap_ossimThinPlateSpline_getNumberOfPoints, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_setToler", _wrap_ossimThinPlateSpline_setToler, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_getToler", _wrap_ossimThinPlateSpline_getToler, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_getInterpolationType", _wrap_ossimThinPlateSpline_getInterpolationType, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_deleteList", _wrap_ossimThinPlateSpline_deleteList, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_growPoints", _wrap_ossimThinPlateSpline_growPoints, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_addPoint", _wrap_ossimThinPlateSpline_addPoint, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_deletePoint", _wrap_ossimThinPlateSpline_deletePoint, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_getPoint", _wrap_ossimThinPlateSpline_getPoint, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_getXy", _wrap_ossimThinPlateSpline_getXy, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_changePoint", _wrap_ossimThinPlateSpline_changePoint, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_reset", _wrap_ossimThinPlateSpline_reset, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_solve", _wrap_ossimThinPlateSpline_solve, METH_VARARGS, NULL},
	 { (char *)"ossimThinPlateSpline_swigregister", ossimThinPlateSpline_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimThreeParamDatum", _wrap_new_ossimThreeParamDatum, METH_VARARGS, NULL},
	 { (char *)"delete_ossimThreeParamDatum", _wrap_delete_ossimThreeParamDatum, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_shift", _wrap_ossimThreeParamDatum_shift, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_shiftToWgs84", _wrap_ossimThreeParamDatum_shiftToWgs84, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_shiftFromWgs84", _wrap_ossimThreeParamDatum_shiftFromWgs84, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param1", _wrap_ossimThreeParamDatum_param1, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param2", _wrap_ossimThreeParamDatum_param2, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param3", _wrap_ossimThreeParamDatum_param3, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param4", _wrap_ossimThreeParamDatum_param4, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param5", _wrap_ossimThreeParamDatum_param5, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param6", _wrap_ossimThreeParamDatum_param6, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_param7", _wrap_ossimThreeParamDatum_param7, METH_VARARGS, NULL},
	 { (char *)"ossimThreeParamDatum_swigregister", ossimThreeParamDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTieGpt", _wrap_new_ossimTieGpt, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTieGpt", _wrap_delete_ossimTieGpt, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt___set__", _wrap_ossimTieGpt___set__, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_setGroundPoint", _wrap_ossimTieGpt_setGroundPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_getGroundPoint", _wrap_ossimTieGpt_getGroundPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_refGroundPoint", _wrap_ossimTieGpt_refGroundPoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_setImagePoint", _wrap_ossimTieGpt_setImagePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_getImagePoint", _wrap_ossimTieGpt_getImagePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_refImagePoint", _wrap_ossimTieGpt_refImagePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_setScore", _wrap_ossimTieGpt_setScore, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_getScore", _wrap_ossimTieGpt_getScore, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_refScore", _wrap_ossimTieGpt_refScore, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_makeNan", _wrap_ossimTieGpt_makeNan, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_hasNans", _wrap_ossimTieGpt_hasNans, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_isNan", _wrap_ossimTieGpt_isNan, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_ossimTieGpt_print", _wrap_ossimTieGpt_ossimTieGpt_print, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_ossimTieGpt_printTab", _wrap_ossimTieGpt_ossimTieGpt_printTab, METH_VARARGS, NULL},
	 { (char *)"__rshift__", _wrap___rshift__, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_exportAsGmlNode", _wrap_ossimTieGpt_exportAsGmlNode, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_importFromGmlNode", _wrap_ossimTieGpt_importFromGmlNode, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_tie_set", _wrap_ossimTieGpt_tie_set, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_tie_get", _wrap_ossimTieGpt_tie_get, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_score_set", _wrap_ossimTieGpt_score_set, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_score_get", _wrap_ossimTieGpt_score_get, METH_VARARGS, NULL},
	 { (char *)"ossimTieGpt_swigregister", ossimTieGpt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTieGptSet", _wrap_new_ossimTieGptSet, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTieGptSet", _wrap_delete_ossimTieGptSet, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet___set__", _wrap_ossimTieGptSet___set__, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_setTiePoints", _wrap_ossimTieGptSet_setTiePoints, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getTiePoints", _wrap_ossimTieGptSet_getTiePoints, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_refTiePoints", _wrap_ossimTieGptSet_refTiePoints, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_setMasterPath", _wrap_ossimTieGptSet_setMasterPath, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getMasterPath", _wrap_ossimTieGptSet_getMasterPath, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_setSlavePath", _wrap_ossimTieGptSet_setSlavePath, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getSlavePath", _wrap_ossimTieGptSet_getSlavePath, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_setImageCov", _wrap_ossimTieGptSet_setImageCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getImageCov", _wrap_ossimTieGptSet_getImageCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_refImageCov", _wrap_ossimTieGptSet_refImageCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_setGroundCov", _wrap_ossimTieGptSet_setGroundCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getGroundCov", _wrap_ossimTieGptSet_getGroundCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_refGroundCov", _wrap_ossimTieGptSet_refGroundCov, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getSlaveMasterPoints", _wrap_ossimTieGptSet_getSlaveMasterPoints, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_size", _wrap_ossimTieGptSet_size, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_addTiePoint", _wrap_ossimTieGptSet_addTiePoint, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_clearTiePoints", _wrap_ossimTieGptSet_clearTiePoints, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_getGroundBoundaries", _wrap_ossimTieGptSet_getGroundBoundaries, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_ossimTieGptSet_printTab", _wrap_ossimTieGptSet_ossimTieGptSet_printTab, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_exportAsGmlNode", _wrap_ossimTieGptSet_exportAsGmlNode, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_importFromGmlNode", _wrap_ossimTieGptSet_importFromGmlNode, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_TIEPTSET_TAG_get", _wrap_ossimTieGptSet_TIEPTSET_TAG_get, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_TIEPTSET_TAG_set", _wrap_ossimTieGptSet_TIEPTSET_TAG_set, METH_VARARGS, NULL},
	 { (char *)"ossimTieGptSet_swigregister", ossimTieGptSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTiledImageHash", _wrap_new_ossimTiledImageHash, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTiledImageHash", _wrap_delete_ossimTiledImageHash, METH_VARARGS, NULL},
	 { (char *)"ossimTiledImageHash___call__", _wrap_ossimTiledImageHash___call__, METH_VARARGS, NULL},
	 { (char *)"ossimTiledImageHash_swigregister", ossimTiledImageHash_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTileHash", _wrap_new_ossimTileHash, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTileHash", _wrap_delete_ossimTileHash, METH_VARARGS, NULL},
	 { (char *)"ossimTileHash___call__", _wrap_ossimTileHash___call__, METH_VARARGS, NULL},
	 { (char *)"ossimTileHash_swigregister", ossimTileHash_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTimer", _wrap_new_ossimTimer, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTimer", _wrap_delete_ossimTimer, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_instance", _wrap_ossimTimer_instance, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_tick", _wrap_ossimTimer_tick, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_setStartTick", _wrap_ossimTimer_setStartTick, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_getStartTick", _wrap_ossimTimer_getStartTick, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_time_s", _wrap_ossimTimer_time_s, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_time_m", _wrap_ossimTimer_time_m, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_time_u", _wrap_ossimTimer_time_u, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_time_n", _wrap_ossimTimer_time_n, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_delta_s", _wrap_ossimTimer_delta_s, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_delta_m", _wrap_ossimTimer_delta_m, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_delta_u", _wrap_ossimTimer_delta_u, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_delta_n", _wrap_ossimTimer_delta_n, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_getSecondsPerTick", _wrap_ossimTimer_getSecondsPerTick, METH_VARARGS, NULL},
	 { (char *)"ossimTimer_swigregister", ossimTimer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimTrace", _wrap_new_ossimTrace, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTrace", _wrap_delete_ossimTrace, METH_VARARGS, NULL},
	 { (char *)"ossimTrace_isEnabled", _wrap_ossimTrace_isEnabled, METH_VARARGS, NULL},
	 { (char *)"ossimTrace_getTraceName", _wrap_ossimTrace_getTraceName, METH_VARARGS, NULL},
	 { (char *)"ossimTrace_setTraceFlag", _wrap_ossimTrace_setTraceFlag, METH_VARARGS, NULL},
	 { (char *)"ossimTrace___call__", _wrap_ossimTrace___call__, METH_VARARGS, NULL},
	 { (char *)"ossimTrace_swigregister", ossimTrace_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimTraceManager_instance", _wrap_ossimTraceManager_instance, METH_VARARGS, NULL},
	 { (char *)"ossimTraceManager_setTracePattern", _wrap_ossimTraceManager_setTracePattern, METH_VARARGS, NULL},
	 { (char *)"ossimTraceManager_addTrace", _wrap_ossimTraceManager_addTrace, METH_VARARGS, NULL},
	 { (char *)"ossimTraceManager_removeTrace", _wrap_ossimTraceManager_removeTrace, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTraceManager", _wrap_delete_ossimTraceManager, METH_VARARGS, NULL},
	 { (char *)"ossimTraceManager_swigregister", ossimTraceManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimAnnotationMultiEllipseObject", _wrap_new_ossimAnnotationMultiEllipseObject, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_dup", _wrap_ossimAnnotationMultiEllipseObject_dup, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_getNewClippedObject", _wrap_ossimAnnotationMultiEllipseObject_getNewClippedObject, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_applyScale", _wrap_ossimAnnotationMultiEllipseObject_applyScale, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_draw", _wrap_ossimAnnotationMultiEllipseObject_draw, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_intersects", _wrap_ossimAnnotationMultiEllipseObject_intersects, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print", _wrap_ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_print, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_getBoundingRect", _wrap_ossimAnnotationMultiEllipseObject_getBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_computeBoundingRect", _wrap_ossimAnnotationMultiEllipseObject_computeBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_isPointWithin", _wrap_ossimAnnotationMultiEllipseObject_isPointWithin, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_setFillFlag", _wrap_ossimAnnotationMultiEllipseObject_setFillFlag, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_resize", _wrap_ossimAnnotationMultiEllipseObject_resize, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_setWidthHeight", _wrap_ossimAnnotationMultiEllipseObject_setWidthHeight, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject___getitem__", _wrap_ossimAnnotationMultiEllipseObject___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationMultiEllipseObject_swigregister", ossimAnnotationMultiEllipseObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationObjectFactory_instance", _wrap_ossimAnnotationObjectFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationObjectFactory_create", _wrap_ossimAnnotationObjectFactory_create, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationObjectFactory_getList", _wrap_ossimAnnotationObjectFactory_getList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimAnnotationObjectFactory", _wrap_delete_ossimAnnotationObjectFactory, METH_VARARGS, NULL},
	 { (char *)"ossimAnnotationObjectFactory_swigregister", ossimAnnotationObjectFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get", _wrap_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set", _wrap_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get", _wrap_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set", _wrap_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set, METH_VARARGS, NULL},
	 { (char *)"new_ossimBitMaskWriter", _wrap_new_ossimBitMaskWriter, METH_VARARGS, NULL},
	 { (char *)"delete_ossimBitMaskWriter", _wrap_delete_ossimBitMaskWriter, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_setBogusPixel", _wrap_ossimBitMaskWriter_setBogusPixel, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_setBogusPixelRange", _wrap_ossimBitMaskWriter_setBogusPixelRange, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_setStartingResLevel", _wrap_ossimBitMaskWriter_setStartingResLevel, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_generateMask", _wrap_ossimBitMaskWriter_generateMask, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_buildOverviews", _wrap_ossimBitMaskWriter_buildOverviews, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_loadState", _wrap_ossimBitMaskWriter_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_isOpen", _wrap_ossimBitMaskWriter_isOpen, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_open", _wrap_ossimBitMaskWriter_open, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_close", _wrap_ossimBitMaskWriter_close, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_canConnectMyInputTo", _wrap_ossimBitMaskWriter_canConnectMyInputTo, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_connectMyInputTo", _wrap_ossimBitMaskWriter_connectMyInputTo, METH_VARARGS, NULL},
	 { (char *)"ossimBitMaskWriter_swigregister", ossimBitMaskWriter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimFilterResampler", _wrap_new_ossimFilterResampler, METH_VARARGS, NULL},
	 { (char *)"delete_ossimFilterResampler", _wrap_delete_ossimFilterResampler, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_resample", _wrap_ossimFilterResampler_resample, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setFilterType", _wrap_ossimFilterResampler_setFilterType, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setMinifyFilterType", _wrap_ossimFilterResampler_setMinifyFilterType, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setMagnifyFilterType", _wrap_ossimFilterResampler_setMagnifyFilterType, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getMinifyFilterTypeAsString", _wrap_ossimFilterResampler_getMinifyFilterTypeAsString, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getMagnifyFilterTypeAsString", _wrap_ossimFilterResampler_getMagnifyFilterTypeAsString, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setScaleFactor", _wrap_ossimFilterResampler_setScaleFactor, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setBlurFactor", _wrap_ossimFilterResampler_setBlurFactor, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_setBoundingInputRect", _wrap_ossimFilterResampler_setBoundingInputRect, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getBoundingInputRect", _wrap_ossimFilterResampler_getBoundingInputRect, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getBlurFactor", _wrap_ossimFilterResampler_getBlurFactor, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getScaleFactor", _wrap_ossimFilterResampler_getScaleFactor, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_saveState", _wrap_ossimFilterResampler_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_loadState", _wrap_ossimFilterResampler_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getKernelSupport", _wrap_ossimFilterResampler_getKernelSupport, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_getFilterTypes", _wrap_ossimFilterResampler_getFilterTypes, METH_VARARGS, NULL},
	 { (char *)"ossimFilterResampler_swigregister", ossimFilterResampler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimFilterTable", _wrap_new_ossimFilterTable, METH_VARARGS, NULL},
	 { (char *)"delete_ossimFilterTable", _wrap_delete_ossimFilterTable, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_buildTable", _wrap_ossimFilterTable_buildTable, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getWidthByHeight", _wrap_ossimFilterTable_getWidthByHeight, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getXSupport", _wrap_ossimFilterTable_getXSupport, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getYSupport", _wrap_ossimFilterTable_getYSupport, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getWidth", _wrap_ossimFilterTable_getWidth, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getHeight", _wrap_ossimFilterTable_getHeight, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_getClosestWeights", _wrap_ossimFilterTable_getClosestWeights, METH_VARARGS, NULL},
	 { (char *)"ossimFilterTable_swigregister", ossimFilterTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_iterator", _wrap_vectorOssimFileName_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___nonzero__", _wrap_vectorOssimFileName___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___bool__", _wrap_vectorOssimFileName___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___len__", _wrap_vectorOssimFileName___len__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_pop", _wrap_vectorOssimFileName_pop, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___getslice__", _wrap_vectorOssimFileName___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___setslice__", _wrap_vectorOssimFileName___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___delslice__", _wrap_vectorOssimFileName___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___delitem__", _wrap_vectorOssimFileName___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___getitem__", _wrap_vectorOssimFileName___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName___setitem__", _wrap_vectorOssimFileName___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_append", _wrap_vectorOssimFileName_append, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_empty", _wrap_vectorOssimFileName_empty, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_size", _wrap_vectorOssimFileName_size, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_clear", _wrap_vectorOssimFileName_clear, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_swap", _wrap_vectorOssimFileName_swap, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_get_allocator", _wrap_vectorOssimFileName_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_begin", _wrap_vectorOssimFileName_begin, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_end", _wrap_vectorOssimFileName_end, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_rbegin", _wrap_vectorOssimFileName_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_rend", _wrap_vectorOssimFileName_rend, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_pop_back", _wrap_vectorOssimFileName_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_erase", _wrap_vectorOssimFileName_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorOssimFileName", _wrap_new_vectorOssimFileName, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_push_back", _wrap_vectorOssimFileName_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_front", _wrap_vectorOssimFileName_front, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_back", _wrap_vectorOssimFileName_back, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_assign", _wrap_vectorOssimFileName_assign, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_resize", _wrap_vectorOssimFileName_resize, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_insert", _wrap_vectorOssimFileName_insert, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_reserve", _wrap_vectorOssimFileName_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_capacity", _wrap_vectorOssimFileName_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorOssimFileName", _wrap_delete_vectorOssimFileName, METH_VARARGS, NULL},
	 { (char *)"vectorOssimFileName_swigregister", vectorOssimFileName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeneralRasterInfo", _wrap_new_ossimGeneralRasterInfo, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeneralRasterInfo", _wrap_delete_ossimGeneralRasterInfo, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_imageRect", _wrap_ossimGeneralRasterInfo_imageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_validImageRect", _wrap_ossimGeneralRasterInfo_validImageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_rawImageRect", _wrap_ossimGeneralRasterInfo_rawImageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_subImageOffset", _wrap_ossimGeneralRasterInfo_subImageOffset, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_headerSize", _wrap_ossimGeneralRasterInfo_headerSize, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_fillToNullsMode", _wrap_ossimGeneralRasterInfo_fillToNullsMode, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setFillToNullsMode", _wrap_ossimGeneralRasterInfo_setFillToNullsMode, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setMinPixelValue", _wrap_ossimGeneralRasterInfo_setMinPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getMinPixelValue", _wrap_ossimGeneralRasterInfo_getMinPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setMaxPixelValue", _wrap_ossimGeneralRasterInfo_setMaxPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getMaxPixelValue", _wrap_ossimGeneralRasterInfo_getMaxPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setNullPixelValue", _wrap_ossimGeneralRasterInfo_setNullPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getNullPixelValue", _wrap_ossimGeneralRasterInfo_getNullPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setNumberOfBands", _wrap_ossimGeneralRasterInfo_setNumberOfBands, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_pixelsToChop", _wrap_ossimGeneralRasterInfo_pixelsToChop, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_numberOfBands", _wrap_ossimGeneralRasterInfo_numberOfBands, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_interleaveType", _wrap_ossimGeneralRasterInfo_interleaveType, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getScalarType", _wrap_ossimGeneralRasterInfo_getScalarType, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_validLines", _wrap_ossimGeneralRasterInfo_validLines, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_rawLines", _wrap_ossimGeneralRasterInfo_rawLines, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_bytesPerRawLine", _wrap_ossimGeneralRasterInfo_bytesPerRawLine, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_bytesPerValidLine", _wrap_ossimGeneralRasterInfo_bytesPerValidLine, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_validSamples", _wrap_ossimGeneralRasterInfo_validSamples, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_rawSamples", _wrap_ossimGeneralRasterInfo_rawSamples, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_offsetToFirstValidSample", _wrap_ossimGeneralRasterInfo_offsetToFirstValidSample, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getImageFileList", _wrap_ossimGeneralRasterInfo_getImageFileList, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setImageFileList", _wrap_ossimGeneralRasterInfo_setImageFileList, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setHeaderSize", _wrap_ossimGeneralRasterInfo_setHeaderSize, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setInterleaveType", _wrap_ossimGeneralRasterInfo_setInterleaveType, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_ossimGeneralRasterInfo_print", _wrap_ossimGeneralRasterInfo_ossimGeneralRasterInfo_print, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setImageRect", _wrap_ossimGeneralRasterInfo_setImageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setValidImageRect", _wrap_ossimGeneralRasterInfo_setValidImageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setRawImageRect", _wrap_ossimGeneralRasterInfo_setRawImageRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setSubImageOffset", _wrap_ossimGeneralRasterInfo_setSubImageOffset, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_bytesPerPixel", _wrap_ossimGeneralRasterInfo_bytesPerPixel, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_getImageDataByteOrder", _wrap_ossimGeneralRasterInfo_getImageDataByteOrder, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_setImageDataByteOrder", _wrap_ossimGeneralRasterInfo_setImageDataByteOrder, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_saveState", _wrap_ossimGeneralRasterInfo_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_loadState", _wrap_ossimGeneralRasterInfo_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimGeneralRasterInfo_swigregister", ossimGeneralRasterInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimGeoAnnotationMultiEllipseObject", _wrap_new_ossimGeoAnnotationMultiEllipseObject, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_dup", _wrap_ossimGeoAnnotationMultiEllipseObject_dup, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_getNewClippedObject", _wrap_ossimGeoAnnotationMultiEllipseObject_getNewClippedObject, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_transform", _wrap_ossimGeoAnnotationMultiEllipseObject_transform, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_applyScale", _wrap_ossimGeoAnnotationMultiEllipseObject_applyScale, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_draw", _wrap_ossimGeoAnnotationMultiEllipseObject_draw, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_intersects", _wrap_ossimGeoAnnotationMultiEllipseObject_intersects, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_addPoint", _wrap_ossimGeoAnnotationMultiEllipseObject_addPoint, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_setColor", _wrap_ossimGeoAnnotationMultiEllipseObject_setColor, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_setThickness", _wrap_ossimGeoAnnotationMultiEllipseObject_setThickness, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_setPoint", _wrap_ossimGeoAnnotationMultiEllipseObject_setPoint, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_setWidthHeight", _wrap_ossimGeoAnnotationMultiEllipseObject_setWidthHeight, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_resize", _wrap_ossimGeoAnnotationMultiEllipseObject_resize, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_setFillFlag", _wrap_ossimGeoAnnotationMultiEllipseObject_setFillFlag, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print", _wrap_ossimGeoAnnotationMultiEllipseObject_ossimGeoAnnotationMultiEllipseObject_print, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_getBoundingRect", _wrap_ossimGeoAnnotationMultiEllipseObject_getBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_computeBoundingRect", _wrap_ossimGeoAnnotationMultiEllipseObject_computeBoundingRect, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGeoAnnotationMultiEllipseObject", _wrap_delete_ossimGeoAnnotationMultiEllipseObject, METH_VARARGS, NULL},
	 { (char *)"ossimGeoAnnotationMultiEllipseObject_swigregister", ossimGeoAnnotationMultiEllipseObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimGridRemapEngineFactory_create", _wrap_ossimGridRemapEngineFactory_create, METH_VARARGS, NULL},
	 { (char *)"delete_ossimGridRemapEngineFactory", _wrap_delete_ossimGridRemapEngineFactory, METH_VARARGS, NULL},
	 { (char *)"ossimGridRemapEngineFactory_swigregister", ossimGridRemapEngineFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimHistoMatchRemapper", _wrap_new_ossimHistoMatchRemapper, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_getTile", _wrap_ossimHistoMatchRemapper_getTile, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_initialize", _wrap_ossimHistoMatchRemapper_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_getInputMeanValues", _wrap_ossimHistoMatchRemapper_getInputMeanValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_getInputSigmaValues", _wrap_ossimHistoMatchRemapper_getInputSigmaValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_getTargetMeanValues", _wrap_ossimHistoMatchRemapper_getTargetMeanValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_getTargetSigmaValues", _wrap_ossimHistoMatchRemapper_getTargetSigmaValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_setInputMeanValues", _wrap_ossimHistoMatchRemapper_setInputMeanValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_setInputSigmaValues", _wrap_ossimHistoMatchRemapper_setInputSigmaValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_setTargetMeanValues", _wrap_ossimHistoMatchRemapper_setTargetMeanValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_setTargetSigmaValues", _wrap_ossimHistoMatchRemapper_setTargetSigmaValues, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_loadState", _wrap_ossimHistoMatchRemapper_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_saveState", _wrap_ossimHistoMatchRemapper_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimHistoMatchRemapper_swigregister", ossimHistoMatchRemapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimIgenGenerator", _wrap_new_ossimIgenGenerator, METH_VARARGS, NULL},
	 { (char *)"delete_ossimIgenGenerator", _wrap_delete_ossimIgenGenerator, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setInput", _wrap_ossimIgenGenerator_setInput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_generateSpecList", _wrap_ossimIgenGenerator_generateSpecList, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getImageFilenamesFromSpecList", _wrap_ossimIgenGenerator_getImageFilenamesFromSpecList, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getBoundingGround", _wrap_ossimIgenGenerator_getBoundingGround, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_executeSpecList", _wrap_ossimIgenGenerator_executeSpecList, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setIteratorsToStart", _wrap_ossimIgenGenerator_setIteratorsToStart, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_nextSpecFile", _wrap_ossimIgenGenerator_nextSpecFile, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getSpecs", _wrap_ossimIgenGenerator_getSpecs, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getNumberOfSpecFiles", _wrap_ossimIgenGenerator_getNumberOfSpecFiles, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getSpecFilename", _wrap_ossimIgenGenerator_getSpecFilename, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_buildExe", _wrap_ossimIgenGenerator_buildExe, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getSpec", _wrap_ossimIgenGenerator_getSpec, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getInput", _wrap_ossimIgenGenerator_getInput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getOutput", _wrap_ossimIgenGenerator_getOutput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getView", _wrap_ossimIgenGenerator_getView, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setView", _wrap_ossimIgenGenerator_setView, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setOutput", _wrap_ossimIgenGenerator_setOutput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setSpecFileLocation", _wrap_ossimIgenGenerator_setSpecFileLocation, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getSpecFileLocation", _wrap_ossimIgenGenerator_getSpecFileLocation, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setIgenExecutable", _wrap_ossimIgenGenerator_setIgenExecutable, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getIgenExecutable", _wrap_ossimIgenGenerator_getIgenExecutable, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setOutputPolygon", _wrap_ossimIgenGenerator_setOutputPolygon, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setPixelType", _wrap_ossimIgenGenerator_setPixelType, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getOutputGeoPolygon", _wrap_ossimIgenGenerator_getOutputGeoPolygon, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTilingFlag", _wrap_ossimIgenGenerator_setTilingFlag, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTileSpacing", _wrap_ossimIgenGenerator_setTileSpacing, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTilePadding", _wrap_ossimIgenGenerator_setTilePadding, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTileSpacingUnits", _wrap_ossimIgenGenerator_setTileSpacingUnits, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTilePaddingUnits", _wrap_ossimIgenGenerator_setTilePaddingUnits, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTilingFlag", _wrap_ossimIgenGenerator_getTilingFlag, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTileSpacing", _wrap_ossimIgenGenerator_getTileSpacing, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTilePadding", _wrap_ossimIgenGenerator_getTilePadding, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTileSpacingUnits", _wrap_ossimIgenGenerator_getTileSpacingUnits, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTilePaddingUnits", _wrap_ossimIgenGenerator_getTilePaddingUnits, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getPixelType", _wrap_ossimIgenGenerator_getPixelType, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_setTileNamingConvention", _wrap_ossimIgenGenerator_setTileNamingConvention, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getTileNamingConvention", _wrap_ossimIgenGenerator_getTileNamingConvention, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_getInputBoundingRect", _wrap_ossimIgenGenerator_getInputBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_createProductProjection", _wrap_ossimIgenGenerator_createProductProjection, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_createOutput", _wrap_ossimIgenGenerator_createOutput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_createInput", _wrap_ossimIgenGenerator_createInput, METH_VARARGS, NULL},
	 { (char *)"ossimIgenGenerator_swigregister", ossimIgenGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimImageChain", _wrap_new_ossimImageChain, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageChain", _wrap_delete_ossimImageChain, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain___getitem__", _wrap_ossimImageChain___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getConnectableObject", _wrap_ossimImageChain_getConnectableObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_indexOf", _wrap_ossimImageChain_indexOf, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getFirstSource", _wrap_ossimImageChain_getFirstSource, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getFirstObject", _wrap_ossimImageChain_getFirstObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getLastSource", _wrap_ossimImageChain_getLastSource, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getLastObject", _wrap_ossimImageChain_getLastObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_addFirst", _wrap_ossimImageChain_addFirst, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_addLast", _wrap_ossimImageChain_addLast, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_deleteFirst", _wrap_ossimImageChain_deleteFirst, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_deleteLast", _wrap_ossimImageChain_deleteLast, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_insertRight", _wrap_ossimImageChain_insertRight, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_insertLeft", _wrap_ossimImageChain_insertLeft, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_replace", _wrap_ossimImageChain_replace, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_add", _wrap_ossimImageChain_add, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getTile", _wrap_ossimImageChain_getTile, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getNumberOfInputBands", _wrap_ossimImageChain_getNumberOfInputBands, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getOutputScalarType", _wrap_ossimImageChain_getOutputScalarType, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getNullPixelValue", _wrap_ossimImageChain_getNullPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getMinPixelValue", _wrap_ossimImageChain_getMinPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getMaxPixelValue", _wrap_ossimImageChain_getMaxPixelValue, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getOutputBandList", _wrap_ossimImageChain_getOutputBandList, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getTileWidth", _wrap_ossimImageChain_getTileWidth, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getTileHeight", _wrap_ossimImageChain_getTileHeight, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getBoundingRect", _wrap_ossimImageChain_getBoundingRect, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getValidImageVertices", _wrap_ossimImageChain_getValidImageVertices, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getImageGeometry", _wrap_ossimImageChain_getImageGeometry, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getDecimationFactor", _wrap_ossimImageChain_getDecimationFactor, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getDecimationFactors", _wrap_ossimImageChain_getDecimationFactors, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getNumberOfDecimationLevels", _wrap_ossimImageChain_getNumberOfDecimationLevels, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_saveState", _wrap_ossimImageChain_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_loadState", _wrap_ossimImageChain_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_initialize", _wrap_ossimImageChain_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_enableSource", _wrap_ossimImageChain_enableSource, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_disableSource", _wrap_ossimImageChain_disableSource, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_canConnectMyInputTo", _wrap_ossimImageChain_canConnectMyInputTo, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_makeUniqueIds", _wrap_ossimImageChain_makeUniqueIds, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getNumberOfObjects", _wrap_ossimImageChain_getNumberOfObjects, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getNumberOfSources", _wrap_ossimImageChain_getNumberOfSources, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_addChild", _wrap_ossimImageChain_addChild, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_removeChild", _wrap_ossimImageChain_removeChild, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_getChildren", _wrap_ossimImageChain_getChildren, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_disconnectInputEvent", _wrap_ossimImageChain_disconnectInputEvent, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_disconnectOutputEvent", _wrap_ossimImageChain_disconnectOutputEvent, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_connectInputEvent", _wrap_ossimImageChain_connectInputEvent, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_connectOutputEvent", _wrap_ossimImageChain_connectOutputEvent, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_objectDestructingEvent", _wrap_ossimImageChain_objectDestructingEvent, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_propagateEventToOutputs", _wrap_ossimImageChain_propagateEventToOutputs, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_propagateEventToInputs", _wrap_ossimImageChain_propagateEventToInputs, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_accept", _wrap_ossimImageChain_accept, METH_VARARGS, NULL},
	 { (char *)"ossimImageChain_swigregister", ossimImageChain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimImageDataHelper", _wrap_new_ossimImageDataHelper, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_setImageData", _wrap_ossimImageDataHelper_setImageData, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_fill", _wrap_ossimImageDataHelper_fill, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_copyInputToThis", _wrap_ossimImageDataHelper_copyInputToThis, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_theImageData_set", _wrap_ossimImageDataHelper_theImageData_set, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_theImageData_get", _wrap_ossimImageDataHelper_theImageData_get, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageDataHelper", _wrap_delete_ossimImageDataHelper, METH_VARARGS, NULL},
	 { (char *)"ossimImageDataHelper_swigregister", ossimImageDataHelper_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_instance", _wrap_ossimImageGeometryFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_createGeometry", _wrap_ossimImageGeometryFactory_createGeometry, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_extendGeometry", _wrap_ossimImageGeometryFactory_extendGeometry, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_getTypeNameList", _wrap_ossimImageGeometryFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_createTransform", _wrap_ossimImageGeometryFactory_createTransform, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_createProjection", _wrap_ossimImageGeometryFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageGeometryFactory", _wrap_delete_ossimImageGeometryFactory, METH_VARARGS, NULL},
	 { (char *)"ossimImageGeometryFactory_swigregister", ossimImageGeometryFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimImageMetaData", _wrap_new_ossimImageMetaData, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageMetaData", _wrap_delete_ossimImageMetaData, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_clear", _wrap_ossimImageMetaData_clear, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_clearBandInfo", _wrap_ossimImageMetaData_clearBandInfo, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setDefaultsForArrays", _wrap_ossimImageMetaData_setDefaultsForArrays, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setNumberOfBands", _wrap_ossimImageMetaData_setNumberOfBands, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getNumberOfBands", _wrap_ossimImageMetaData_getNumberOfBands, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setScalarType", _wrap_ossimImageMetaData_setScalarType, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getScalarType", _wrap_ossimImageMetaData_getScalarType, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMinPix", _wrap_ossimImageMetaData_getMinPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setMinPix", _wrap_ossimImageMetaData_setMinPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setMaxPix", _wrap_ossimImageMetaData_setMaxPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setNullPix", _wrap_ossimImageMetaData_setNullPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMaxPix", _wrap_ossimImageMetaData_getMaxPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getNullPix", _wrap_ossimImageMetaData_getNullPix, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMinPixelArray", _wrap_ossimImageMetaData_getMinPixelArray, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMaxPixelArray", _wrap_ossimImageMetaData_getMaxPixelArray, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getNullPixelArray", _wrap_ossimImageMetaData_getNullPixelArray, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setMinValuesValid", _wrap_ossimImageMetaData_setMinValuesValid, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setMaxValuesValid", _wrap_ossimImageMetaData_setMaxValuesValid, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_setNullValuesValid", _wrap_ossimImageMetaData_setNullValuesValid, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMinValuesValidFlag", _wrap_ossimImageMetaData_getMinValuesValidFlag, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getMaxValuesValidFlag", _wrap_ossimImageMetaData_getMaxValuesValidFlag, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_getNullValuesValidFlag", _wrap_ossimImageMetaData_getNullValuesValidFlag, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData___set__", _wrap_ossimImageMetaData___set__, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_isValid", _wrap_ossimImageMetaData_isValid, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_assign", _wrap_ossimImageMetaData_assign, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_loadState", _wrap_ossimImageMetaData_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_saveState", _wrap_ossimImageMetaData_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaData_swigregister", ossimImageMetaData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageMetaDataWriterRegistry", _wrap_delete_ossimImageMetaDataWriterRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_instance", _wrap_ossimImageMetaDataWriterRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_registerFactory", _wrap_ossimImageMetaDataWriterRegistry_registerFactory, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_unregisterFactory", _wrap_ossimImageMetaDataWriterRegistry_unregisterFactory, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_findFactory", _wrap_ossimImageMetaDataWriterRegistry_findFactory, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_createObject", _wrap_ossimImageMetaDataWriterRegistry_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_createWriter", _wrap_ossimImageMetaDataWriterRegistry_createWriter, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_getTypeNameList", _wrap_ossimImageMetaDataWriterRegistry_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_getMetadatatypeList", _wrap_ossimImageMetaDataWriterRegistry_getMetadatatypeList, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistry_swigregister", ossimImageMetaDataWriterRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimImageMetaDataWriterRegistryGetInstance", _wrap_ossimImageMetaDataWriterRegistryGetInstance, METH_VARARGS, NULL},
	 { (char *)"new_ossimImageMosaic", _wrap_new_ossimImageMosaic, METH_VARARGS, NULL},
	 { (char *)"ossimImageMosaic_getTile", _wrap_ossimImageMosaic_getTile, METH_VARARGS, NULL},
	 { (char *)"ossimImageMosaic_initialize", _wrap_ossimImageMosaic_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimImageMosaic_saveState", _wrap_ossimImageMosaic_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimImageMosaic_loadState", _wrap_ossimImageMosaic_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimImageMosaic_swigregister", ossimImageMosaic_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimImageSourceFactoryBase_createImageSource", _wrap_ossimImageSourceFactoryBase_createImageSource, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageSourceFactoryBase", _wrap_delete_ossimImageSourceFactoryBase, METH_VARARGS, NULL},
	 { (char *)"ossimImageSourceFactoryBase_swigregister", ossimImageSourceFactoryBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageWriterFactory", _wrap_delete_ossimImageWriterFactory, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_instance", _wrap_ossimImageWriterFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_createWriterFromExtension", _wrap_ossimImageWriterFactory_createWriterFromExtension, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_createWriter", _wrap_ossimImageWriterFactory_createWriter, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_createObject", _wrap_ossimImageWriterFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_getExtensions", _wrap_ossimImageWriterFactory_getExtensions, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_getTypeNameList", _wrap_ossimImageWriterFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_getImageTypeList", _wrap_ossimImageWriterFactory_getImageTypeList, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_getImageFileWritersBySuffix", _wrap_ossimImageWriterFactory_getImageFileWritersBySuffix, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_getImageFileWritersByMimeType", _wrap_ossimImageWriterFactory_getImageFileWritersByMimeType, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactory_swigregister", ossimImageWriterFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_instance", _wrap_ossimImageWriterFactoryRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_createWriterFromExtension", _wrap_ossimImageWriterFactoryRegistry_createWriterFromExtension, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_createWriter", _wrap_ossimImageWriterFactoryRegistry_createWriter, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_createObject", _wrap_ossimImageWriterFactoryRegistry_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_getTypeNameList", _wrap_ossimImageWriterFactoryRegistry_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_getImageTypeList", _wrap_ossimImageWriterFactoryRegistry_getImageTypeList, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix", _wrap_ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType", _wrap_ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_printImageTypeList", _wrap_ossimImageWriterFactoryRegistry_printImageTypeList, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_printWriterProps", _wrap_ossimImageWriterFactoryRegistry_printWriterProps, METH_VARARGS, NULL},
	 { (char *)"delete_ossimImageWriterFactoryRegistry", _wrap_delete_ossimImageWriterFactoryRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistry_swigregister", ossimImageWriterFactoryRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimImageWriterFactoryRegistryGetInstance", _wrap_ossimImageWriterFactoryRegistryGetInstance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNormalizedRemapTable", _wrap_delete_ossimNormalizedRemapTable, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable___getitem__", _wrap_ossimNormalizedRemapTable___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable_normFromPix", _wrap_ossimNormalizedRemapTable_normFromPix, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable_pixFromNorm", _wrap_ossimNormalizedRemapTable_pixFromNorm, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable_getEntries", _wrap_ossimNormalizedRemapTable_getEntries, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable_getNormalizer", _wrap_ossimNormalizedRemapTable_getNormalizer, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedRemapTable_swigregister", ossimNormalizedRemapTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNormalizedS16RemapTable", _wrap_new_ossimNormalizedS16RemapTable, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNormalizedS16RemapTable", _wrap_delete_ossimNormalizedS16RemapTable, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedS16RemapTable_getEntries", _wrap_ossimNormalizedS16RemapTable_getEntries, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedS16RemapTable___getitem__", _wrap_ossimNormalizedS16RemapTable___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedS16RemapTable_normFromPix", _wrap_ossimNormalizedS16RemapTable_normFromPix, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedS16RemapTable_pixFromNorm", _wrap_ossimNormalizedS16RemapTable_pixFromNorm, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedS16RemapTable_swigregister", ossimNormalizedS16RemapTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNormalizedU11RemapTable", _wrap_new_ossimNormalizedU11RemapTable, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNormalizedU11RemapTable", _wrap_delete_ossimNormalizedU11RemapTable, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU11RemapTable_getEntries", _wrap_ossimNormalizedU11RemapTable_getEntries, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU11RemapTable___getitem__", _wrap_ossimNormalizedU11RemapTable___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU11RemapTable_normFromPix", _wrap_ossimNormalizedU11RemapTable_normFromPix, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU11RemapTable_pixFromNorm", _wrap_ossimNormalizedU11RemapTable_pixFromNorm, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU11RemapTable_swigregister", ossimNormalizedU11RemapTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNormalizedU16RemapTable", _wrap_new_ossimNormalizedU16RemapTable, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNormalizedU16RemapTable", _wrap_delete_ossimNormalizedU16RemapTable, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU16RemapTable_getEntries", _wrap_ossimNormalizedU16RemapTable_getEntries, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU16RemapTable___getitem__", _wrap_ossimNormalizedU16RemapTable___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU16RemapTable_normFromPix", _wrap_ossimNormalizedU16RemapTable_normFromPix, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU16RemapTable_pixFromNorm", _wrap_ossimNormalizedU16RemapTable_pixFromNorm, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU16RemapTable_swigregister", ossimNormalizedU16RemapTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimNormalizedU8RemapTable", _wrap_new_ossimNormalizedU8RemapTable, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNormalizedU8RemapTable", _wrap_delete_ossimNormalizedU8RemapTable, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU8RemapTable_getEntries", _wrap_ossimNormalizedU8RemapTable_getEntries, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU8RemapTable___getitem__", _wrap_ossimNormalizedU8RemapTable___getitem__, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU8RemapTable_normFromPix", _wrap_ossimNormalizedU8RemapTable_normFromPix, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU8RemapTable_pixFromNorm", _wrap_ossimNormalizedU8RemapTable_pixFromNorm, METH_VARARGS, NULL},
	 { (char *)"ossimNormalizedU8RemapTable_swigregister", ossimNormalizedU8RemapTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimOverviewBuilderFactoryBase", _wrap_delete_ossimOverviewBuilderFactoryBase, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryBase_createBuilder", _wrap_ossimOverviewBuilderFactoryBase_createBuilder, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryBase_getTypeNameList", _wrap_ossimOverviewBuilderFactoryBase_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryBase_createObject", _wrap_ossimOverviewBuilderFactoryBase_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryBase_swigregister", ossimOverviewBuilderFactoryBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactory_instance", _wrap_ossimOverviewBuilderFactory_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimOverviewBuilderFactory", _wrap_delete_ossimOverviewBuilderFactory, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactory_createBuilder", _wrap_ossimOverviewBuilderFactory_createBuilder, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactory_getTypeNameList", _wrap_ossimOverviewBuilderFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactory_swigregister", ossimOverviewBuilderFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryRegistry_instance", _wrap_ossimOverviewBuilderFactoryRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryRegistry_createObject", _wrap_ossimOverviewBuilderFactoryRegistry_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryRegistry_createBuilder", _wrap_ossimOverviewBuilderFactoryRegistry_createBuilder, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryRegistry_getTypeNameList", _wrap_ossimOverviewBuilderFactoryRegistry_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimOverviewBuilderFactoryRegistry", _wrap_delete_ossimOverviewBuilderFactoryRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewBuilderFactoryRegistry_swigregister", ossimOverviewBuilderFactoryRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimOverviewSequencer", _wrap_new_ossimOverviewSequencer, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getNumberOfTiles", _wrap_ossimOverviewSequencer_getNumberOfTiles, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getNumberOfTilesHorizontal", _wrap_ossimOverviewSequencer_getNumberOfTilesHorizontal, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getNumberOfTilesVertical", _wrap_ossimOverviewSequencer_getNumberOfTilesVertical, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getOutputImageRectangle", _wrap_ossimOverviewSequencer_getOutputImageRectangle, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setImageHandler", _wrap_ossimOverviewSequencer_setImageHandler, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setBitMaskObjects", _wrap_ossimOverviewSequencer_setBitMaskObjects, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setSourceLevel", _wrap_ossimOverviewSequencer_setSourceLevel, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getHistogramMode", _wrap_ossimOverviewSequencer_getHistogramMode, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setHistogramMode", _wrap_ossimOverviewSequencer_setHistogramMode, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_writeHistogram", _wrap_ossimOverviewSequencer_writeHistogram, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_initialize", _wrap_ossimOverviewSequencer_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setToStartOfSequence", _wrap_ossimOverviewSequencer_setToStartOfSequence, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getNextTile", _wrap_ossimOverviewSequencer_getNextTile, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_slaveProcessTiles", _wrap_ossimOverviewSequencer_slaveProcessTiles, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_isMaster", _wrap_ossimOverviewSequencer_isMaster, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getTileSize", _wrap_ossimOverviewSequencer_getTileSize, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setTileSize", _wrap_ossimOverviewSequencer_setTileSize, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setResampleType", _wrap_ossimOverviewSequencer_setResampleType, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setScanForMinMax", _wrap_ossimOverviewSequencer_setScanForMinMax, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getScanForMinMax", _wrap_ossimOverviewSequencer_getScanForMinMax, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_setScanForMinMaxNull", _wrap_ossimOverviewSequencer_setScanForMinMaxNull, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_getScanForMinMaxNull", _wrap_ossimOverviewSequencer_getScanForMinMaxNull, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_writeOmdFile", _wrap_ossimOverviewSequencer_writeOmdFile, METH_VARARGS, NULL},
	 { (char *)"ossimOverviewSequencer_swigregister", ossimOverviewSequencer_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_instance", _wrap_ossimEpsgProjectionDatabase_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEpsgProjectionDatabase", _wrap_delete_ossimEpsgProjectionDatabase, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_findProjection", _wrap_ossimEpsgProjectionDatabase_findProjection, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_findProjectionCode", _wrap_ossimEpsgProjectionDatabase_findProjectionCode, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_findProjectionName", _wrap_ossimEpsgProjectionDatabase_findProjectionName, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_getProjectionsList", _wrap_ossimEpsgProjectionDatabase_getProjectionsList, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_numRecords", _wrap_ossimEpsgProjectionDatabase_numRecords, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionDatabase_swigregister", ossimEpsgProjectionDatabase_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionFactory_instance", _wrap_ossimEpsgProjectionFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionFactory_createProjection", _wrap_ossimEpsgProjectionFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionFactory_createObject", _wrap_ossimEpsgProjectionFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionFactory_getTypeNameList", _wrap_ossimEpsgProjectionFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimEpsgProjectionFactory", _wrap_delete_ossimEpsgProjectionFactory, METH_VARARGS, NULL},
	 { (char *)"ossimEpsgProjectionFactory_swigregister", ossimEpsgProjectionFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionFactory_instance", _wrap_ossimMapProjectionFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionFactory_createProjection", _wrap_ossimMapProjectionFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionFactory_createObject", _wrap_ossimMapProjectionFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionFactory_getTypeNameList", _wrap_ossimMapProjectionFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimMapProjectionFactory", _wrap_delete_ossimMapProjectionFactory, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionFactory_swigregister", ossimMapProjectionFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimMapProjectionInfo", _wrap_new_ossimMapProjectionInfo, METH_VARARGS, NULL},
	 { (char *)"delete_ossimMapProjectionInfo", _wrap_delete_ossimMapProjectionInfo, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_errorStatus", _wrap_ossimMapProjectionInfo_errorStatus, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getGeom", _wrap_ossimMapProjectionInfo_getGeom, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getMetersPerPixel", _wrap_ossimMapProjectionInfo_getMetersPerPixel, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getUsSurveyFeetPerPixel", _wrap_ossimMapProjectionInfo_getUsSurveyFeetPerPixel, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getDecimalDegreesPerPixel", _wrap_ossimMapProjectionInfo_getDecimalDegreesPerPixel, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_ulEastingNorthingPt", _wrap_ossimMapProjectionInfo_ulEastingNorthingPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_urEastingNorthingPt", _wrap_ossimMapProjectionInfo_urEastingNorthingPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_lrEastingNorthingPt", _wrap_ossimMapProjectionInfo_lrEastingNorthingPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_llEastingNorthingPt", _wrap_ossimMapProjectionInfo_llEastingNorthingPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_ulEastingNorthingPtInFt", _wrap_ossimMapProjectionInfo_ulEastingNorthingPtInFt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_urEastingNorthingPtInFt", _wrap_ossimMapProjectionInfo_urEastingNorthingPtInFt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_lrEastingNorthingPtInFt", _wrap_ossimMapProjectionInfo_lrEastingNorthingPtInFt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_llEastingNorthingPtInFt", _wrap_ossimMapProjectionInfo_llEastingNorthingPtInFt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_ulGroundPt", _wrap_ossimMapProjectionInfo_ulGroundPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_urGroundPt", _wrap_ossimMapProjectionInfo_urGroundPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_lrGroundPt", _wrap_ossimMapProjectionInfo_lrGroundPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_llGroundPt", _wrap_ossimMapProjectionInfo_llGroundPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_centerGroundPt", _wrap_ossimMapProjectionInfo_centerGroundPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_centerEastingNorthingPt", _wrap_ossimMapProjectionInfo_centerEastingNorthingPt, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_linesPerImage", _wrap_ossimMapProjectionInfo_linesPerImage, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_pixelsPerLine", _wrap_ossimMapProjectionInfo_pixelsPerLine, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_ossimMapProjectionInfo_print", _wrap_ossimMapProjectionInfo_ossimMapProjectionInfo_print, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_setPixelType", _wrap_ossimMapProjectionInfo_setPixelType, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getPixelType", _wrap_ossimMapProjectionInfo_getPixelType, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_setOutputFeetFlag", _wrap_ossimMapProjectionInfo_setOutputFeetFlag, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_unitsInFeet", _wrap_ossimMapProjectionInfo_unitsInFeet, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getImageInfoString", _wrap_ossimMapProjectionInfo_getImageInfoString, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_setImageInfoString", _wrap_ossimMapProjectionInfo_setImageInfoString, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_getProjection", _wrap_ossimMapProjectionInfo_getProjection, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_README_IMAGE_STRING_KW_get", _wrap_ossimMapProjectionInfo_README_IMAGE_STRING_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_README_IMAGE_STRING_KW_set", _wrap_ossimMapProjectionInfo_README_IMAGE_STRING_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_PIXEL_TYPE_KW_get", _wrap_ossimMapProjectionInfo_PIXEL_TYPE_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_PIXEL_TYPE_KW_set", _wrap_ossimMapProjectionInfo_PIXEL_TYPE_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get", _wrap_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set", _wrap_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_loadState", _wrap_ossimMapProjectionInfo_loadState, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_saveState", _wrap_ossimMapProjectionInfo_saveState, METH_VARARGS, NULL},
	 { (char *)"ossimMapProjectionInfo_swigregister", ossimMapProjectionInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimNitfProjectionFactory_instance", _wrap_ossimNitfProjectionFactory_instance, METH_VARARGS, NULL},
	 { (char *)"delete_ossimNitfProjectionFactory", _wrap_delete_ossimNitfProjectionFactory, METH_VARARGS, NULL},
	 { (char *)"ossimNitfProjectionFactory_createProjection", _wrap_ossimNitfProjectionFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimNitfProjectionFactory_createObject", _wrap_ossimNitfProjectionFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimNitfProjectionFactory_getTypeNameList", _wrap_ossimNitfProjectionFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimNitfProjectionFactory_swigregister", ossimNitfProjectionFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theSemiMinorAxis_set", _wrap_pqeErrorEllipse_theSemiMinorAxis_set, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theSemiMinorAxis_get", _wrap_pqeErrorEllipse_theSemiMinorAxis_get, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theSemiMajorAxis_set", _wrap_pqeErrorEllipse_theSemiMajorAxis_set, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theSemiMajorAxis_get", _wrap_pqeErrorEllipse_theSemiMajorAxis_get, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theAzimAngle_set", _wrap_pqeErrorEllipse_theAzimAngle_set, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theAzimAngle_get", _wrap_pqeErrorEllipse_theAzimAngle_get, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theCenter_set", _wrap_pqeErrorEllipse_theCenter_set, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_theCenter_get", _wrap_pqeErrorEllipse_theCenter_get, METH_VARARGS, NULL},
	 { (char *)"new_pqeErrorEllipse", _wrap_new_pqeErrorEllipse, METH_VARARGS, NULL},
	 { (char *)"delete_pqeErrorEllipse", _wrap_delete_pqeErrorEllipse, METH_VARARGS, NULL},
	 { (char *)"pqeErrorEllipse_swigregister", pqeErrorEllipse_swigregister, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineScale_set", _wrap_pqeRPCModel_theLineScale_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineScale_get", _wrap_pqeRPCModel_theLineScale_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampScale_set", _wrap_pqeRPCModel_theSampScale_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampScale_get", _wrap_pqeRPCModel_theSampScale_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLatScale_set", _wrap_pqeRPCModel_theLatScale_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLatScale_get", _wrap_pqeRPCModel_theLatScale_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLonScale_set", _wrap_pqeRPCModel_theLonScale_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLonScale_get", _wrap_pqeRPCModel_theLonScale_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theHgtScale_set", _wrap_pqeRPCModel_theHgtScale_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theHgtScale_get", _wrap_pqeRPCModel_theHgtScale_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineOffset_set", _wrap_pqeRPCModel_theLineOffset_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineOffset_get", _wrap_pqeRPCModel_theLineOffset_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampOffset_set", _wrap_pqeRPCModel_theSampOffset_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampOffset_get", _wrap_pqeRPCModel_theSampOffset_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLatOffset_set", _wrap_pqeRPCModel_theLatOffset_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLatOffset_get", _wrap_pqeRPCModel_theLatOffset_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLonOffset_set", _wrap_pqeRPCModel_theLonOffset_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLonOffset_get", _wrap_pqeRPCModel_theLonOffset_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theHgtOffset_set", _wrap_pqeRPCModel_theHgtOffset_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theHgtOffset_get", _wrap_pqeRPCModel_theHgtOffset_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineNumCoef_set", _wrap_pqeRPCModel_theLineNumCoef_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineNumCoef_get", _wrap_pqeRPCModel_theLineNumCoef_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineDenCoef_set", _wrap_pqeRPCModel_theLineDenCoef_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theLineDenCoef_get", _wrap_pqeRPCModel_theLineDenCoef_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampNumCoef_set", _wrap_pqeRPCModel_theSampNumCoef_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampNumCoef_get", _wrap_pqeRPCModel_theSampNumCoef_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampDenCoef_set", _wrap_pqeRPCModel_theSampDenCoef_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theSampDenCoef_get", _wrap_pqeRPCModel_theSampDenCoef_get, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theType_set", _wrap_pqeRPCModel_theType_set, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_theType_get", _wrap_pqeRPCModel_theType_get, METH_VARARGS, NULL},
	 { (char *)"new_pqeRPCModel", _wrap_new_pqeRPCModel, METH_VARARGS, NULL},
	 { (char *)"delete_pqeRPCModel", _wrap_delete_pqeRPCModel, METH_VARARGS, NULL},
	 { (char *)"pqeRPCModel_swigregister", pqeRPCModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimPositionQualityEvaluator", _wrap_new_ossimPositionQualityEvaluator, METH_VARARGS, NULL},
	 { (char *)"delete_ossimPositionQualityEvaluator", _wrap_delete_ossimPositionQualityEvaluator, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_addContributingCovariance", _wrap_ossimPositionQualityEvaluator_addContributingCovariance, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_addContributingCE_LE", _wrap_ossimPositionQualityEvaluator_addContributingCE_LE, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_subtractContributingCovariance", _wrap_ossimPositionQualityEvaluator_subtractContributingCovariance, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_subtractContributingCE_LE", _wrap_ossimPositionQualityEvaluator_subtractContributingCE_LE, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_getCovMatrix", _wrap_ossimPositionQualityEvaluator_getCovMatrix, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_computeCE_LE", _wrap_ossimPositionQualityEvaluator_computeCE_LE, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_extractErrorEllipse", _wrap_ossimPositionQualityEvaluator_extractErrorEllipse, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_isValid", _wrap_ossimPositionQualityEvaluator_isValid, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print", _wrap_ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print, METH_VARARGS, NULL},
	 { (char *)"ossimPositionQualityEvaluator_swigregister", ossimPositionQualityEvaluator_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ossimProjectionFactoryRegistry", _wrap_delete_ossimProjectionFactoryRegistry, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistry_instance", _wrap_ossimProjectionFactoryRegistry_instance, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistry_createProjection", _wrap_ossimProjectionFactoryRegistry_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistry_createObject", _wrap_ossimProjectionFactoryRegistry_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistry_getTypeNameList", _wrap_ossimProjectionFactoryRegistry_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistry_swigregister", ossimProjectionFactoryRegistry_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimProjectionFactoryRegistryGetInstance", _wrap_ossimProjectionFactoryRegistryGetInstance, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelFactory_instance", _wrap_ossimSensorModelFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelFactory_createProjection", _wrap_ossimSensorModelFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelFactory_createObject", _wrap_ossimSensorModelFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelFactory_getTypeNameList", _wrap_ossimSensorModelFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimSensorModelFactory", _wrap_delete_ossimSensorModelFactory, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelFactory_swigregister", ossimSensorModelFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimRpcPqeInputs", _wrap_new_ossimRpcPqeInputs, METH_VARARGS, NULL},
	 { (char *)"delete_ossimRpcPqeInputs", _wrap_delete_ossimRpcPqeInputs, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcElevationAngle_set", _wrap_ossimRpcPqeInputs_theRpcElevationAngle_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcElevationAngle_get", _wrap_ossimRpcPqeInputs_theRpcElevationAngle_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcAzimuthAngle_set", _wrap_ossimRpcPqeInputs_theRpcAzimuthAngle_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcAzimuthAngle_get", _wrap_ossimRpcPqeInputs_theRpcAzimuthAngle_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcBiasError_set", _wrap_ossimRpcPqeInputs_theRpcBiasError_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcBiasError_get", _wrap_ossimRpcPqeInputs_theRpcBiasError_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcRandError_set", _wrap_ossimRpcPqeInputs_theRpcRandError_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theRpcRandError_get", _wrap_ossimRpcPqeInputs_theRpcRandError_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theSurfaceNormalVector_set", _wrap_ossimRpcPqeInputs_theSurfaceNormalVector_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theSurfaceNormalVector_get", _wrap_ossimRpcPqeInputs_theSurfaceNormalVector_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theSurfaceCovMatrix_set", _wrap_ossimRpcPqeInputs_theSurfaceCovMatrix_set, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_theSurfaceCovMatrix_get", _wrap_ossimRpcPqeInputs_theSurfaceCovMatrix_get, METH_VARARGS, NULL},
	 { (char *)"ossimRpcPqeInputs_swigregister", ossimRpcPqeInputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimSensorModelTuple", _wrap_new_ossimSensorModelTuple, METH_VARARGS, NULL},
	 { (char *)"delete_ossimSensorModelTuple", _wrap_delete_ossimSensorModelTuple, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_addImage", _wrap_ossimSensorModelTuple_addImage, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_ossimSensorModelTuple_print", _wrap_ossimSensorModelTuple_ossimSensorModelTuple_print, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_intersect", _wrap_ossimSensorModelTuple_intersect, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_setIntersectionSurfaceAccuracy", _wrap_ossimSensorModelTuple_setIntersectionSurfaceAccuracy, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_getRpcPqeInputs", _wrap_ossimSensorModelTuple_getRpcPqeInputs, METH_VARARGS, NULL},
	 { (char *)"ossimSensorModelTuple_swigregister", ossimSensorModelTuple_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"new_ossimStatePlaneProjectionInfo", _wrap_new_ossimStatePlaneProjectionInfo, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_code", _wrap_ossimStatePlaneProjectionInfo_code, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_name", _wrap_ossimStatePlaneProjectionInfo_name, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_projName", _wrap_ossimStatePlaneProjectionInfo_projName, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_originLat", _wrap_ossimStatePlaneProjectionInfo_originLat, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_originLon", _wrap_ossimStatePlaneProjectionInfo_originLon, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_datum", _wrap_ossimStatePlaneProjectionInfo_datum, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_origin", _wrap_ossimStatePlaneProjectionInfo_origin, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_parallel1", _wrap_ossimStatePlaneProjectionInfo_parallel1, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_parallel2", _wrap_ossimStatePlaneProjectionInfo_parallel2, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_falseEasting", _wrap_ossimStatePlaneProjectionInfo_falseEasting, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_falseNorthing", _wrap_ossimStatePlaneProjectionInfo_falseNorthing, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_falseEastingInMeters", _wrap_ossimStatePlaneProjectionInfo_falseEastingInMeters, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_falseNorthingInMeters", _wrap_ossimStatePlaneProjectionInfo_falseNorthingInMeters, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_scaleFactor", _wrap_ossimStatePlaneProjectionInfo_scaleFactor, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_units", _wrap_ossimStatePlaneProjectionInfo_units, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_getUnitType", _wrap_ossimStatePlaneProjectionInfo_getUnitType, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_matchesProjection", _wrap_ossimStatePlaneProjectionInfo_matchesProjection, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_isSameCode", _wrap_ossimStatePlaneProjectionInfo_isSameCode, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_populateProjectionKeywords", _wrap_ossimStatePlaneProjectionInfo_populateProjectionKeywords, METH_VARARGS, NULL},
	 { (char *)"delete_ossimStatePlaneProjectionInfo", _wrap_delete_ossimStatePlaneProjectionInfo, METH_VARARGS, NULL},
	 { (char *)"ossimStatePlaneProjectionInfo_swigregister", ossimStatePlaneProjectionInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"ossimTiffProjectionFactory_instance", _wrap_ossimTiffProjectionFactory_instance, METH_VARARGS, NULL},
	 { (char *)"ossimTiffProjectionFactory_createProjection", _wrap_ossimTiffProjectionFactory_createProjection, METH_VARARGS, NULL},
	 { (char *)"ossimTiffProjectionFactory_createObject", _wrap_ossimTiffProjectionFactory_createObject, METH_VARARGS, NULL},
	 { (char *)"ossimTiffProjectionFactory_getTypeNameList", _wrap_ossimTiffProjectionFactory_getTypeNameList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimTiffProjectionFactory", _wrap_delete_ossimTiffProjectionFactory, METH_VARARGS, NULL},
	 { (char *)"ossimTiffProjectionFactory_swigregister", ossimTiffProjectionFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimUpspt", _wrap_new_ossimUpspt, METH_VARARGS, NULL},
	 { (char *)"ossimUpspt_hemisphere", _wrap_ossimUpspt_hemisphere, METH_VARARGS, NULL},
	 { (char *)"ossimUpspt_easting", _wrap_ossimUpspt_easting, METH_VARARGS, NULL},
	 { (char *)"ossimUpspt_northing", _wrap_ossimUpspt_northing, METH_VARARGS, NULL},
	 { (char *)"ossimUpspt_datum", _wrap_ossimUpspt_datum, METH_VARARGS, NULL},
	 { (char *)"delete_ossimUpspt", _wrap_delete_ossimUpspt, METH_VARARGS, NULL},
	 { (char *)"ossimUpspt_swigregister", ossimUpspt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimUtmpt", _wrap_new_ossimUtmpt, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_zone", _wrap_ossimUtmpt_zone, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_hemisphere", _wrap_ossimUtmpt_hemisphere, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_easting", _wrap_ossimUtmpt_easting, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_northing", _wrap_ossimUtmpt_northing, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_datum", _wrap_ossimUtmpt_datum, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_convertFromGround", _wrap_ossimUtmpt_convertFromGround, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_convertToGround", _wrap_ossimUtmpt_convertToGround, METH_VARARGS, NULL},
	 { (char *)"delete_ossimUtmpt", _wrap_delete_ossimUtmpt, METH_VARARGS, NULL},
	 { (char *)"ossimUtmpt_swigregister", ossimUtmpt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimElevUtil", _wrap_new_ossimElevUtil, METH_VARARGS, NULL},
	 { (char *)"delete_ossimElevUtil", _wrap_delete_ossimElevUtil, METH_VARARGS, NULL},
	 { (char *)"ossimElevUtil_initialize", _wrap_ossimElevUtil_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimElevUtil_execute", _wrap_ossimElevUtil_execute, METH_VARARGS, NULL},
	 { (char *)"ossimElevUtil_getOutputFilename", _wrap_ossimElevUtil_getOutputFilename, METH_VARARGS, NULL},
	 { (char *)"ossimElevUtil_swigregister", ossimElevUtil_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimFileWalker", _wrap_new_ossimFileWalker, METH_VARARGS, NULL},
	 { (char *)"ossimFileWalker_walk", _wrap_ossimFileWalker_walk, METH_VARARGS, NULL},
	 { (char *)"ossimFileWalker_registerProcessFileCallback", _wrap_ossimFileWalker_registerProcessFileCallback, METH_VARARGS, NULL},
	 { (char *)"ossimFileWalker_getFilteredExtensions", _wrap_ossimFileWalker_getFilteredExtensions, METH_VARARGS, NULL},
	 { (char *)"ossimFileWalker_initializeDefaultFilterList", _wrap_ossimFileWalker_initializeDefaultFilterList, METH_VARARGS, NULL},
	 { (char *)"delete_ossimFileWalker", _wrap_delete_ossimFileWalker, METH_VARARGS, NULL},
	 { (char *)"ossimFileWalker_swigregister", ossimFileWalker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimInfo", _wrap_new_ossimInfo, METH_VARARGS, NULL},
	 { (char *)"delete_ossimInfo", _wrap_delete_ossimInfo, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_addArguments", _wrap_ossimInfo_addArguments, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_initialize", _wrap_ossimInfo_initialize, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_execute", _wrap_ossimInfo_execute, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_executeImageOptions", _wrap_ossimInfo_executeImageOptions, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_openImage", _wrap_ossimInfo_openImage, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_closeImage", _wrap_ossimInfo_closeImage, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getImageHandler", _wrap_ossimInfo_getImageHandler, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_dumpImage", _wrap_ossimInfo_dumpImage, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printFactories", _wrap_ossimInfo_printFactories, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getImageMetadata", _wrap_ossimInfo_getImageMetadata, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getImagePalette", _wrap_ossimInfo_getImagePalette, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getImageInfo", _wrap_ossimInfo_getImageInfo, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getImageGeometryInfo", _wrap_ossimInfo_getImageGeometryInfo, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_isImageEntryOverview", _wrap_ossimInfo_isImageEntryOverview, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printConfiguration", _wrap_ossimInfo_printConfiguration, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printDatums", _wrap_ossimInfo_printDatums, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_deg2rad", _wrap_ossimInfo_deg2rad, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_rad2deg", _wrap_ossimInfo_rad2deg, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_ft2mtrs", _wrap_ossimInfo_ft2mtrs, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_mtrs2ft", _wrap_ossimInfo_mtrs2ft, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_mtrsPerDeg", _wrap_ossimInfo_mtrsPerDeg, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_outputHeight", _wrap_ossimInfo_outputHeight, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printPlugins", _wrap_ossimInfo_printPlugins, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_testPlugin", _wrap_ossimInfo_testPlugin, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printOverviewTypes", _wrap_ossimInfo_printOverviewTypes, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printProjections", _wrap_ossimInfo_printProjections, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printReaderProps", _wrap_ossimInfo_printReaderProps, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printResamplerFilters", _wrap_ossimInfo_printResamplerFilters, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_printWriterProps", _wrap_ossimInfo_printWriterProps, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_getRadiometry", _wrap_ossimInfo_getRadiometry, METH_VARARGS, NULL},
	 { (char *)"ossimInfo_swigregister", ossimInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ossimRpfUtil", _wrap_new_ossimRpfUtil, METH_VARARGS, NULL},
	 { (char *)"ossimRpfUtil_writeDotRpfFiles", _wrap_ossimRpfUtil_writeDotRpfFiles, METH_VARARGS, NULL},
	 { (char *)"ossimRpfUtil_writeDotRpfFile", _wrap_ossimRpfUtil_writeDotRpfFile, METH_VARARGS, NULL},
	 { (char *)"ossimRpfUtil_swigregister", ossimRpfUtil_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ossimTDptTo_p_ossimDpt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimDpt *)  ((ossimTDpt *) x));
}
static void *_p_ossimTempFilenameTo_p_ossimString(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimString *) (ossimFilename *) ((ossimTempFilename *) x));
}
static void *_p_ossimAnnotationMultiEllipseObjectTo_p_ossimAnnotationObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimAnnotationObject *)  ((ossimAnnotationMultiEllipseObject *) x));
}
static void *_p_ossimMapProjectionInfoTo_p_ossimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimObject *)  ((ossimMapProjectionInfo *) x));
}
static void *_p_ossimGeneralRasterInfoTo_p_ossimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimObject *)  ((ossimGeneralRasterInfo *) x));
}
static void *_p_ossimThreeParamDatumTo_p_ossimDatum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimDatum *)  ((ossimThreeParamDatum *) x));
}
static void *_p_ossimNormalizedS16RemapTableTo_p_ossimNormalizedRemapTable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNormalizedRemapTable *)  ((ossimNormalizedS16RemapTable *) x));
}
static void *_p_ossimNormalizedU11RemapTableTo_p_ossimNormalizedRemapTable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNormalizedRemapTable *)  ((ossimNormalizedU11RemapTable *) x));
}
static void *_p_ossimNormalizedU16RemapTableTo_p_ossimNormalizedRemapTable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNormalizedRemapTable *)  ((ossimNormalizedU16RemapTable *) x));
}
static void *_p_ossimNormalizedU8RemapTableTo_p_ossimNormalizedRemapTable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNormalizedRemapTable *)  ((ossimNormalizedU8RemapTable *) x));
}
static void *_p_ossimExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((ossimException *) x));
}
static void *_p_ossimDatumFactoryRegistryTo_p_ossimDatumFactoryInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimDatumFactoryInterface *)  ((ossimDatumFactoryRegistry *) x));
}
static void *_p_ossimDatumFactoryTo_p_ossimDatumFactoryInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimDatumFactoryInterface *)  ((ossimDatumFactory *) x));
}
static void *_p_ossimEpsgDatumFactoryTo_p_ossimDatumFactoryInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimDatumFactoryInterface *)  ((ossimEpsgDatumFactory *) x));
}
static void *_p_ossimImageChainTo_p_ossimImageSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimImageSource *)  ((ossimImageChain *) x));
}
static void *_p_ossimNadconNarDatumTo_p_ossimNadconGridDatum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNadconGridDatum *)  ((ossimNadconNarDatum *) x));
}
static void *_p_ossimNadconNasDatumTo_p_ossimNadconGridDatum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimNadconGridDatum *)  ((ossimNadconNasDatum *) x));
}
static void *_p_ossimStreamFactoryRegistryTo_p_ossimStreamFactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimStreamFactoryBase *)  ((ossimStreamFactoryRegistry *) x));
}
static void *_p_ossimStreamFactoryTo_p_ossimStreamFactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimStreamFactoryBase *)  ((ossimStreamFactory *) x));
}
static void *_p_ossimOverviewBuilderFactoryTo_p_ossimOverviewBuilderFactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimOverviewBuilderFactoryBase *)  ((ossimOverviewBuilderFactory *) x));
}
static void *_p_ossimImageMetaDataWriterRegistryTo_p_ossimImageMetaDataWriterFactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimImageMetaDataWriterFactoryBase *)  ((ossimImageMetaDataWriterRegistry *) x));
}
static void *_p_ossimTempFilenameTo_p_ossimFilename(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimFilename *)  ((ossimTempFilename *) x));
}
static void *_p_ossimTieGptTo_p_ossimGpt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ossimGpt *)  ((ossimTieGpt *) x));
}
static swig_type_info _swigt__p_DirectMap = {"_p_DirectMap", "DirectMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElevationDatabaseListType = {"_p_ElevationDatabaseListType", "ElevationDatabaseListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilenameListType = {"_p_FilenameListType", "FilenameListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NEWMAT__Matrix = {"_p_NEWMAT__Matrix", "NEWMAT::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NEWMAT__SymmetricMatrix = {"_p_NEWMAT__SymmetricMatrix", "NEWMAT::SymmetricMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringListType = {"_p_StringListType", "StringListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Timer_t = {"_p_Timer_t", "Timer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|ossim_int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "ossim_float64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|ossim_float32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|ossim_sint32 *|ossim_int32 *|ossimErrorCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_listT_ossimString_t = {"_p_listT_ossimString_t", "list< ossimString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "ossim_sint64 *|ossim_int64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossim2dLinearRegression = {"_p_ossim2dLinearRegression", "ossim2dLinearRegression *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossim2dTo2dTransform = {"_p_ossim2dTo2dTransform", "ossim2dTo2dTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossim2dTo2dTransformFactory = {"_p_ossim2dTo2dTransformFactory", "ossim2dTo2dTransformFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimAdjustableParameterInfo = {"_p_ossimAdjustableParameterInfo", "ossimAdjustableParameterInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimAnnotationMultiEllipseObject = {"_p_ossimAnnotationMultiEllipseObject", "ossimAnnotationMultiEllipseObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimAnnotationObject = {"_p_ossimAnnotationObject", "ossimAnnotationObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimAnnotationObjectFactory = {"_p_ossimAnnotationObjectFactory", "ossimAnnotationObjectFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimArgumentParser = {"_p_ossimArgumentParser", "ossimArgumentParser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimBitMaskWriter = {"_p_ossimBitMaskWriter", "ossimBitMaskWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t = {"_p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t", "ossimCallback2wRet< ossimFilename const &,bool &,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimColumnVector3d = {"_p_ossimColumnVector3d", "ossimColumnVector3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimConnectableObject = {"_p_ossimConnectableObject", "ossimConnectableObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimConnectableObject__ConnectableObjectList = {"_p_ossimConnectableObject__ConnectableObjectList", "ossimConnectableObject::ConnectableObjectList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimConnectionEvent = {"_p_ossimConnectionEvent", "ossimConnectionEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimCsvFile = {"_p_ossimCsvFile", "ossimCsvFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDatum = {"_p_ossimDatum", "ossimDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDatumFactory = {"_p_ossimDatumFactory", "ossimDatumFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDatumFactoryInterface = {"_p_ossimDatumFactoryInterface", "ossimDatumFactoryInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDatumFactoryRegistry = {"_p_ossimDatumFactoryRegistry", "ossimDatumFactoryRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDirectory = {"_p_ossimDirectory", "ossimDirectory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDirectoryData = {"_p_ossimDirectoryData", "ossimDirectoryData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDpt = {"_p_ossimDpt", "ossimDpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDpt3d = {"_p_ossimDpt3d", "ossimDpt3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDrect = {"_p_ossimDrect", "ossimDrect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimDtedElevationDatabase = {"_p_ossimDtedElevationDatabase", "ossimDtedElevationDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEbcdicToAscii = {"_p_ossimEbcdicToAscii", "ossimEbcdicToAscii *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEcefPoint = {"_p_ossimEcefPoint", "ossimEcefPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEcefRay = {"_p_ossimEcefRay", "ossimEcefRay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEcefVector = {"_p_ossimEcefVector", "ossimEcefVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevCellHandler = {"_p_ossimElevCellHandler", "ossimElevCellHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevCellHandlerFactory = {"_p_ossimElevCellHandlerFactory", "ossimElevCellHandlerFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevManager = {"_p_ossimElevManager", "ossimElevManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevUtil = {"_p_ossimElevUtil", "ossimElevUtil *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevationDatabase = {"_p_ossimElevationDatabase", "ossimElevationDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevationDatabaseFactory = {"_p_ossimElevationDatabaseFactory", "ossimElevationDatabaseFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimElevationDatabaseRegistry = {"_p_ossimElevationDatabaseRegistry", "ossimElevationDatabaseRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEllipsoid = {"_p_ossimEllipsoid", "ossimEllipsoid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEllipsoidFactory = {"_p_ossimEllipsoidFactory", "ossimEllipsoidFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEnvironmentUtility = {"_p_ossimEnvironmentUtility", "ossimEnvironmentUtility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEpsgDatumFactory = {"_p_ossimEpsgDatumFactory", "ossimEpsgDatumFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEpsgProjectionDatabase = {"_p_ossimEpsgProjectionDatabase", "ossimEpsgProjectionDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEpsgProjectionFactory = {"_p_ossimEpsgProjectionFactory", "ossimEpsgProjectionFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEquTokenizerFlexLexer = {"_p_ossimEquTokenizerFlexLexer", "ossimEquTokenizerFlexLexer *|ossimEquTokenizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimErrorCodes = {"_p_ossimErrorCodes", "ossimErrorCodes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimEvent = {"_p_ossimEvent", "ossimEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimException = {"_p_ossimException", "ossimException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFileWalker = {"_p_ossimFileWalker", "ossimFileWalker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFilename = {"_p_ossimFilename", "std::vector< ossimFilename >::value_type *|ossimFilename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFilter = {"_p_ossimFilter", "ossimFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFilterResampler = {"_p_ossimFilterResampler", "ossimFilterResampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFilterTable = {"_p_ossimFilterTable", "ossimFilterTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFontInformation = {"_p_ossimFontInformation", "ossimFontInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimFpt = {"_p_ossimFpt", "ossimFpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeneralRasterInfo = {"_p_ossimGeneralRasterInfo", "ossimGeneralRasterInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoAnnotationMultiEllipseObject = {"_p_ossimGeoAnnotationMultiEllipseObject", "ossimGeoAnnotationMultiEllipseObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoPolygon = {"_p_ossimGeoPolygon", "ossimGeoPolygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoTiffCoordTransformsLut = {"_p_ossimGeoTiffCoordTransformsLut", "ossimGeoTiffCoordTransformsLut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoTiffDatumLut = {"_p_ossimGeoTiffDatumLut", "ossimGeoTiffDatumLut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoidNgsHeader = {"_p_ossimGeoidNgsHeader", "ossimGeoidNgsHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGeoref = {"_p_ossimGeoref", "ossimGeoref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGpt = {"_p_ossimGpt", "ossimGpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGrect = {"_p_ossimGrect", "ossimGrect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGridRemapEngine = {"_p_ossimGridRemapEngine", "ossimGridRemapEngine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimGridRemapEngineFactory = {"_p_ossimGridRemapEngineFactory", "ossimGridRemapEngineFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimHistoMatchRemapper = {"_p_ossimHistoMatchRemapper", "ossimHistoMatchRemapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimId = {"_p_ossimId", "ossimId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimIgenGenerator = {"_p_ossimIgenGenerator", "ossimIgenGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageChain = {"_p_ossimImageChain", "ossimImageChain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageData = {"_p_ossimImageData", "ossimImageData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageDataHelper = {"_p_ossimImageDataHelper", "ossimImageDataHelper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageFileWriter = {"_p_ossimImageFileWriter", "ossimImageFileWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageGeometry = {"_p_ossimImageGeometry", "ossimImageGeometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageGeometryFactory = {"_p_ossimImageGeometryFactory", "ossimImageGeometryFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageHandler = {"_p_ossimImageHandler", "ossimImageHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageMetaData = {"_p_ossimImageMetaData", "ossimImageMetaData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageMetaDataWriterFactoryBase = {"_p_ossimImageMetaDataWriterFactoryBase", "ossimImageMetaDataWriterFactoryBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageMetaDataWriterRegistry = {"_p_ossimImageMetaDataWriterRegistry", "ossimImageMetaDataWriterRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageMosaic = {"_p_ossimImageMosaic", "ossimImageMosaic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageSource = {"_p_ossimImageSource", "ossimImageSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageSourceFactoryBase = {"_p_ossimImageSourceFactoryBase", "ossimImageSourceFactoryBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageWriterFactory = {"_p_ossimImageWriterFactory", "ossimImageWriterFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageWriterFactoryBase__ImageFileWriterList = {"_p_ossimImageWriterFactoryBase__ImageFileWriterList", "ossimImageWriterFactoryBase::ImageFileWriterList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimImageWriterFactoryRegistry = {"_p_ossimImageWriterFactoryRegistry", "ossimImageWriterFactoryRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimInfo = {"_p_ossimInfo", "ossimInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimInit = {"_p_ossimInit", "ossimInit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimIpt = {"_p_ossimIpt", "ossimIpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimIrect = {"_p_ossimIrect", "ossimIrect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimKeyword = {"_p_ossimKeyword", "ossimKeyword *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimKeywordlist = {"_p_ossimKeywordlist", "ossimKeywordlist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLine = {"_p_ossimLine", "ossimLine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLocalTm = {"_p_ossimLocalTm", "ossimLocalTm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLsrPoint = {"_p_ossimLsrPoint", "ossimLsrPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLsrRay = {"_p_ossimLsrRay", "ossimLsrRay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLsrSpace = {"_p_ossimLsrSpace", "ossimLsrSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimLsrVector = {"_p_ossimLsrVector", "ossimLsrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimMapProjection = {"_p_ossimMapProjection", "ossimMapProjection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimMapProjectionFactory = {"_p_ossimMapProjectionFactory", "ossimMapProjectionFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimMapProjectionInfo = {"_p_ossimMapProjectionInfo", "ossimMapProjectionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimMaskFilter = {"_p_ossimMaskFilter", "ossimMaskFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimMatrix4x4 = {"_p_ossimMatrix4x4", "ossimMatrix4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNadconGridDatum = {"_p_ossimNadconGridDatum", "ossimNadconGridDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNadconGridFile = {"_p_ossimNadconGridFile", "ossimNadconGridFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNadconGridHeader = {"_p_ossimNadconGridHeader", "ossimNadconGridHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNadconNarDatum = {"_p_ossimNadconNarDatum", "ossimNadconNarDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNadconNasDatum = {"_p_ossimNadconNasDatum", "ossimNadconNasDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNitfProjectionFactory = {"_p_ossimNitfProjectionFactory", "ossimNitfProjectionFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNormalizedRemapTable = {"_p_ossimNormalizedRemapTable", "ossimNormalizedRemapTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNormalizedS16RemapTable = {"_p_ossimNormalizedS16RemapTable", "ossimNormalizedS16RemapTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNormalizedU11RemapTable = {"_p_ossimNormalizedU11RemapTable", "ossimNormalizedU11RemapTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNormalizedU16RemapTable = {"_p_ossimNormalizedU16RemapTable", "ossimNormalizedU16RemapTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimNormalizedU8RemapTable = {"_p_ossimNormalizedU8RemapTable", "ossimNormalizedU8RemapTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimObject = {"_p_ossimObject", "ossimObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimObjectDestructingEvent = {"_p_ossimObjectDestructingEvent", "ossimObjectDestructingEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimOverviewBuilderBase = {"_p_ossimOverviewBuilderBase", "ossimOverviewBuilderBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimOverviewBuilderFactory = {"_p_ossimOverviewBuilderFactory", "ossimOverviewBuilderFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimOverviewBuilderFactoryBase = {"_p_ossimOverviewBuilderFactoryBase", "ossimOverviewBuilderFactoryBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimOverviewBuilderFactoryRegistry = {"_p_ossimOverviewBuilderFactoryRegistry", "ossimOverviewBuilderFactoryRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimOverviewSequencer = {"_p_ossimOverviewSequencer", "ossimOverviewSequencer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimPolygon = {"_p_ossimPolygon", "ossimPolygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimPositionQualityEvaluator = {"_p_ossimPositionQualityEvaluator", "ossimPositionQualityEvaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimProjection = {"_p_ossimProjection", "ossimProjection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimProjectionFactoryRegistry = {"_p_ossimProjectionFactoryRegistry", "ossimProjectionFactoryRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimCsvFile__Record_t = {"_p_ossimRefPtrT_ossimCsvFile__Record_t", "ossimRefPtr< ossimCsvFile::Record > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimIFStream_t = {"_p_ossimRefPtrT_ossimIFStream_t", "ossimRefPtr< ossimIFStream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimImageData_t = {"_p_ossimRefPtrT_ossimImageData_t", "ossimRefPtr< ossimImageData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimImageGeometry_t = {"_p_ossimRefPtrT_ossimImageGeometry_t", "ossimRefPtr< ossimImageGeometry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimImageHandler_t = {"_p_ossimRefPtrT_ossimImageHandler_t", "ossimRefPtr< ossimImageHandler > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimMetadataFileWriter_t = {"_p_ossimRefPtrT_ossimMetadataFileWriter_t", "ossimRefPtr< ossimMetadataFileWriter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimTieGpt_t = {"_p_ossimRefPtrT_ossimTieGpt_t", "ossimRefPtr< ossimTieGpt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRefPtrT_ossimXmlNode_t = {"_p_ossimRefPtrT_ossimXmlNode_t", "ossimRefPtr< ossimXmlNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRgbImage = {"_p_ossimRgbImage", "ossimRgbImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRgbVector = {"_p_ossimRgbVector", "ossimRgbVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRpcPqeInputs = {"_p_ossimRpcPqeInputs", "ossimRpcPqeInputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRpfToc = {"_p_ossimRpfToc", "ossimRpfToc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRpfTocEntry = {"_p_ossimRpfTocEntry", "ossimRpfTocEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimRpfUtil = {"_p_ossimRpfUtil", "ossimRpfUtil *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimSensorModel = {"_p_ossimSensorModel", "ossimSensorModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimSensorModelFactory = {"_p_ossimSensorModelFactory", "ossimSensorModelFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimSensorModelTuple = {"_p_ossimSensorModelTuple", "ossimSensorModelTuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStatePlaneProjectionInfo = {"_p_ossimStatePlaneProjectionInfo", "ossimStatePlaneProjectionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStreamBase = {"_p_ossimStreamBase", "ossimStreamBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStreamFactory = {"_p_ossimStreamFactory", "ossimStreamFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStreamFactoryBase = {"_p_ossimStreamFactoryBase", "ossimStreamFactoryBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStreamFactoryRegistry = {"_p_ossimStreamFactoryRegistry", "ossimStreamFactoryRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimString = {"_p_ossimString", "std::vector< ossimString >::value_type *|ossimString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimStringLtstr = {"_p_ossimStringLtstr", "ossimStringLtstr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTDpt = {"_p_ossimTDpt", "ossimTDpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTempFilename = {"_p_ossimTempFilename", "ossimTempFilename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimThinPlateSpline = {"_p_ossimThinPlateSpline", "ossimThinPlateSpline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimThreeParamDatum = {"_p_ossimThreeParamDatum", "ossimThreeParamDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTieGpt = {"_p_ossimTieGpt", "ossimTieGpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTieGptSet = {"_p_ossimTieGptSet", "ossimTieGptSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTiffProjectionFactory = {"_p_ossimTiffProjectionFactory", "ossimTiffProjectionFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTileHash = {"_p_ossimTileHash", "ossimTileHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTiledImageHash = {"_p_ossimTiledImageHash", "ossimTiledImageHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTimer = {"_p_ossimTimer", "ossimTimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTrace = {"_p_ossimTrace", "ossimTrace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimTraceManager = {"_p_ossimTraceManager", "ossimTraceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimUpspt = {"_p_ossimUpspt", "ossimUpspt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimUtmpt = {"_p_ossimUtmpt", "ossimUtmpt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ossimVisitor = {"_p_ossimVisitor", "ossimVisitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pqeErrorEllipse = {"_p_pqeErrorEllipse", "pqeErrorEllipse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pqeRPCModel = {"_p_pqeRPCModel", "pqeRPCModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "ossim_sint16 *|ossim_int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|ossim_sint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ossimFilename_t = {"_p_std__allocatorT_ossimFilename_t", "std::allocator< ossimFilename > *|std::vector< ossimFilename >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ossimString_t = {"_p_std__allocatorT_ossimString_t", "std::vector< ossimString >::allocator_type *|std::allocator< ossimString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base__openmode = {"_p_std__ios_base__openmode", "std::ios_base::openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_ossimString_t = {"_p_std__listT_ossimString_t", "std::list< ossimString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string__const_iterator = {"_p_std__string__const_iterator", "std::string::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string__iterator = {"_p_std__string__iterator", "std::string::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string__size_type = {"_p_std__string__size_type", "std::string::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t = {"_p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t", "std::vector< ossimConnectableObject *,std::allocator< ossimConnectableObject * > > *|std::vector< ossimConnectableObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t = {"_p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t", "pqeImageErrorEllipse_t *|std::vector< ossimDpt,std::allocator< ossimDpt > > *|std::vector< ossimDpt > *|DptSet_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t = {"_p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t", "std::vector< ossimFilename > *|ossimEnvironmentUtility::FilenameListType *|std::vector< ossimFilename,std::allocator< ossimFilename > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t = {"_p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t", "std::vector< ossimGeoPolygon,std::allocator< ossimGeoPolygon > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t = {"_p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t", "std::vector< ossimGpt,std::allocator< ossimGpt > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t = {"_p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t", "std::vector< ossimIpt,std::allocator< ossimIpt > > *|std::vector< ossimIpt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t = {"_p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t", "std::vector< ossimKeywordlist > *|std::vector< ossimKeywordlist,std::allocator< ossimKeywordlist > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t = {"_p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t", "std::vector< ossimPolygon,std::allocator< ossimPolygon > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t = {"_p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t", "ossimElevManager::ElevationDatabaseListType *|std::vector< ossimRefPtr< ossimElevationDatabase >,std::allocator< ossimRefPtr< ossimElevationDatabase > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t = {"_p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t", "vector< ossimRefPtr< ossimTieGpt > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t = {"_p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t", "std::vector< ossimString,std::allocator< ossimString::ossimString > > *|std::vector< ossimString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t = {"_p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t", "std::vector< ossimString,std::allocator< ossimString > > *|std::vector< ossimString,std::allocator< ossimString::ossimString > > *|ossimCsvFile::StringListType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< ossim_uint32,std::allocator< ossim_uint32 > > *|std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|ossim_uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "ossim_uint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "ossim_uint64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "ossim_uint16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vizGeorefInterType = {"_p_vizGeorefInterType", "vizGeorefInterType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DirectMap,
  &_swigt__p_ElevationDatabaseListType,
  &_swigt__p_FilenameListType,
  &_swigt__p_NEWMAT__Matrix,
  &_swigt__p_NEWMAT__SymmetricMatrix,
  &_swigt__p_StringListType,
  &_swigt__p_Timer_t,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_listT_ossimString_t,
  &_swigt__p_long_long,
  &_swigt__p_ossim2dLinearRegression,
  &_swigt__p_ossim2dTo2dTransform,
  &_swigt__p_ossim2dTo2dTransformFactory,
  &_swigt__p_ossimAdjustableParameterInfo,
  &_swigt__p_ossimAnnotationMultiEllipseObject,
  &_swigt__p_ossimAnnotationObject,
  &_swigt__p_ossimAnnotationObjectFactory,
  &_swigt__p_ossimArgumentParser,
  &_swigt__p_ossimBitMaskWriter,
  &_swigt__p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t,
  &_swigt__p_ossimColumnVector3d,
  &_swigt__p_ossimConnectableObject,
  &_swigt__p_ossimConnectableObject__ConnectableObjectList,
  &_swigt__p_ossimConnectionEvent,
  &_swigt__p_ossimCsvFile,
  &_swigt__p_ossimDatum,
  &_swigt__p_ossimDatumFactory,
  &_swigt__p_ossimDatumFactoryInterface,
  &_swigt__p_ossimDatumFactoryRegistry,
  &_swigt__p_ossimDirectory,
  &_swigt__p_ossimDirectoryData,
  &_swigt__p_ossimDpt,
  &_swigt__p_ossimDpt3d,
  &_swigt__p_ossimDrect,
  &_swigt__p_ossimDtedElevationDatabase,
  &_swigt__p_ossimEbcdicToAscii,
  &_swigt__p_ossimEcefPoint,
  &_swigt__p_ossimEcefRay,
  &_swigt__p_ossimEcefVector,
  &_swigt__p_ossimElevCellHandler,
  &_swigt__p_ossimElevCellHandlerFactory,
  &_swigt__p_ossimElevManager,
  &_swigt__p_ossimElevUtil,
  &_swigt__p_ossimElevationDatabase,
  &_swigt__p_ossimElevationDatabaseFactory,
  &_swigt__p_ossimElevationDatabaseRegistry,
  &_swigt__p_ossimEllipsoid,
  &_swigt__p_ossimEllipsoidFactory,
  &_swigt__p_ossimEnvironmentUtility,
  &_swigt__p_ossimEpsgDatumFactory,
  &_swigt__p_ossimEpsgProjectionDatabase,
  &_swigt__p_ossimEpsgProjectionFactory,
  &_swigt__p_ossimEquTokenizerFlexLexer,
  &_swigt__p_ossimErrorCodes,
  &_swigt__p_ossimEvent,
  &_swigt__p_ossimException,
  &_swigt__p_ossimFileWalker,
  &_swigt__p_ossimFilename,
  &_swigt__p_ossimFilter,
  &_swigt__p_ossimFilterResampler,
  &_swigt__p_ossimFilterTable,
  &_swigt__p_ossimFontInformation,
  &_swigt__p_ossimFpt,
  &_swigt__p_ossimGeneralRasterInfo,
  &_swigt__p_ossimGeoAnnotationMultiEllipseObject,
  &_swigt__p_ossimGeoPolygon,
  &_swigt__p_ossimGeoTiffCoordTransformsLut,
  &_swigt__p_ossimGeoTiffDatumLut,
  &_swigt__p_ossimGeoidNgsHeader,
  &_swigt__p_ossimGeoref,
  &_swigt__p_ossimGpt,
  &_swigt__p_ossimGrect,
  &_swigt__p_ossimGridRemapEngine,
  &_swigt__p_ossimGridRemapEngineFactory,
  &_swigt__p_ossimHistoMatchRemapper,
  &_swigt__p_ossimId,
  &_swigt__p_ossimIgenGenerator,
  &_swigt__p_ossimImageChain,
  &_swigt__p_ossimImageData,
  &_swigt__p_ossimImageDataHelper,
  &_swigt__p_ossimImageFileWriter,
  &_swigt__p_ossimImageGeometry,
  &_swigt__p_ossimImageGeometryFactory,
  &_swigt__p_ossimImageHandler,
  &_swigt__p_ossimImageMetaData,
  &_swigt__p_ossimImageMetaDataWriterFactoryBase,
  &_swigt__p_ossimImageMetaDataWriterRegistry,
  &_swigt__p_ossimImageMosaic,
  &_swigt__p_ossimImageSource,
  &_swigt__p_ossimImageSourceFactoryBase,
  &_swigt__p_ossimImageWriterFactory,
  &_swigt__p_ossimImageWriterFactoryBase__ImageFileWriterList,
  &_swigt__p_ossimImageWriterFactoryRegistry,
  &_swigt__p_ossimInfo,
  &_swigt__p_ossimInit,
  &_swigt__p_ossimIpt,
  &_swigt__p_ossimIrect,
  &_swigt__p_ossimKeyword,
  &_swigt__p_ossimKeywordlist,
  &_swigt__p_ossimLine,
  &_swigt__p_ossimLocalTm,
  &_swigt__p_ossimLsrPoint,
  &_swigt__p_ossimLsrRay,
  &_swigt__p_ossimLsrSpace,
  &_swigt__p_ossimLsrVector,
  &_swigt__p_ossimMapProjection,
  &_swigt__p_ossimMapProjectionFactory,
  &_swigt__p_ossimMapProjectionInfo,
  &_swigt__p_ossimMaskFilter,
  &_swigt__p_ossimMatrix4x4,
  &_swigt__p_ossimNadconGridDatum,
  &_swigt__p_ossimNadconGridFile,
  &_swigt__p_ossimNadconGridHeader,
  &_swigt__p_ossimNadconNarDatum,
  &_swigt__p_ossimNadconNasDatum,
  &_swigt__p_ossimNitfProjectionFactory,
  &_swigt__p_ossimNormalizedRemapTable,
  &_swigt__p_ossimNormalizedS16RemapTable,
  &_swigt__p_ossimNormalizedU11RemapTable,
  &_swigt__p_ossimNormalizedU16RemapTable,
  &_swigt__p_ossimNormalizedU8RemapTable,
  &_swigt__p_ossimObject,
  &_swigt__p_ossimObjectDestructingEvent,
  &_swigt__p_ossimOverviewBuilderBase,
  &_swigt__p_ossimOverviewBuilderFactory,
  &_swigt__p_ossimOverviewBuilderFactoryBase,
  &_swigt__p_ossimOverviewBuilderFactoryRegistry,
  &_swigt__p_ossimOverviewSequencer,
  &_swigt__p_ossimPolygon,
  &_swigt__p_ossimPositionQualityEvaluator,
  &_swigt__p_ossimProjection,
  &_swigt__p_ossimProjectionFactoryRegistry,
  &_swigt__p_ossimRefPtrT_ossimCsvFile__Record_t,
  &_swigt__p_ossimRefPtrT_ossimIFStream_t,
  &_swigt__p_ossimRefPtrT_ossimImageData_t,
  &_swigt__p_ossimRefPtrT_ossimImageGeometry_t,
  &_swigt__p_ossimRefPtrT_ossimImageHandler_t,
  &_swigt__p_ossimRefPtrT_ossimMetadataFileWriter_t,
  &_swigt__p_ossimRefPtrT_ossimTieGpt_t,
  &_swigt__p_ossimRefPtrT_ossimXmlNode_t,
  &_swigt__p_ossimRgbImage,
  &_swigt__p_ossimRgbVector,
  &_swigt__p_ossimRpcPqeInputs,
  &_swigt__p_ossimRpfToc,
  &_swigt__p_ossimRpfTocEntry,
  &_swigt__p_ossimRpfUtil,
  &_swigt__p_ossimSensorModel,
  &_swigt__p_ossimSensorModelFactory,
  &_swigt__p_ossimSensorModelTuple,
  &_swigt__p_ossimStatePlaneProjectionInfo,
  &_swigt__p_ossimStreamBase,
  &_swigt__p_ossimStreamFactory,
  &_swigt__p_ossimStreamFactoryBase,
  &_swigt__p_ossimStreamFactoryRegistry,
  &_swigt__p_ossimString,
  &_swigt__p_ossimStringLtstr,
  &_swigt__p_ossimTDpt,
  &_swigt__p_ossimTempFilename,
  &_swigt__p_ossimThinPlateSpline,
  &_swigt__p_ossimThreeParamDatum,
  &_swigt__p_ossimTieGpt,
  &_swigt__p_ossimTieGptSet,
  &_swigt__p_ossimTiffProjectionFactory,
  &_swigt__p_ossimTileHash,
  &_swigt__p_ossimTiledImageHash,
  &_swigt__p_ossimTimer,
  &_swigt__p_ossimTrace,
  &_swigt__p_ossimTraceManager,
  &_swigt__p_ossimUpspt,
  &_swigt__p_ossimUtmpt,
  &_swigt__p_ossimVisitor,
  &_swigt__p_ostream,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_char,
  &_swigt__p_pqeErrorEllipse,
  &_swigt__p_pqeRPCModel,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_ossimFilename_t,
  &_swigt__p_std__allocatorT_ossimString_t,
  &_swigt__p_std__exception,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base__openmode,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_ossimString_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__string__const_iterator,
  &_swigt__p_std__string__iterator,
  &_swigt__p_std__string__size_type,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t,
  &_swigt__p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,
  &_swigt__p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,
  &_swigt__p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t,
  &_swigt__p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,
  &_swigt__p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,
  &_swigt__p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t,
  &_swigt__p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,
  &_swigt__p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t,
  &_swigt__p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t,
  &_swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t,
  &_swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_vizGeorefInterType,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_DirectMap[] = {  {&_swigt__p_DirectMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElevationDatabaseListType[] = {  {&_swigt__p_ElevationDatabaseListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilenameListType[] = {  {&_swigt__p_FilenameListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NEWMAT__Matrix[] = {  {&_swigt__p_NEWMAT__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NEWMAT__SymmetricMatrix[] = {  {&_swigt__p_NEWMAT__SymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringListType[] = {  {&_swigt__p_StringListType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer_t[] = {  {&_swigt__p_Timer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_listT_ossimString_t[] = {  {&_swigt__p_listT_ossimString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossim2dLinearRegression[] = {  {&_swigt__p_ossim2dLinearRegression, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossim2dTo2dTransform[] = {  {&_swigt__p_ossim2dTo2dTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossim2dTo2dTransformFactory[] = {  {&_swigt__p_ossim2dTo2dTransformFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimAdjustableParameterInfo[] = {  {&_swigt__p_ossimAdjustableParameterInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimAnnotationMultiEllipseObject[] = {  {&_swigt__p_ossimAnnotationMultiEllipseObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimAnnotationObject[] = {  {&_swigt__p_ossimAnnotationObject, 0, 0, 0},  {&_swigt__p_ossimAnnotationMultiEllipseObject, _p_ossimAnnotationMultiEllipseObjectTo_p_ossimAnnotationObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimAnnotationObjectFactory[] = {  {&_swigt__p_ossimAnnotationObjectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimArgumentParser[] = {  {&_swigt__p_ossimArgumentParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimBitMaskWriter[] = {  {&_swigt__p_ossimBitMaskWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t[] = {  {&_swigt__p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimColumnVector3d[] = {  {&_swigt__p_ossimColumnVector3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimConnectableObject[] = {  {&_swigt__p_ossimConnectableObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimConnectableObject__ConnectableObjectList[] = {  {&_swigt__p_ossimConnectableObject__ConnectableObjectList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimConnectionEvent[] = {  {&_swigt__p_ossimConnectionEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimCsvFile[] = {  {&_swigt__p_ossimCsvFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDatum[] = {  {&_swigt__p_ossimDatum, 0, 0, 0},  {&_swigt__p_ossimThreeParamDatum, _p_ossimThreeParamDatumTo_p_ossimDatum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDatumFactory[] = {  {&_swigt__p_ossimDatumFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDatumFactoryInterface[] = {  {&_swigt__p_ossimDatumFactoryInterface, 0, 0, 0},  {&_swigt__p_ossimDatumFactoryRegistry, _p_ossimDatumFactoryRegistryTo_p_ossimDatumFactoryInterface, 0, 0},  {&_swigt__p_ossimDatumFactory, _p_ossimDatumFactoryTo_p_ossimDatumFactoryInterface, 0, 0},  {&_swigt__p_ossimEpsgDatumFactory, _p_ossimEpsgDatumFactoryTo_p_ossimDatumFactoryInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDatumFactoryRegistry[] = {  {&_swigt__p_ossimDatumFactoryRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDirectory[] = {  {&_swigt__p_ossimDirectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDirectoryData[] = {  {&_swigt__p_ossimDirectoryData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDpt[] = {  {&_swigt__p_ossimDpt, 0, 0, 0},  {&_swigt__p_ossimTDpt, _p_ossimTDptTo_p_ossimDpt, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDpt3d[] = {  {&_swigt__p_ossimDpt3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDrect[] = {  {&_swigt__p_ossimDrect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimDtedElevationDatabase[] = {  {&_swigt__p_ossimDtedElevationDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEbcdicToAscii[] = {  {&_swigt__p_ossimEbcdicToAscii, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEcefPoint[] = {  {&_swigt__p_ossimEcefPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEcefRay[] = {  {&_swigt__p_ossimEcefRay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEcefVector[] = {  {&_swigt__p_ossimEcefVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevCellHandler[] = {  {&_swigt__p_ossimElevCellHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevCellHandlerFactory[] = {  {&_swigt__p_ossimElevCellHandlerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevManager[] = {  {&_swigt__p_ossimElevManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevUtil[] = {  {&_swigt__p_ossimElevUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevationDatabase[] = {  {&_swigt__p_ossimElevationDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevationDatabaseFactory[] = {  {&_swigt__p_ossimElevationDatabaseFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimElevationDatabaseRegistry[] = {  {&_swigt__p_ossimElevationDatabaseRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEllipsoid[] = {  {&_swigt__p_ossimEllipsoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEllipsoidFactory[] = {  {&_swigt__p_ossimEllipsoidFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEnvironmentUtility[] = {  {&_swigt__p_ossimEnvironmentUtility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEpsgDatumFactory[] = {  {&_swigt__p_ossimEpsgDatumFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEpsgProjectionDatabase[] = {  {&_swigt__p_ossimEpsgProjectionDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEpsgProjectionFactory[] = {  {&_swigt__p_ossimEpsgProjectionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEquTokenizerFlexLexer[] = {  {&_swigt__p_ossimEquTokenizerFlexLexer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimErrorCodes[] = {  {&_swigt__p_ossimErrorCodes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimEvent[] = {  {&_swigt__p_ossimEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimException[] = {  {&_swigt__p_ossimException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFileWalker[] = {  {&_swigt__p_ossimFileWalker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFilename[] = {  {&_swigt__p_ossimFilename, 0, 0, 0},  {&_swigt__p_ossimTempFilename, _p_ossimTempFilenameTo_p_ossimFilename, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFilter[] = {  {&_swigt__p_ossimFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFilterResampler[] = {  {&_swigt__p_ossimFilterResampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFilterTable[] = {  {&_swigt__p_ossimFilterTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFontInformation[] = {  {&_swigt__p_ossimFontInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimFpt[] = {  {&_swigt__p_ossimFpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeneralRasterInfo[] = {  {&_swigt__p_ossimGeneralRasterInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoAnnotationMultiEllipseObject[] = {  {&_swigt__p_ossimGeoAnnotationMultiEllipseObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoPolygon[] = {  {&_swigt__p_ossimGeoPolygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoTiffCoordTransformsLut[] = {  {&_swigt__p_ossimGeoTiffCoordTransformsLut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoTiffDatumLut[] = {  {&_swigt__p_ossimGeoTiffDatumLut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoidNgsHeader[] = {  {&_swigt__p_ossimGeoidNgsHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGeoref[] = {  {&_swigt__p_ossimGeoref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGpt[] = {  {&_swigt__p_ossimTieGpt, _p_ossimTieGptTo_p_ossimGpt, 0, 0},  {&_swigt__p_ossimGpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGrect[] = {  {&_swigt__p_ossimGrect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGridRemapEngine[] = {  {&_swigt__p_ossimGridRemapEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimGridRemapEngineFactory[] = {  {&_swigt__p_ossimGridRemapEngineFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimHistoMatchRemapper[] = {  {&_swigt__p_ossimHistoMatchRemapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimId[] = {  {&_swigt__p_ossimId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimIgenGenerator[] = {  {&_swigt__p_ossimIgenGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageChain[] = {  {&_swigt__p_ossimImageChain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageData[] = {  {&_swigt__p_ossimImageData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageDataHelper[] = {  {&_swigt__p_ossimImageDataHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageFileWriter[] = {  {&_swigt__p_ossimImageFileWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageGeometry[] = {  {&_swigt__p_ossimImageGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageGeometryFactory[] = {  {&_swigt__p_ossimImageGeometryFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageHandler[] = {  {&_swigt__p_ossimImageHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageMetaData[] = {  {&_swigt__p_ossimImageMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageMetaDataWriterFactoryBase[] = {  {&_swigt__p_ossimImageMetaDataWriterRegistry, _p_ossimImageMetaDataWriterRegistryTo_p_ossimImageMetaDataWriterFactoryBase, 0, 0},  {&_swigt__p_ossimImageMetaDataWriterFactoryBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageMetaDataWriterRegistry[] = {  {&_swigt__p_ossimImageMetaDataWriterRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageMosaic[] = {  {&_swigt__p_ossimImageMosaic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageSource[] = {  {&_swigt__p_ossimImageChain, _p_ossimImageChainTo_p_ossimImageSource, 0, 0},  {&_swigt__p_ossimImageSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageSourceFactoryBase[] = {  {&_swigt__p_ossimImageSourceFactoryBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageWriterFactory[] = {  {&_swigt__p_ossimImageWriterFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageWriterFactoryBase__ImageFileWriterList[] = {  {&_swigt__p_ossimImageWriterFactoryBase__ImageFileWriterList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimImageWriterFactoryRegistry[] = {  {&_swigt__p_ossimImageWriterFactoryRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimInfo[] = {  {&_swigt__p_ossimInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimInit[] = {  {&_swigt__p_ossimInit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimIpt[] = {  {&_swigt__p_ossimIpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimIrect[] = {  {&_swigt__p_ossimIrect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimKeyword[] = {  {&_swigt__p_ossimKeyword, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimKeywordlist[] = {  {&_swigt__p_ossimKeywordlist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLine[] = {  {&_swigt__p_ossimLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLocalTm[] = {  {&_swigt__p_ossimLocalTm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLsrPoint[] = {  {&_swigt__p_ossimLsrPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLsrRay[] = {  {&_swigt__p_ossimLsrRay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLsrSpace[] = {  {&_swigt__p_ossimLsrSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimLsrVector[] = {  {&_swigt__p_ossimLsrVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimMapProjection[] = {  {&_swigt__p_ossimMapProjection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimMapProjectionFactory[] = {  {&_swigt__p_ossimMapProjectionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimMapProjectionInfo[] = {  {&_swigt__p_ossimMapProjectionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimMaskFilter[] = {  {&_swigt__p_ossimMaskFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimMatrix4x4[] = {  {&_swigt__p_ossimMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNadconGridDatum[] = {  {&_swigt__p_ossimNadconGridDatum, 0, 0, 0},  {&_swigt__p_ossimNadconNarDatum, _p_ossimNadconNarDatumTo_p_ossimNadconGridDatum, 0, 0},  {&_swigt__p_ossimNadconNasDatum, _p_ossimNadconNasDatumTo_p_ossimNadconGridDatum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNadconGridFile[] = {  {&_swigt__p_ossimNadconGridFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNadconGridHeader[] = {  {&_swigt__p_ossimNadconGridHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNadconNarDatum[] = {  {&_swigt__p_ossimNadconNarDatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNadconNasDatum[] = {  {&_swigt__p_ossimNadconNasDatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNitfProjectionFactory[] = {  {&_swigt__p_ossimNitfProjectionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNormalizedRemapTable[] = {  {&_swigt__p_ossimNormalizedRemapTable, 0, 0, 0},  {&_swigt__p_ossimNormalizedS16RemapTable, _p_ossimNormalizedS16RemapTableTo_p_ossimNormalizedRemapTable, 0, 0},  {&_swigt__p_ossimNormalizedU11RemapTable, _p_ossimNormalizedU11RemapTableTo_p_ossimNormalizedRemapTable, 0, 0},  {&_swigt__p_ossimNormalizedU16RemapTable, _p_ossimNormalizedU16RemapTableTo_p_ossimNormalizedRemapTable, 0, 0},  {&_swigt__p_ossimNormalizedU8RemapTable, _p_ossimNormalizedU8RemapTableTo_p_ossimNormalizedRemapTable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNormalizedS16RemapTable[] = {  {&_swigt__p_ossimNormalizedS16RemapTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNormalizedU11RemapTable[] = {  {&_swigt__p_ossimNormalizedU11RemapTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNormalizedU16RemapTable[] = {  {&_swigt__p_ossimNormalizedU16RemapTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimNormalizedU8RemapTable[] = {  {&_swigt__p_ossimNormalizedU8RemapTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimObject[] = {  {&_swigt__p_ossimMapProjectionInfo, _p_ossimMapProjectionInfoTo_p_ossimObject, 0, 0},  {&_swigt__p_ossimObject, 0, 0, 0},  {&_swigt__p_ossimGeneralRasterInfo, _p_ossimGeneralRasterInfoTo_p_ossimObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimObjectDestructingEvent[] = {  {&_swigt__p_ossimObjectDestructingEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimOverviewBuilderBase[] = {  {&_swigt__p_ossimOverviewBuilderBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimOverviewBuilderFactory[] = {  {&_swigt__p_ossimOverviewBuilderFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimOverviewBuilderFactoryBase[] = {  {&_swigt__p_ossimOverviewBuilderFactoryBase, 0, 0, 0},  {&_swigt__p_ossimOverviewBuilderFactory, _p_ossimOverviewBuilderFactoryTo_p_ossimOverviewBuilderFactoryBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimOverviewBuilderFactoryRegistry[] = {  {&_swigt__p_ossimOverviewBuilderFactoryRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimOverviewSequencer[] = {  {&_swigt__p_ossimOverviewSequencer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimPolygon[] = {  {&_swigt__p_ossimPolygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimPositionQualityEvaluator[] = {  {&_swigt__p_ossimPositionQualityEvaluator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimProjection[] = {  {&_swigt__p_ossimProjection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimProjectionFactoryRegistry[] = {  {&_swigt__p_ossimProjectionFactoryRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimCsvFile__Record_t[] = {  {&_swigt__p_ossimRefPtrT_ossimCsvFile__Record_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimIFStream_t[] = {  {&_swigt__p_ossimRefPtrT_ossimIFStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimImageData_t[] = {  {&_swigt__p_ossimRefPtrT_ossimImageData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimImageGeometry_t[] = {  {&_swigt__p_ossimRefPtrT_ossimImageGeometry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimImageHandler_t[] = {  {&_swigt__p_ossimRefPtrT_ossimImageHandler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimMetadataFileWriter_t[] = {  {&_swigt__p_ossimRefPtrT_ossimMetadataFileWriter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimTieGpt_t[] = {  {&_swigt__p_ossimRefPtrT_ossimTieGpt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRefPtrT_ossimXmlNode_t[] = {  {&_swigt__p_ossimRefPtrT_ossimXmlNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRgbImage[] = {  {&_swigt__p_ossimRgbImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRgbVector[] = {  {&_swigt__p_ossimRgbVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRpcPqeInputs[] = {  {&_swigt__p_ossimRpcPqeInputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRpfToc[] = {  {&_swigt__p_ossimRpfToc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRpfTocEntry[] = {  {&_swigt__p_ossimRpfTocEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimRpfUtil[] = {  {&_swigt__p_ossimRpfUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimSensorModel[] = {  {&_swigt__p_ossimSensorModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimSensorModelFactory[] = {  {&_swigt__p_ossimSensorModelFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimSensorModelTuple[] = {  {&_swigt__p_ossimSensorModelTuple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStatePlaneProjectionInfo[] = {  {&_swigt__p_ossimStatePlaneProjectionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStreamBase[] = {  {&_swigt__p_ossimStreamBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStreamFactory[] = {  {&_swigt__p_ossimStreamFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStreamFactoryBase[] = {  {&_swigt__p_ossimStreamFactoryRegistry, _p_ossimStreamFactoryRegistryTo_p_ossimStreamFactoryBase, 0, 0},  {&_swigt__p_ossimStreamFactoryBase, 0, 0, 0},  {&_swigt__p_ossimStreamFactory, _p_ossimStreamFactoryTo_p_ossimStreamFactoryBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStreamFactoryRegistry[] = {  {&_swigt__p_ossimStreamFactoryRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimString[] = {  {&_swigt__p_ossimTempFilename, _p_ossimTempFilenameTo_p_ossimString, 0, 0},  {&_swigt__p_ossimString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimStringLtstr[] = {  {&_swigt__p_ossimStringLtstr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTDpt[] = {  {&_swigt__p_ossimTDpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTempFilename[] = {  {&_swigt__p_ossimTempFilename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimThinPlateSpline[] = {  {&_swigt__p_ossimThinPlateSpline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimThreeParamDatum[] = {  {&_swigt__p_ossimThreeParamDatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTieGpt[] = {  {&_swigt__p_ossimTieGpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTieGptSet[] = {  {&_swigt__p_ossimTieGptSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTiffProjectionFactory[] = {  {&_swigt__p_ossimTiffProjectionFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTileHash[] = {  {&_swigt__p_ossimTileHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTiledImageHash[] = {  {&_swigt__p_ossimTiledImageHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTimer[] = {  {&_swigt__p_ossimTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTrace[] = {  {&_swigt__p_ossimTrace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimTraceManager[] = {  {&_swigt__p_ossimTraceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimUpspt[] = {  {&_swigt__p_ossimUpspt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimUtmpt[] = {  {&_swigt__p_ossimUtmpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ossimVisitor[] = {  {&_swigt__p_ossimVisitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pqeErrorEllipse[] = {  {&_swigt__p_pqeErrorEllipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pqeRPCModel[] = {  {&_swigt__p_pqeRPCModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ossimFilename_t[] = {  {&_swigt__p_std__allocatorT_ossimFilename_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ossimString_t[] = {  {&_swigt__p_std__allocatorT_ossimString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_ossimException, _p_ossimExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base__openmode[] = {  {&_swigt__p_std__ios_base__openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_ossimString_t[] = {  {&_swigt__p_std__listT_ossimString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string__const_iterator[] = {  {&_swigt__p_std__string__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string__iterator[] = {  {&_swigt__p_std__string__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string__size_type[] = {  {&_swigt__p_std__string__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t[] = {  {&_swigt__p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t[] = {  {&_swigt__p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t[] = {  {&_swigt__p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t[] = {  {&_swigt__p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t[] = {  {&_swigt__p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t[] = {  {&_swigt__p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t[] = {  {&_swigt__p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t[] = {  {&_swigt__p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t[] = {  {&_swigt__p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t[] = {  {&_swigt__p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t[] = {  {&_swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t[] = {  {&_swigt__p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vizGeorefInterType[] = {  {&_swigt__p_vizGeorefInterType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DirectMap,
  _swigc__p_ElevationDatabaseListType,
  _swigc__p_FilenameListType,
  _swigc__p_NEWMAT__Matrix,
  _swigc__p_NEWMAT__SymmetricMatrix,
  _swigc__p_StringListType,
  _swigc__p_Timer_t,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_listT_ossimString_t,
  _swigc__p_long_long,
  _swigc__p_ossim2dLinearRegression,
  _swigc__p_ossim2dTo2dTransform,
  _swigc__p_ossim2dTo2dTransformFactory,
  _swigc__p_ossimAdjustableParameterInfo,
  _swigc__p_ossimAnnotationMultiEllipseObject,
  _swigc__p_ossimAnnotationObject,
  _swigc__p_ossimAnnotationObjectFactory,
  _swigc__p_ossimArgumentParser,
  _swigc__p_ossimBitMaskWriter,
  _swigc__p_ossimCallback2wRetT_ossimFilename_const_R_bool_R_bool_t,
  _swigc__p_ossimColumnVector3d,
  _swigc__p_ossimConnectableObject,
  _swigc__p_ossimConnectableObject__ConnectableObjectList,
  _swigc__p_ossimConnectionEvent,
  _swigc__p_ossimCsvFile,
  _swigc__p_ossimDatum,
  _swigc__p_ossimDatumFactory,
  _swigc__p_ossimDatumFactoryInterface,
  _swigc__p_ossimDatumFactoryRegistry,
  _swigc__p_ossimDirectory,
  _swigc__p_ossimDirectoryData,
  _swigc__p_ossimDpt,
  _swigc__p_ossimDpt3d,
  _swigc__p_ossimDrect,
  _swigc__p_ossimDtedElevationDatabase,
  _swigc__p_ossimEbcdicToAscii,
  _swigc__p_ossimEcefPoint,
  _swigc__p_ossimEcefRay,
  _swigc__p_ossimEcefVector,
  _swigc__p_ossimElevCellHandler,
  _swigc__p_ossimElevCellHandlerFactory,
  _swigc__p_ossimElevManager,
  _swigc__p_ossimElevUtil,
  _swigc__p_ossimElevationDatabase,
  _swigc__p_ossimElevationDatabaseFactory,
  _swigc__p_ossimElevationDatabaseRegistry,
  _swigc__p_ossimEllipsoid,
  _swigc__p_ossimEllipsoidFactory,
  _swigc__p_ossimEnvironmentUtility,
  _swigc__p_ossimEpsgDatumFactory,
  _swigc__p_ossimEpsgProjectionDatabase,
  _swigc__p_ossimEpsgProjectionFactory,
  _swigc__p_ossimEquTokenizerFlexLexer,
  _swigc__p_ossimErrorCodes,
  _swigc__p_ossimEvent,
  _swigc__p_ossimException,
  _swigc__p_ossimFileWalker,
  _swigc__p_ossimFilename,
  _swigc__p_ossimFilter,
  _swigc__p_ossimFilterResampler,
  _swigc__p_ossimFilterTable,
  _swigc__p_ossimFontInformation,
  _swigc__p_ossimFpt,
  _swigc__p_ossimGeneralRasterInfo,
  _swigc__p_ossimGeoAnnotationMultiEllipseObject,
  _swigc__p_ossimGeoPolygon,
  _swigc__p_ossimGeoTiffCoordTransformsLut,
  _swigc__p_ossimGeoTiffDatumLut,
  _swigc__p_ossimGeoidNgsHeader,
  _swigc__p_ossimGeoref,
  _swigc__p_ossimGpt,
  _swigc__p_ossimGrect,
  _swigc__p_ossimGridRemapEngine,
  _swigc__p_ossimGridRemapEngineFactory,
  _swigc__p_ossimHistoMatchRemapper,
  _swigc__p_ossimId,
  _swigc__p_ossimIgenGenerator,
  _swigc__p_ossimImageChain,
  _swigc__p_ossimImageData,
  _swigc__p_ossimImageDataHelper,
  _swigc__p_ossimImageFileWriter,
  _swigc__p_ossimImageGeometry,
  _swigc__p_ossimImageGeometryFactory,
  _swigc__p_ossimImageHandler,
  _swigc__p_ossimImageMetaData,
  _swigc__p_ossimImageMetaDataWriterFactoryBase,
  _swigc__p_ossimImageMetaDataWriterRegistry,
  _swigc__p_ossimImageMosaic,
  _swigc__p_ossimImageSource,
  _swigc__p_ossimImageSourceFactoryBase,
  _swigc__p_ossimImageWriterFactory,
  _swigc__p_ossimImageWriterFactoryBase__ImageFileWriterList,
  _swigc__p_ossimImageWriterFactoryRegistry,
  _swigc__p_ossimInfo,
  _swigc__p_ossimInit,
  _swigc__p_ossimIpt,
  _swigc__p_ossimIrect,
  _swigc__p_ossimKeyword,
  _swigc__p_ossimKeywordlist,
  _swigc__p_ossimLine,
  _swigc__p_ossimLocalTm,
  _swigc__p_ossimLsrPoint,
  _swigc__p_ossimLsrRay,
  _swigc__p_ossimLsrSpace,
  _swigc__p_ossimLsrVector,
  _swigc__p_ossimMapProjection,
  _swigc__p_ossimMapProjectionFactory,
  _swigc__p_ossimMapProjectionInfo,
  _swigc__p_ossimMaskFilter,
  _swigc__p_ossimMatrix4x4,
  _swigc__p_ossimNadconGridDatum,
  _swigc__p_ossimNadconGridFile,
  _swigc__p_ossimNadconGridHeader,
  _swigc__p_ossimNadconNarDatum,
  _swigc__p_ossimNadconNasDatum,
  _swigc__p_ossimNitfProjectionFactory,
  _swigc__p_ossimNormalizedRemapTable,
  _swigc__p_ossimNormalizedS16RemapTable,
  _swigc__p_ossimNormalizedU11RemapTable,
  _swigc__p_ossimNormalizedU16RemapTable,
  _swigc__p_ossimNormalizedU8RemapTable,
  _swigc__p_ossimObject,
  _swigc__p_ossimObjectDestructingEvent,
  _swigc__p_ossimOverviewBuilderBase,
  _swigc__p_ossimOverviewBuilderFactory,
  _swigc__p_ossimOverviewBuilderFactoryBase,
  _swigc__p_ossimOverviewBuilderFactoryRegistry,
  _swigc__p_ossimOverviewSequencer,
  _swigc__p_ossimPolygon,
  _swigc__p_ossimPositionQualityEvaluator,
  _swigc__p_ossimProjection,
  _swigc__p_ossimProjectionFactoryRegistry,
  _swigc__p_ossimRefPtrT_ossimCsvFile__Record_t,
  _swigc__p_ossimRefPtrT_ossimIFStream_t,
  _swigc__p_ossimRefPtrT_ossimImageData_t,
  _swigc__p_ossimRefPtrT_ossimImageGeometry_t,
  _swigc__p_ossimRefPtrT_ossimImageHandler_t,
  _swigc__p_ossimRefPtrT_ossimMetadataFileWriter_t,
  _swigc__p_ossimRefPtrT_ossimTieGpt_t,
  _swigc__p_ossimRefPtrT_ossimXmlNode_t,
  _swigc__p_ossimRgbImage,
  _swigc__p_ossimRgbVector,
  _swigc__p_ossimRpcPqeInputs,
  _swigc__p_ossimRpfToc,
  _swigc__p_ossimRpfTocEntry,
  _swigc__p_ossimRpfUtil,
  _swigc__p_ossimSensorModel,
  _swigc__p_ossimSensorModelFactory,
  _swigc__p_ossimSensorModelTuple,
  _swigc__p_ossimStatePlaneProjectionInfo,
  _swigc__p_ossimStreamBase,
  _swigc__p_ossimStreamFactory,
  _swigc__p_ossimStreamFactoryBase,
  _swigc__p_ossimStreamFactoryRegistry,
  _swigc__p_ossimString,
  _swigc__p_ossimStringLtstr,
  _swigc__p_ossimTDpt,
  _swigc__p_ossimTempFilename,
  _swigc__p_ossimThinPlateSpline,
  _swigc__p_ossimThreeParamDatum,
  _swigc__p_ossimTieGpt,
  _swigc__p_ossimTieGptSet,
  _swigc__p_ossimTiffProjectionFactory,
  _swigc__p_ossimTileHash,
  _swigc__p_ossimTiledImageHash,
  _swigc__p_ossimTimer,
  _swigc__p_ossimTrace,
  _swigc__p_ossimTraceManager,
  _swigc__p_ossimUpspt,
  _swigc__p_ossimUtmpt,
  _swigc__p_ossimVisitor,
  _swigc__p_ostream,
  _swigc__p_p_PyObject,
  _swigc__p_p_char,
  _swigc__p_pqeErrorEllipse,
  _swigc__p_pqeRPCModel,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_ossimFilename_t,
  _swigc__p_std__allocatorT_ossimString_t,
  _swigc__p_std__exception,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base__openmode,
  _swigc__p_std__istream,
  _swigc__p_std__listT_ossimString_t,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__string__const_iterator,
  _swigc__p_std__string__iterator,
  _swigc__p_std__string__size_type,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_ossimConnectableObject_p_std__allocatorT_ossimConnectableObject_p_t_t,
  _swigc__p_std__vectorT_ossimDpt_std__allocatorT_ossimDpt_t_t,
  _swigc__p_std__vectorT_ossimFilename_std__allocatorT_ossimFilename_t_t,
  _swigc__p_std__vectorT_ossimGeoPolygon_std__allocatorT_ossimGeoPolygon_t_t,
  _swigc__p_std__vectorT_ossimGpt_std__allocatorT_ossimGpt_t_t,
  _swigc__p_std__vectorT_ossimIpt_std__allocatorT_ossimIpt_t_t,
  _swigc__p_std__vectorT_ossimKeywordlist_std__allocatorT_ossimKeywordlist_t_t,
  _swigc__p_std__vectorT_ossimPolygon_std__allocatorT_ossimPolygon_t_t,
  _swigc__p_std__vectorT_ossimRefPtrT_ossimElevationDatabase_t_std__allocatorT_ossimRefPtrT_ossimElevationDatabase_t_t_t,
  _swigc__p_std__vectorT_ossimRefPtrT_ossimTieGpt_t_std__allocatorT_ossimRefPtrT_ossimTieGpt_t_t_t,
  _swigc__p_std__vectorT_ossimString_std__allocatorT_ossimString__ossimString_t_t,
  _swigc__p_std__vectorT_ossimString_std__allocatorT_ossimString_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_vizGeorefInterType,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "ossimInit_HEADER",SWIG_From_int(static_cast< int >(1)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimCsvFile_INVALID_INDEX",Swig_var_ossimCsvFile_INVALID_INDEX_get, Swig_var_ossimCsvFile_INVALID_INDEX_set);
  SWIG_Python_SetConstant(d, "ossimDatumFactory_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimDirectory_OSSIM_DIR_FILES",SWIG_From_int(static_cast< int >(ossimDirectory::OSSIM_DIR_FILES)));
  SWIG_Python_SetConstant(d, "ossimDirectory_OSSIM_DIR_DIRS",SWIG_From_int(static_cast< int >(ossimDirectory::OSSIM_DIR_DIRS)));
  SWIG_Python_SetConstant(d, "ossimDirectory_OSSIM_DIR_HIDDEN",SWIG_From_int(static_cast< int >(ossimDirectory::OSSIM_DIR_HIDDEN)));
  SWIG_Python_SetConstant(d, "ossimDirectory_OSSIM_DIR_DOTDOT",SWIG_From_int(static_cast< int >(ossimDirectory::OSSIM_DIR_DOTDOT)));
  SWIG_Python_SetConstant(d, "ossimDirectory_OSSIM_DIR_DEFAULT",SWIG_From_int(static_cast< int >(ossimDirectory::OSSIM_DIR_DEFAULT)));
  SWIG_Python_SetConstant(d, "ossimEpsgDatumFactory_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_OK",Swig_var_ossimErrorCodes_OSSIM_OK_get, Swig_var_ossimErrorCodes_OSSIM_OK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_NO_ERROR",Swig_var_ossimErrorCodes_OSSIM_NO_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_NO_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_WARNING",Swig_var_ossimErrorCodes_OSSIM_WARNING_get, Swig_var_ossimErrorCodes_OSSIM_WARNING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ERROR",Swig_var_ossimErrorCodes_OSSIM_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1",Swig_var_ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1_get, Swig_var_ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_LAT_ERROR",Swig_var_ossimErrorCodes_OSSIM_LAT_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_LAT_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_LON_ERROR",Swig_var_ossimErrorCodes_OSSIM_LON_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_LON_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_NORTHING_ERROR",Swig_var_ossimErrorCodes_OSSIM_NORTHING_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_NORTHING_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR",Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_CENT_MER_ERROR",Swig_var_ossimErrorCodes_OSSIM_CENT_MER_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_CENT_MER_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_A_ERROR",Swig_var_ossimErrorCodes_OSSIM_A_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_A_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_B_ERROR",Swig_var_ossimErrorCodes_OSSIM_B_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_B_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_A_LESS_B_ERROR",Swig_var_ossimErrorCodes_OSSIM_A_LESS_B_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_A_LESS_B_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_FIRST_STDP_ERROR",Swig_var_ossimErrorCodes_OSSIM_FIRST_STDP_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_FIRST_STDP_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_SEC_STDP_ERROR",Swig_var_ossimErrorCodes_OSSIM_SEC_STDP_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_SEC_STDP_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR",Swig_var_ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_HEMISPHERE_ERROR",Swig_var_ossimErrorCodes_OSSIM_HEMISPHERE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_HEMISPHERE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_EASTING_ERROR",Swig_var_ossimErrorCodes_OSSIM_EASTING_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_EASTING_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_RADIUS_ERROR",Swig_var_ossimErrorCodes_OSSIM_RADIUS_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_RADIUS_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR",Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ORIENTATION_ERROR",Swig_var_ossimErrorCodes_OSSIM_ORIENTATION_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ORIENTATION_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR",Swig_var_ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ZONE_ERROR",Swig_var_ossimErrorCodes_OSSIM_ZONE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ZONE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR",Swig_var_ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_INVALID_FILE_ERROR",Swig_var_ossimErrorCodes_OSSIM_INVALID_FILE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_INVALID_FILE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_OPEN_FILE_ERROR",Swig_var_ossimErrorCodes_OSSIM_OPEN_FILE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_OPEN_FILE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_WRITE_FILE_ERROR",Swig_var_ossimErrorCodes_OSSIM_WRITE_FILE_ERROR_get, Swig_var_ossimErrorCodes_OSSIM_WRITE_FILE_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimErrorCodes_OSSIM_ERROR_UNKNOWN",Swig_var_ossimErrorCodes_OSSIM_ERROR_UNKNOWN_get, Swig_var_ossimErrorCodes_OSSIM_ERROR_UNKNOWN_set);
  SWIG_Python_SetConstant(d, "ossimFilename_OSSIM_READ_WRITE",SWIG_From_int(static_cast< int >(ossimFilename::OSSIM_READ_WRITE)));
  SWIG_Python_SetConstant(d, "ossimFilename_OSSIM_READ",SWIG_From_int(static_cast< int >(ossimFilename::OSSIM_READ)));
  SWIG_Python_SetConstant(d, "ossimFilename_OSSIM_WRITE",SWIG_From_int(static_cast< int >(ossimFilename::OSSIM_WRITE)));
  SWIG_Python_SetConstant(d, "ossimFilename_OSSIM_EXE",SWIG_From_int(static_cast< int >(ossimFilename::OSSIM_EXE)));
  SWIG_Python_SetConstant(d, "ossimFilename_OSSIM_EXIST",SWIG_From_int(static_cast< int >(ossimFilename::OSSIM_EXIST)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFilename_NIL",Swig_var_ossimFilename_NIL_get, Swig_var_ossimFilename_NIL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_FAMILY_NAME_KW",Swig_var_ossimFontInformation_FAMILY_NAME_KW_get, Swig_var_ossimFontInformation_FAMILY_NAME_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_STYLE_NAME_KW",Swig_var_ossimFontInformation_STYLE_NAME_KW_get, Swig_var_ossimFontInformation_STYLE_NAME_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_POINT_SIZE_KW",Swig_var_ossimFontInformation_POINT_SIZE_KW_get, Swig_var_ossimFontInformation_POINT_SIZE_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_POINT_SIZE_X_KW",Swig_var_ossimFontInformation_POINT_SIZE_X_KW_get, Swig_var_ossimFontInformation_POINT_SIZE_X_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_POINT_SIZE_Y_KW",Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_get, Swig_var_ossimFontInformation_POINT_SIZE_Y_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_FIXED_FLAG_KW",Swig_var_ossimFontInformation_FIXED_FLAG_KW_get, Swig_var_ossimFontInformation_FIXED_FLAG_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SHEAR_KW",Swig_var_ossimFontInformation_SHEAR_KW_get, Swig_var_ossimFontInformation_SHEAR_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SHEAR_X_KW",Swig_var_ossimFontInformation_SHEAR_X_KW_get, Swig_var_ossimFontInformation_SHEAR_X_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SHEAR_Y_KW",Swig_var_ossimFontInformation_SHEAR_Y_KW_get, Swig_var_ossimFontInformation_SHEAR_Y_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SCALE_KW",Swig_var_ossimFontInformation_SCALE_KW_get, Swig_var_ossimFontInformation_SCALE_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SCALE_X_KW",Swig_var_ossimFontInformation_SCALE_X_KW_get, Swig_var_ossimFontInformation_SCALE_X_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_SCALE_Y_KW",Swig_var_ossimFontInformation_SCALE_Y_KW_get, Swig_var_ossimFontInformation_SCALE_Y_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimFontInformation_ROTATION_KW",Swig_var_ossimFontInformation_ROTATION_KW_get, Swig_var_ossimFontInformation_ROTATION_KW_set);
  SWIG_Python_SetConstant(d, "GEOCENT_NO_ERROR",SWIG_From_int(static_cast< int >(0x0000)));
  SWIG_Python_SetConstant(d, "GEOCENT_LAT_ERROR",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, "GEOCENT_LON_ERROR",SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Python_SetConstant(d, "GEOCENT_A_ERROR",SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Python_SetConstant(d, "GEOCENT_INV_F_ERROR",SWIG_From_int(static_cast< int >(0x0008)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_TransverseMercator",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_TransverseMercator)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_TransvMercator_Modified_Alaska",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_TransvMercator_Modified_Alaska)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_ObliqueMercator)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Laborde",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_ObliqueMercator_Laborde)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Rosenmund",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_ObliqueMercator_Rosenmund)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Spherical",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_ObliqueMercator_Spherical)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Mercator",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Mercator)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_2SP",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_LambertConfConic_2SP)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_Helmert",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_LambertConfConic_Helmert)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_LambertAzimEqualArea",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_LambertAzimEqualArea)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_AlbersEqualArea",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_AlbersEqualArea)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_AzimuthalEquidistant",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_AzimuthalEquidistant)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_EquidistantConic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_EquidistantConic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Stereographic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Stereographic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_PolarStereographic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_PolarStereographic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_ObliqueStereographic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_ObliqueStereographic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Equirectangular",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Equirectangular)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_CassiniSoldner",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_CassiniSoldner)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Gnomonic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Gnomonic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_MillerCylindrical",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_MillerCylindrical)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Orthographic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Orthographic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Polyconic",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Polyconic)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Robinson",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Robinson)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_Sinusoidal",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_Sinusoidal)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_VanDerGrinten",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_VanDerGrinten)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_NewZealandMapGrid",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_NewZealandMapGrid)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffCoordTransformsLut_CT_TransvMercator_SouthOriented",SWIG_From_int(static_cast< int >(ossimGeoTiffCoordTransformsLut::CT_TransvMercator_SouthOriented)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_Adindan",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_Adindan)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_Arc_1950",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_Arc_1950)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_Arc_1960",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_Arc_1960)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_ED50",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_ED50)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_NAD27",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_NAD27)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_NAD83",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_NAD83)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_OSGB_1936",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_OSGB_1936)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_WGS_72",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_WGS_72)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_WGS_84",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_WGS_84)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_Tokyo",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_Tokyo)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_NAD83_HARN",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_NAD83_HARN)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_GCS_Clark_1866",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::GCS_Clark_1866)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_DatumE_WGS84",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::DatumE_WGS84)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_Adindan",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_Adindan)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_Arc_1950",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_Arc_1950)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_Arc_1960",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_Arc_1960)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_European_Datum_1950",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_European_Datum_1950)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_North_American_Datum_1927",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_North_American_Datum_1927)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_North_American_Datum_1983",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_North_American_Datum_1983)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_OSGB_1936",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_OSGB_1936)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_Tokyo",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_Tokyo)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_WGS72",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_WGS72)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_WGS84",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_WGS84)));
  SWIG_Python_SetConstant(d, "ossimGeoTiffDatumLut_Datum_NAD83_HARN",SWIG_From_int(static_cast< int >(ossimGeoTiffDatumLut::Datum_NAD83_HARN)));
  SWIG_Python_SetConstant(d, "ossimIrect_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimIrect_UPPER_LEFT",SWIG_From_int(static_cast< int >(ossimIrect::UPPER_LEFT)));
  SWIG_Python_SetConstant(d, "ossimIrect_LOWER_LEFT",SWIG_From_int(static_cast< int >(ossimIrect::LOWER_LEFT)));
  SWIG_Python_SetConstant(d, "ossimIrect_LOWER_RIGHT",SWIG_From_int(static_cast< int >(ossimIrect::LOWER_RIGHT)));
  SWIG_Python_SetConstant(d, "ossimIrect_UPPER_RIGHT",SWIG_From_int(static_cast< int >(ossimIrect::UPPER_RIGHT)));
  SWIG_Python_SetConstant(d, "ossimString_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ZERO_POINTS",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_ZERO_POINTS)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_POINT",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_ONE_POINT)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_TWO_POINTS",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_TWO_POINTS)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_FULL",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_FULL)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_ADDED",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_POINT_WAS_ADDED)));
  SWIG_Python_SetConstant(d, "ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_DELETED",SWIG_From_int(static_cast< int >(ossimThinPlateSpline::VIZ_GEOREF_SPLINE_POINT_WAS_DELETED)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimTieGptSet_TIEPTSET_TAG",Swig_var_ossimTieGptSet_TIEPTSET_TAG_get, Swig_var_ossimTieGptSet_TIEPTSET_TAG_set);
  SWIG_Python_SetConstant(d, "ossimTimer_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimBitMaskWriter_BM_STARTING_RLEVEL_KW",Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get, Swig_var_ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER",Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get, Swig_var_ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set);
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_NEAREST_NEIGHBOR",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_NEAREST_NEIGHBOR)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BOX",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BOX)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_GAUSSIAN",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_GAUSSIAN)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_CUBIC",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_CUBIC)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_HANNING",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_HANNING)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_HAMMING",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_HAMMING)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_LANCZOS",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_LANCZOS)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_MITCHELL",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_MITCHELL)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_CATROM",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_CATROM)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BLACKMAN",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BLACKMAN)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BLACKMAN_SINC",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BLACKMAN_SINC)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BLACKMAN_BESSEL",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BLACKMAN_BESSEL)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_QUADRATIC",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_QUADRATIC)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_TRIANGLE",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_TRIANGLE)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BILINEAR",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BILINEAR)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_HERMITE",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_HERMITE)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BELL",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BELL)));
  SWIG_Python_SetConstant(d, "ossimFilterResampler_ossimFilterResampler_BSPLINE",SWIG_From_int(static_cast< int >(ossimFilterResampler::ossimFilterResampler_BSPLINE)));
  SWIG_Python_SetConstant(d, "ossimGeneralRasterInfo_NONE",SWIG_From_int(static_cast< int >(ossimGeneralRasterInfo::NONE)));
  SWIG_Python_SetConstant(d, "ossimGeneralRasterInfo_ZEROES_TO_MIN",SWIG_From_int(static_cast< int >(ossimGeneralRasterInfo::ZEROES_TO_MIN)));
  SWIG_Python_SetConstant(d, "ossimGeneralRasterInfo_ZEROES_TO_NULL_EDGES_ONLY",SWIG_From_int(static_cast< int >(ossimGeneralRasterInfo::ZEROES_TO_NULL_EDGES_ONLY)));
  SWIG_Python_SetConstant(d, "ossimGeneralRasterInfo_UNKNOWN",SWIG_From_int(static_cast< int >(ossimGeneralRasterInfo::UNKNOWN)));
  SWIG_Python_SetConstant(d, "ossimImageGeometryFactory_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimNormalizedS16RemapTable_TABLE_ENTRIES",SWIG_From_int(static_cast< int >(ossimNormalizedS16RemapTable::TABLE_ENTRIES)));
  SWIG_Python_SetConstant(d, "ossimNormalizedS16RemapTable_OFFSET_TO_ZERO",SWIG_From_int(static_cast< int >(ossimNormalizedS16RemapTable::OFFSET_TO_ZERO)));
  SWIG_Python_SetConstant(d, "ossimNormalizedS16RemapTable_NULL_PIX",SWIG_From_int(static_cast< int >(ossimNormalizedS16RemapTable::NULL_PIX)));
  SWIG_Python_SetConstant(d, "ossimNormalizedS16RemapTable_MIN_PIX",SWIG_From_int(static_cast< int >(ossimNormalizedS16RemapTable::MIN_PIX)));
  SWIG_Python_SetConstant(d, "ossimNormalizedU11RemapTable_TABLE_ENTRIES",SWIG_From_int(static_cast< int >(ossimNormalizedU11RemapTable::TABLE_ENTRIES)));
  SWIG_Python_SetConstant(d, "ossimNormalizedU16RemapTable_TABLE_ENTRIES",SWIG_From_int(static_cast< int >(ossimNormalizedU16RemapTable::TABLE_ENTRIES)));
  SWIG_Python_SetConstant(d, "ossimNormalizedU8RemapTable_TABLE_ENTRIES",SWIG_From_int(static_cast< int >(ossimNormalizedU8RemapTable::TABLE_ENTRIES)));
  SWIG_Python_SetConstant(d, "ossimOverviewSequencer_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimMapProjectionInfo_README_IMAGE_STRING_KW",Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_get, Swig_var_ossimMapProjectionInfo_README_IMAGE_STRING_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimMapProjectionInfo_PIXEL_TYPE_KW",Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_get, Swig_var_ossimMapProjectionInfo_PIXEL_TYPE_KW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW",Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get, Swig_var_ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set);
  SWIG_Python_SetConstant(d, "ossimNitfProjectionFactory_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ONE_SIGMA",SWIG_From_int(static_cast< int >(ONE_SIGMA)));
  SWIG_Python_SetConstant(d, "P50",SWIG_From_int(static_cast< int >(P50)));
  SWIG_Python_SetConstant(d, "P90",SWIG_From_int(static_cast< int >(P90)));
  SWIG_Python_SetConstant(d, "P95",SWIG_From_int(static_cast< int >(P95)));
  SWIG_Python_SetConstant(d, "NUM_PROB_LEVELS",SWIG_From_int(static_cast< int >(NUM_PROB_LEVELS)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_OBS_INIT",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::OBS_INIT)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_EVALUATE",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::EVALUATE)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_P_WRT_X",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::P_WRT_X)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_P_WRT_Y",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::P_WRT_Y)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_P_WRT_Z",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::P_WRT_Z)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_OP_SUCCESS",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::OP_SUCCESS)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_ERROR_PROP_FAIL",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::ERROR_PROP_FAIL)));
  SWIG_Python_SetConstant(d, "ossimSensorModelTuple_OP_FAIL",SWIG_From_int(static_cast< int >(ossimSensorModelTuple::OP_FAIL)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_OP_UNKNOWN",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_OP_UNKNOWN)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_OP_HILL_SHADE",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_OP_HILL_SHADE)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_OP_COLOR_RELIEF",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_OP_COLOR_RELIEF)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_OP_ORTHO",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_OP_ORTHO)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_PROJ_UNKNOWN",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_PROJ_UNKNOWN)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_PROJ_GEO",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_PROJ_GEO)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_PROJ_GEO_SCALED",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_PROJ_GEO_SCALED)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_PROJ_INPUT",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_PROJ_INPUT)));
  SWIG_Python_SetConstant(d, "ossimElevUtil_OSSIM_DEM_PROJ_UTM",SWIG_From_int(static_cast< int >(ossimElevUtil::OSSIM_DEM_PROJ_UTM)));
  SWIG_Python_SetConstant(d, "ossimFileWalker_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimInfo_HEADER",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ossimRpfUtil_HEADER",SWIG_From_int(static_cast< int >(1)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

